#include "persons_wnd.h"
#include "ui_persons_wnd.h"

#include <QtSql>
#include <QTime>
#include <QTimer>
#include <QMessageBox>
#include <QFileDialog>
#include <QTextCodec>
#include <QDesktopWidget>
#include <QInputDialog>
#include <QScrollBar>
#include <QModelIndexList>
#include <winuser.h>

#include "firms_wnd.h"
#include "photoeditor_wnd.h"

#include "s_data_vizit.h"
#include "d_date.h"

persons_wnd::persons_wnd(QSqlDatabase &db, s_data_app &data_app, QSettings &settings, QWidget *parent)
 : db(db), data_app(data_app), settings(settings), QMainWindow(parent), ui(new Ui::persons_wnd)
{
    ui->setupUi(this);

    can_refresh_persons_tab = false;

    this->msg_f = false;
    this->msg_a = false;
    QPalette pal = ui->bn_msg->palette();
    this->msg_bn_color = pal.color(QPalette::Button);
    this->msg_lt_color = QColor(255,255,255);

    statusLab = NULL;

    folder_w = NULL;
    polices_w = NULL;
    representers_w = NULL;
    pvp_n_vs_w = NULL;
    blanks_w = NULL;
    sessions_w = NULL;
    work_calendar_w = NULL;
    settings_w = NULL;
    send_to_fond_w = NULL;
    get_from_fond_w = NULL;
    send_pol_sms_w = NULL;
    export2csv_w = NULL;
    export_assig_w = NULL;
    export_assig_bystep_w = NULL;
    export_assig_by_mo_w = NULL;
    print_form_8_w = NULL;
    print_vs_by_date_w = NULL;
    print_enp_by_date_w = NULL;
    print_pers_sexage_w = NULL;
    //print_assig_sexage_all_mo_w = NULL;
    print_1st_aid_sexage_by_list_w = NULL;
    print_assig_sexage_by_list_w = NULL;
    print_assig_letters_by_list_w = NULL;
    print_pol_pg_w = NULL;
    print_pol_monitoring_w = NULL;
    change_polis_w = NULL;
    change_vizit_w = NULL;
    protocols_w = NULL;
    list_persons_terrs_w = NULL;
    list_assig_medorgs_w = NULL;
    add_blank_scan_w = NULL;
    add_blank_w = NULL;
    name_to_sex_w = NULL;
    namepat_to_sex_w = NULL;
    info_pers_doubles_w = NULL;
    quest2fond_w = NULL;
    print_pays2mo_w = NULL;
    print_pays2mo_rep_pt_w = NULL;
    match_tfoms_w = NULL;
    match_assig_tfoms_w = NULL;
    export_pers_by_distrs_w = NULL;
    msg_w = NULL;
    terminals_w = NULL;
    msg_timer = NULL;
    qik_timer = NULL;
    add_talk_w = NULL;
    talks_w = NULL;
    show_tab_w = NULL;
    packs_w = NULL;
    statistic_acts_w = NULL;
    tfomsFiles_w = NULL;
    fiasFiles_w = NULL;
    unite_persons_w = NULL;
    blanks_pol_act_w = NULL;
    print_subconto_w = NULL;
    print_vs_register_by_date_w = NULL;
    get_date_w = NULL;
    print_expired_vs_statistic_w = NULL;
    acts_w = NULL;
    finder_w = NULL;
    Gutten_Morgen_w = NULL;
    spr_assig_errors_w = NULL;
    spr_insure_errors_w = NULL;
    print_dispanserize_plans_w = NULL;
    resend_events_w = NULL;
    get_year_w = NULL;
    disp_plans_w = NULL;
    print_assiglay_todate_w = NULL;
    print_operator_timeline_w = NULL;
    beep_30_min_w = NULL;
    blanks_bso_w = NULL;

    id_msg = -1;
    msg = "";

    s_info_1 = "";
    s_info_2 = "";
    s_info_3 = "";
    f_info_1 = false;
    f_info_2 = false;
    f_info_3 = false;

    ui->pan_info->setVisible(false);
    ui->date_pers_pan_death->setVisible(false);

    ui->show_pers_tabl->setVisible(false);
    ui->show_pers_data->setVisible(false);
    ui->show_pers_docs->setVisible(false);

    ui->ch_pers_dopdata->setChecked(false);
    ui->ch_pers_dopdata->setEnabled(false);
    ui->te_pers_dopdata->setVisible(false);
    ui->te_pers_dopdata->clear();

    b_retro_data(false);

    //ui->bn_msg->setVisible(false);
    ui->lab_msg->setText("");
    ui->ch_assig->setEnabled(true);

    ui->lab_prep_fias->setVisible(false);
    ui->lab_test_for->setVisible(false);

    // раскладка
    long long lay0 = (long long)ActivateKeyboardLayout(HKL(68748313), 0x00000008);
    long long lay = (long long)GetKeyboardLayout(GetCurrentThreadId());
    if (lay == 68748313) {      //Russian
        ui->bn_layout->setText("Руc");
        QPalette pal = ui->bn_layout->palette();
        pal.setColor(QPalette::Button,QColor(0,255,0,255));
        ui->bn_layout->setPalette(pal);
    } else if(lay == 67699721) {  //English
        ui->bn_layout->setText("Eng");
        QPalette pal = ui->bn_layout->palette();
        pal.setColor(QPalette::Button,QColor(128,128,255,255));
        ui->bn_layout->setPalette(pal);
    } else if(lay == 69338146) {  //Ukrainian
        ui->bn_layout->setText("Укр");
        QPalette pal = ui->bn_layout->palette();
        pal.setColor(QPalette::Button,QColor(255,0,0,255));
        ui->bn_layout->setPalette(pal);
    } else { //unknown language
        ui->bn_layout->setText("???");
        QPalette pal = ui->bn_layout->palette();
        pal.setColor(QPalette::Button,QColor(200,200,200,255));
        ui->bn_layout->setPalette(pal);
    }

    if (data_app.ocato=="14000") {
        ui->spin_pers_assig_mo->setValue(310001);
    } else {
        ui->spin_pers_assig_mo->setValue(460001);
    }

    QString s_window_title = "Терминал (" + QString::number(data_app.terminal_id) + ") - \"" + data_app.terminal_name + "\"";
    this->setWindowTitle(s_window_title);
    ui->lab_window_title->setText(s_window_title);

    on_show_pers_tabl_clicked(ui->show_pers_tabl->isChecked());
    on_show_pers_data_clicked(ui->show_pers_data->isChecked());
    on_show_pers_docs_clicked(ui->show_pers_docs->isChecked());
    ui->show_pers_tabl->setEnabled(true);
    ui->show_pers_data->setEnabled(false);
    ui->show_pers_docs->setEnabled(false);

    okato_reg_subj.append("-//-");
    okato_liv_subj.append("-//-");
    kladr_reg_subj.append("-//-");
    kladr_liv_subj.append("-//-");
    index_reg_subj.append("");
    index_liv_subj.append("");

    ui->spin_pers_assig_mo->setVisible(false);
    ui->line_pers_assig_snils_mt->setVisible(false);

    ui->ch_pol_end->setChecked(false);

    ui->ch_pers_assig_mo->setChecked(false);
    ui->ch_pers_assig_mt->setChecked(false);
    ui->ch_pers_assig_ter->setChecked(false);
    ui->ch_pers_assig_ter_2->setChecked(false);
    ui->date_pol_end->setVisible(false);
    ui->date_pol_end->setDate(QDate::currentDate());

    ui->ch_pers_date->setChecked(false);
    ui->date_pers_date->setVisible(false);
    ui->date_pers_date->setDate(QDate::currentDate());
    ui->date_pers_day->setVisible(false);
    ui->date_pers_day->setDate(QDate::currentDate());
    ui->date_pers_date_from->setVisible(false);
    ui->date_pers_date_from->setDate(QDate::currentDate());
    ui->date_pers_date_to->setVisible(false);
    ui->date_pers_date_to->setDate(QDate::currentDate());

    ui->ch_pol_date->setChecked(false);
    ui->date_pol_date->setVisible(false);
    ui->date_pol_date->setDate(QDate::currentDate());
    ui->date_pol_day->setVisible(false);
    ui->date_pol_day->setDate(QDate::currentDate());
    ui->date_pol_date_from->setVisible(false);
    ui->date_pol_date_from->setDate(QDate::currentDate());
    ui->date_pol_date_to->setVisible(false);
    ui->date_pol_date_to->setDate(QDate::currentDate());

    ui->ch_insure_date->setChecked(false);
    ui->date_insure_date->setVisible(false);
    ui->date_insure_date->setDate(QDate::currentDate());
    ui->date_insure_day->setVisible(false);
    ui->date_insure_day->setDate(QDate::currentDate());
    ui->date_insure_date_from->setVisible(false);
    ui->date_insure_date_from->setDate(QDate::currentDate());
    ui->date_insure_date_to->setVisible(false);
    ui->date_insure_date_to->setDate(QDate::currentDate());

    QRect screen = QApplication::desktop()->screenGeometry();
    if (screen.width()==1024 && screen.height()==768) {
        this->setWindowState( polices_w->windowState() | Qt::WindowFullScreen);
    } else {
        this->resize(screen.width()-15, screen.height()-40);
        this->move(3,3);
    }

    statusLab = new QLabel;
    statusBar()->addWidget(statusLab);
    statusLab->setFont(QFont("Arial",10,50,false));
    pal = statusLab->palette();
    pal.setColor(QPalette::WindowText,QColor(0,0,128));
    statusLab->setPalette(pal);
    statusLab->setText(" Программа: \"Полисы ОМС\", версия:" + data_app.version + ";  сервер: " + (data_app.is_tech ? (data_app.host+" / "+data_app.db_host) : data_app.db_host) + ";  БД: " + (data_app.is_tech ? data_app.base : data_app.db_name) + ";  версия: " + data_app.db_vers + " ");

    statusOper = new QLabel;
    statusBar()->addWidget(statusOper);
    statusOper->setFont(QFont("Arial",10,50,false));
    pal = statusOper->palette();
    pal.setColor(QPalette::WindowText,QColor(0,80,0));
    statusOper->setPalette(pal);
    statusOper->setText(" ПВП: " + data_app.point_name + ";  оператор: " + data_app.operator_fio + "  (OK) ");

    ui->split_person->setStretchFactor(0,2);
    ui->split_person->setStretchFactor(1,2);

    ui->split_pol_act->setStretchFactor(0,3);
    ui->split_pol_act->setStretchFactor(1,2);

    ui->bn_pers_pol_close->setToolTip("Закрыть полис без отправки события в ТФОМС\n(например для полиса выданного по ошибке...)");
    ui->bn_add_orgcode->setEnabled(true);
    ui->bn_del_orgcode->setEnabled(true);

    ui->bn_guten_Morgen->setToolTip("Обновление статусов застрахованных\nперестрахованные, умершие, а так же люди, у которых сегодня истёк срок действия УДЛ, ДРП или полиса единого образца.\nЭта кнопка должна нажиматься каждое один раз");

    refresh_pers_category();
    ui->ch_pers_category->setChecked(false);
    ui->combo_pers_category->setVisible(false);

    refresh_pers_statuses();
    ui->ch_pers_status_f->setChecked(false);
    ui->combo_pers_status_f->setVisible(false);
    ui->ch_pers_tfoms_ok->setChecked(false);
    ui->ch_pers_tfoms_no->setChecked(false);
    ui->ch_pers_tfoms_ok->setVisible(false);
    ui->ch_pers_tfoms_no->setVisible(false);

    // фильтрация по дате страхования
    ui->combo_pers_month->setVisible(false);
    ui->combo_pers_year->setVisible(false);
    ui->combo_pol_month->setVisible(false);
    ui->combo_pol_year->setVisible(false);
    ui->combo_insure_month->setVisible(false);
    ui->combo_insure_year->setVisible(false);
    refresh_pers_years_mons();

    ui->combo_pers_point->setVisible(false);
    ui->combo_pers_operator->setVisible(false);

    ui->label_polis_post_way->setVisible(false);
    ui->combo_polis_post_way->setVisible(false);

    ui->ch_archive->setChecked(true);

    ui->ch_id_field->setChecked(false);
    on_ch_id_field_clicked(false);

    if (data_app.is_locl) {
        ui->bn_guten_Morgen->setVisible(false);
        ui->ch_archive->setVisible(true);
        ui->ch_trash->setVisible(false);

        //ui->act_gen_reester_vs->setEnabled(false);
        //ui->act_gen_reester_oms->setEnabled(false);
        ui->act_resend_events->setEnabled(false);

        ui->act_sms->setEnabled(false);
        ui->act_export_tfoms->setEnabled(false);
        ui->act_import_tfoms->setEnabled(false);
        ui->act_list_terr->setEnabled(false);
        ui->act_to_CSV->setEnabled(false);
        ui->menu_14->setEnabled(false);
        ui->act_pers_sexage->setEnabled(false);
        ui->act_list_medorgs->setEnabled(false);
        ui->menu_13->setEnabled(false);
        ui->act_assig->setEnabled(false);
        ui->act_assig2->setEnabled(false);
        ui->act_assig_by_MO->setEnabled(false);
        ui->act_assig_sexage_by_list->setEnabled(false);
        ui->act_assig_sexage_all_mo->setEnabled(false);
        ui->act_assig_letters_by_list->setEnabled(false);
        ui->menu_9->setEnabled(false);
        ui->act_match_TFOMS->setEnabled(false);
        ui->act_match_assigs->setEnabled(false);

        ui->act_guten_morgen->setEnabled(false);
        ui->act_guten_morgen_all->setEnabled(false);

        ui->act_form_8->setEnabled(false);
        ui->act_vs_blanks->setEnabled(false);
        ui->act_enp_blanks->setEnabled(false);
        ui->act_vs_by_date->setEnabled(false);
        ui->act_pol_pg->setEnabled(false);
        ui->act_pol_monitoring->setEnabled(false);

        ui->act_work_calendar->setEnabled(false);

        ui->show_add_blanks->setEnabled(false);
        ui->show_protokols->setEnabled(false);
        ui->bn_show_tfoms_files->setEnabled(false);
        ui->bn_to_TFOMS->setEnabled(false);
        ui->bn_to_TFOMS_2->setEnabled(false);
        ui->bn_from_TFOMS->setEnabled(false);
        ui->bn_from_TFOMS_2->setEnabled(false);

        ui->bn_guten_Morgen->setEnabled(false);
        ui->bn_toCSV->setEnabled(false);

        ui->bn_pers_unite->setVisible(false);
        ui->bn_pers_archive->setVisible(false);
        ui->bn_pers_drop->setVisible(false);
        ui->frame_bn_polis->setVisible(false);
        ui->frame_bn_events->setVisible(false);

        // папки
        ui->ch_folder->setEnabled(false);
        ui->bn_folder_del->setEnabled(false);
        ui->bn_folder_empty->setEnabled(false);
        ui->bn_folder_new->setEnabled(false);
        ui->bn_folder_open_close->setEnabled(false);
        ui->combo_folder->setEnabled(false);
        ui->ch_folder_closed->setEnabled(false);

        ui->act_import_names->setEnabled(false);
        ui->act_import_namepats->setEnabled(false);
        ui->act_import_fias->setEnabled(false);
        ui->act_sessions->setEnabled(false);
        ui->act_terminals->setEnabled(false);

        ui->ch_pers_polis_2->setVisible(false);
        ui->ch_pers_actNget->setVisible(false);
        ui->ch_pers_act_resent_date->setVisible(false);
        ui->bn_pers_act_resent->setVisible(false);
        ui->act_resend_events->setVisible(false);

        ui->ch_retro->setChecked(false);
        ui->ch_retro->setEnabled(false);

        ui->ch_trash->setChecked(false);
        ui->ch_trash->setVisible(false);

        ui->ch_archive->setChecked(true);
        ui->ch_archive->setEnabled(true);

    } else if (data_app.is_head) {
        ui->ch_archive->setVisible(true);
        ui->ch_trash->setVisible(true);
        ui->act_resend_events->setEnabled(false);

        // папки
        ui->ch_folder->setEnabled(true);
        ui->bn_folder_del->setEnabled(true);
        ui->bn_folder_empty->setEnabled(true);
        ui->bn_folder_new->setEnabled(true);
        ui->bn_folder_open_close->setEnabled(true);
        ui->combo_folder->setEnabled(true);
        ui->ch_folder_closed->setEnabled(true);

        ui->act_import_names->setEnabled(false);
        ui->act_import_namepats->setEnabled(false);
        ui->act_import_fias->setEnabled(false);
        ui->act_sessions->setEnabled(false);
        ui->act_terminals->setEnabled(false);

        ui->act_guten_morgen->setEnabled(true);
        ui->act_guten_morgen_all->setEnabled(true);

        ui->ch_pers_polis_2->setVisible(false);
        ui->ch_pers_actNget->setVisible(false);
        ui->ch_pers_act_resent_date->setVisible(false);
        ui->bn_pers_act_resent->setVisible(false);
        ui->act_resend_events->setVisible(false);

        ui->bn_pers_unite->setVisible(true);
        ui->bn_pers_archive->setVisible(true);
        ui->bn_pers_drop->setVisible(false);

        ui->ch_retro->setChecked(false);
        ui->ch_retro->setEnabled(true);

        ui->ch_trash->setChecked(true);
        ui->ch_trash->setVisible(true);

        ui->ch_archive->setChecked(true);
        ui->ch_archive->setEnabled(true);

    } else if (data_app.is_call) {
        ui->ch_archive->setVisible(false);
        ui->ch_trash->setVisible(false);
        ui->act_resend_events->setEnabled(false);

        // папки
        ui->ch_folder->setEnabled(true);
        ui->bn_folder_del->setEnabled(false);
        ui->bn_folder_empty->setEnabled(false);
        ui->bn_folder_new->setEnabled(false);
        ui->bn_folder_open_close->setEnabled(false);
        ui->combo_folder->setEnabled(false);
        ui->ch_folder_closed->setEnabled(false);

        ui->bn_msg->setEnabled(false);
        ui->bn_to_TFOMS_2->setEnabled(false);
        ui->bn_from_TFOMS_2->setEnabled(false);
        ui->show_add_blanks->setEnabled(false);
        ui->show_protokols->setEnabled(false);
        ui->bn_show_tfoms_files->setEnabled(false);
        ui->bn_to_TFOMS->setEnabled(false);
        ui->bn_to_TFOMS_2->setEnabled(false);
        ui->bn_from_TFOMS->setEnabled(false);
        ui->bn_from_TFOMS_2->setEnabled(false);

        ui->bn_guten_Morgen->setEnabled(false);
        ui->bn_toCSV->setEnabled(false);
        ui->bn_pers_talks->setEnabled(false);
        ui->bn_pers_talk->setEnabled(false);
        ui->bn_pays2mo->setEnabled(false);
        ui->bn_to_TFOMS->setEnabled(false);
        ui->bn_from_TFOMS->setEnabled(false);
        ui->bn_pers_unite->setVisible(false);
        ui->bn_pers_archive->setVisible(false);
        ui->bn_pers_drop->setVisible(false);

        ui->bn_pers_new->setEnabled(false);
        ui->group_person_data->setEnabled(false);
        ui->group_person_docs->setEnabled(false);
        ui->bn_pers_polices->setEnabled(false);
        ui->bn_pers_polices_2->setEnabled(false);

        ui->frame_bn_polis->setVisible(false);
        ui->frame_bn_events->setVisible(false);

        ui->act_import_names->setEnabled(false);
        ui->act_import_namepats->setEnabled(false);
        ui->act_import_fias->setEnabled(false);
        ui->act_sessions->setEnabled(false);
        ui->act_terminals->setEnabled(false);

        ui->ch_pers_polis_2->setVisible(false);
        ui->ch_pers_actNget->setVisible(false);
        ui->ch_pers_act_resent_date->setVisible(false);
        ui->bn_pers_act_resent->setVisible(false);
        ui->act_resend_events->setVisible(false);

        ui->ch_retro->setChecked(false);
        ui->ch_retro->setEnabled(false);

        ui->ch_trash->setChecked(false);
        ui->ch_trash->setVisible(false);

        ui->ch_archive->setChecked(false);
        ui->ch_archive->setEnabled(false);

    } else if (data_app.is_tech) {
        ui->ch_archive->setVisible(true);
        ui->ch_trash->setVisible(true);
        ui->act_resend_events->setEnabled(true);

        // папки
        ui->ch_folder->setEnabled(true);
        ui->bn_folder_del->setEnabled(true);
        ui->bn_folder_empty->setEnabled(true);
        ui->bn_folder_new->setEnabled(true);
        ui->bn_folder_open_close->setEnabled(true);
        ui->combo_folder->setEnabled(true);
        ui->ch_folder_closed->setEnabled(true);

        ui->act_import_names->setEnabled(true);
        ui->act_import_namepats->setEnabled(true);
        ui->act_import_fias->setEnabled(true);
        ui->act_sessions->setEnabled(true);
        ui->act_terminals->setEnabled(true);

        ui->act_guten_morgen->setEnabled(true);
        ui->act_guten_morgen_all->setEnabled(true);

        ui->ch_pers_polis_2->setVisible(true);

        ui->ch_pers_actNget->setVisible(false);
        ui->ch_pers_act_resent_date->setVisible(false);
        ui->bn_pers_act_resent->setVisible(false);
        ui->act_resend_events->setVisible(false);

        ui->bn_pers_unite->setVisible(true);
        ui->bn_pers_archive->setVisible(true);
        ui->bn_pers_drop->setVisible(true);

        ui->ch_retro->setChecked(false);
        ui->ch_retro->setEnabled(true);

        ui->ch_trash->setChecked(false);
        ui->ch_trash->setVisible(true);

        ui->ch_archive->setChecked(true);
        ui->ch_archive->setEnabled(true);
    }

    ui->bn_to_TFOMS->hide();
    ui->bn_from_TFOMS->hide();

    if (data_app.ocato!="14000") {
        ui->bn_to_TFOMS_2->hide();
        ui->bn_from_TFOMS_2->hide();
        ui->bn_show_tfoms_files->hide();
        ui->bn_to_TFOMS->hide();
        ui->bn_to_TFOMS_2->hide();
        ui->bn_from_TFOMS->hide();
        ui->bn_from_TFOMS_2->hide();
    }

    ui->act_list_medorgs->setVisible(false);

    ui->ch_folder->setChecked(data_app.use_folders);
    ui->ch_folder_closed->setChecked(false);
    refresh_folders();
    ui->combo_folder->setCurrentIndex(ui->combo_folder->findText(data_app.default_folder));
    on_ch_folder_clicked(data_app.use_folders);

    // запустим таймер проверки сообщений
    delete this->msg_timer;
    this->msg_timer = new QTimer(this);
    connect(msg_timer, SIGNAL(timeout()), this, SLOT(msg_update()));
    this->msg_timer->setInterval(data_app.msg_timeout_back);
    this->msg_timer->start(data_app.msg_timeout_back);
    data_app.msg_timeout_counter = 0;

    // запустим быстрый таймер
    delete this->qik_timer;
    this->qik_timer = new QTimer(this);
    connect(qik_timer, SIGNAL(timeout()), this, SLOT(qik_update()));
    this->qik_timer->setInterval(300);
    this->qik_timer->start(300);
    quick_counter = 0;

    ui->group_filters->setChecked(false);
    on_group_filters_clicked(false);

    // обновим таблицу персон
    can_refresh_persons_tab = true;
    refresh_persons_tab();

    refresh_fias_connection();

    //on_ch_pers_pan_reg_hous_toggled(false);
    //on_ch_pers_pan_liv_hous_toggled(false);
    ui->ch_pers_pan_reg_hous->setVisible(false);
    ui->ch_pers_pan_liv_hous->setVisible(false);
}

persons_wnd::~persons_wnd() {
    delete ui;
}


void persons_wnd::on_bn_font_up_clicked() {
    QFont font = this->font();
    data_app.font_size = font.pointSize();
    data_app.font_size = int(data_app.font_size +1);
    font.setPointSize(data_app.font_size);
    this->setFont(font);
}

void persons_wnd::on_bn_font_dn_clicked() {
    QFont font = this->font();
    data_app.font_size = font.pointSize();
    data_app.font_size = int(data_app.font_size -1);
    font.setPointSize(data_app.font_size);
    this->setFont(font);
}


// обновление подключения к БД ФИАС
bool persons_wnd::refresh_fias_connection() {
    // закроем, если есть, старое подключение к БД ФИАС
    if (db_FIAS.isOpen()) {
        db_FIAS.close();
        QSqlDatabase::removeDatabase("FIAS Database");
    }

    // ------------------------------ //
    // создадим подключение к БД ФИАС //
    // ------------------------------ //
    db_FIAS = QSqlDatabase::addDatabase(data_app.FIAS_db_drvr, "FIAS Database");

    db_FIAS.setConnectOptions();
    // сервер, на котором расположена БД - у нас localhost
    db_FIAS.setHostName(data_app.FIAS_db_host);
    // порт
    db_FIAS.setDatabaseName(data_app.FIAS_db_name);
    // имя базы данных
    db_FIAS.setPort(data_app.FIAS_db_port.toInt());
    // имя пользователя - postgres
    db_FIAS.setUserName(data_app.FIAS_db_user);
    // пароль для подключения к БД
    db_FIAS.setPassword(data_app.FIAS_db_pass);

    while (!db_FIAS.open()) {
        // подключение не удалось
        QMessageBox::critical(this,"Ошибка подключения к базе ФИАС",
                              QString("ВНИМАНИЕ!!!\n\n") +
                              "При попытке подключиться к база ФИАС произошла ошибка.\n"
                              "Позвоните мне по телефону \n\n"
                              "8-920-449-54-88\n\n"
                              "Александр\n\n" +
                              "FIAS_db_drvr = " + data_app.FIAS_db_drvr + "\n" +
                              "FIAS_db_host = " + data_app.FIAS_db_host + "\n" +
                              "FIAS_db_port = " + data_app.FIAS_db_port + "\n" +
                              "FIAS_db_name = " + data_app.FIAS_db_name + "\n" +
                              "FIAS_db_user = " + data_app.FIAS_db_user + "\n" +
                              "FIAS_db_pass = " + data_app.FIAS_db_pass + "\n");
        return false;
    }
    if (db_FIAS.isOpen()) {
        // подключение готово
        return true;
    }
    return false;
}

// проверка быстрых уведомлений
QString persons_wnd::test_info_1() {
    if (data_app.ocato=="14000") {
        int day_of_week = QDate ::currentDate().dayOfWeek();
        if ( day_of_week<6
            && QTime::currentTime()>QTime(11,0,0,0) ) {
            QString sql = "select count(*) "
                          "  from files_out_i "
                          " where date_send=CURRENT_DATE ; ";
            QSqlQuery *query = new QSqlQuery(db);
            if (!mySQL.exec(this, sql, "Фоновая проверка test_info_1()", *query, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка",
                                      "При фоновой проверке test_info_1() произошла неожиданная ошибка.\n\n"
                                      "Сообщение не передано.");
                delete query;
                return "";
            }
            query->next();
            int res = query->value(0).toInt();
            if (res==0)
                return "Сегодня ещё не выгружался ни один информационный файл для ТФОМС ! ";
        }
    }
    return "";
}
QString persons_wnd::test_info_2() {
    if (data_app.ocato=="14000") {
        int day_of_week = QDate ::currentDate().dayOfWeek();
        if ( day_of_week<6
            && QTime::currentTime()>QTime(14,0,0,0) ) {
            QString sql = "select count(*) "
                          "  from files_in_p "
                          " where date_get=CURRENT_DATE ; ";
            QSqlQuery *query = new QSqlQuery(db);
            if (!mySQL.exec(this, sql, "Фоновая проверка test_info_2()", *query, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка",
                                      "При фоновой проверке test_info_2() произошла неожиданная ошибка.\n\n"
                                      "Сообщение не передано.");
                delete query;
                return "";
            }
            query->next();
            int res = query->value(0).toInt();
            if (res==0)
                return "До сих пор не загружен ни один информационный файл от ТФОМС ! ";
        }
    }
    return "";
}
QString persons_wnd::test_info_3() {
    return "";
}

// обработка таймера сообщений
void persons_wnd::msg_update() {
    //msg_counter++;

    if (data_app.is_head || data_app.is_tech) {
        s_info_1 = test_info_1();
        s_info_2 = test_info_2();
        s_info_3 = test_info_3();
        f_info_1 = !s_info_1.isEmpty();
        f_info_2 = !s_info_2.isEmpty();
        f_info_3 = !s_info_3.isEmpty();
    }
    // проверка сообщений
    // проверка времени простоя оператора
    data_app.msg_timeout_counter = data_app.dt_last_act.secsTo(QDateTime::currentDateTime());

    // -------------------------------------
    // кнопка "30 минут"
    // -------------------------------------
    // сравним новое и старое положение мыши
    QPoint pt_new_act = QCursor::pos();
    QDateTime dt_new_act = QDateTime::currentDateTime();

    if (pt_new_act!=data_app.pt_last_act) {
        // мышка подвинулась - запомним положение и время
        data_app.dt_last_act = dt_new_act;
        data_app.pt_last_act = pt_new_act;
        ui->lab_idle->setText("00");

    } else if ( !data_app.is_tech                                       // сам себя ограничивать не хочу :)
                && data_app.dt_last_act.secsTo(dt_new_act) > 1500) {    // 25 минут программа ждёт активность пользователя, а потом ещё 5 минут висит предупреждение о закрытии
        // время бездействия больше 25 минут

        // 1)  сбросим счётчик времени, чтобы этот обработчик не вызывался повторно
        data_app.dt_last_act = QDateTime::currentDateTime();
        // 2)  запустим окошко автозакрывания программы
        delete beep_30_min_w;
        beep_30_min_w = new beep_30_min_wnd(this);
        Qt::WindowFlags flags = beep_30_min_w->windowFlags();
        flags |= Qt::WindowStaysOnTopHint;
        beep_30_min_w->setWindowFlags(flags);
        beep_30_min_w->setWindowModality(Qt::ApplicationModal);
        beep_30_min_w->exec();
        // 3)  если пользователь нажал на кнопку - добавим отметку в TIMELINE
        QString sql_time = "insert into operators_timeline(id_operator, oper_date, oper_time, state) "
                           "values (" + QString::number(data_app.id_operator) + ", CURRENT_DATE, CURRENT_TIME, 2) ; ";
        QSqlQuery *query_time = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_time, "Фоновая отметка TIMELINE 2", *query_time, true, db, data_app)) { }
        delete query_time;
    }
    // -------------------------------------
    int secs = data_app.msg_timeout_counter %60;
    int mins = data_app.msg_timeout_counter /60;
    int hous = data_app.msg_timeout_counter /3600;
    QString s_idle = QString("0" + QString::number(secs)).right(2);
    if (mins>0)  s_idle = QString("0" + QString::number(mins)).right(2) + ":" + s_idle;
    if (hous>0)  s_idle = QString("0" + QString::number(hous)).right(2) + ":" + s_idle;
    ui->lab_idle->setText(s_idle);
    // -------------------------------------

    // обновим кнопку выбранной раскладки
    long long lay = (long long)GetKeyboardLayout(GetCurrentThreadId());
    if (lay == 68748313) {      //Russian
        ui->bn_layout->setText("Руc");
        QPalette pal = ui->bn_layout->palette();
        pal.setColor(QPalette::Button,QColor(0,255,0,255));
        ui->bn_layout->setPalette(pal);
    } else if(lay == 67699721) {  //English
        ui->bn_layout->setText("Eng");
        QPalette pal = ui->bn_layout->palette();
        pal.setColor(QPalette::Button,QColor(128,128,255,255));
        ui->bn_layout->setPalette(pal);
    } else if(lay == 69338146) {  //Ukrainian
        ui->bn_layout->setText("Укр");
        QPalette pal = ui->bn_layout->palette();
        pal.setColor(QPalette::Button,QColor(255,0,0,255));
        ui->bn_layout->setPalette(pal);
    } else { //unknown language
        ui->bn_layout->setText("???");
        QPalette pal = ui->bn_layout->palette();
        pal.setColor(QPalette::Button,QColor(200,200,200,255));
        ui->bn_layout->setPalette(pal);
    }

    db.transaction();
    QString sql = "";
    // закроем сообщения, прочитанные более часа назад непрочитанные сообщения
    sql += "update msg m "
           "   set status=1 "
           " where m.id_getter=" + QString::number(data_app.id_operator) +
            "   AND (CURRENT_TIMESTAMP-m.dt_get)>(interval '5 minutes') "
           // "   AND (CURRENT_TIMESTAMP-m.dt_get)>(interval '10 seconds') "
           "   AND m.status=0 ; ";
    // прочитаем непрочитанные сообщения
    sql += "select o.oper_fio, m.message, m.status, m.id "
           " from msg m "
           "      left join operators o on(o.id=m.id_sender) "
           " where m.id=(select min(mm.id) "
                        "  from msg mm "
                        " where mm.id_getter=" + QString::number(data_app.id_operator) +
                        "   AND mm.status=0 ) "
           " limit 1 ; ";
    this->msg_f = false;

    QSqlQuery *query = new QSqlQuery(db);
    if (!mySQL.exec(this, sql, "Фоновая проверка сообщений MSG", *query, true, db, data_app)) {
        db.rollback();
        QMessageBox::critical(this, "Непредвиденная ошибка",
                              "При фоновой проверке сообщений MSG произошла неожиданная ошибка.\n\n"
                              "Сообщение не передано.");
        delete query;
        return;
    }
    if (query->next()) {
        this->id_msg = query->value(3).toInt();
        this->msg = query->value(1).toString();
        this->msg_dt = QDateTime::currentDateTime();
        ui->lab_msg->setText(" " + this->msg);
        this->msg_f = true;

        // пометим, что это сообщение уже получено
        QString sql2 = "update msg m "
                       "   set dt_get=CURRENT_TIMESTAMP "
                       " where m.id=" + QString::number(this->id_msg) + " "
                       "   AND dt_get is NULL ";
        QSqlQuery *query2 = new QSqlQuery(db);
        if (!mySQL.exec(this, sql2, "Фоновая отметка прочитанного сообщения MSG", *query2, true, db, data_app)) {
            db.rollback();
            QMessageBox::critical(this, "Непредвиденная ошибка",
                                  "При отметке прочитанного сообщения произошла неожиданная ошибка.\n\n"
                                  "Отметка не сделана.");
            delete query2;
            return;
        }
    } else {        
        /*QFont font = ui->bn_msg->font();
        font.setBold(false);
        ui->bn_msg->setFont(font);*/

        //QPalette pal = ui->bn_msg->palette();
        //pal.setColor(QPalette::Button, this->msg_bn_color);
        //ui->bn_msg->setPalette(pal);
        ui->bn_msg->setIcon(QIcon(":/letter0.jpg"));

        this->id_msg = -1;
        this->msg.clear();
        ui->lab_msg->clear();
        this->msg_f = false;
        this->msg_a = false;
    }
    delete query;
    db.commit();

    // активная индикация
    if (!ui->lab_msg->text().isEmpty()) {
        //ui->lab_msg->setText(ui->lab_msg->text() + " +");
        this->msg_a = !this->msg_a;

        /*QFont font = ui->bn_msg->font();
        font.setBold(this->msg_a);
        ui->bn_msg->setFont(font);*/

        //QPalette pal = ui->bn_msg->palette();
        //pal.setColor(QPalette::Button, (this->msg_a ? QColor(255,0,0) : QColor(0,255,255))); //this->msg_lt_color : this->msg_bn_color));
        //ui->bn_msg->setPalette(pal);
        ui->bn_msg->setIcon(this->msg_a ? QIcon(":/letter1.jpg") : QIcon(":/letter2.jpg"));

        QPalette pal2 = ui->lab_msg->palette();
        pal2.setColor(QPalette::WindowText, (this->msg_a ? QColor(200,0,0) : QColor(0,0,200)));
        ui->lab_msg->setPalette(pal2);
        //ui->bn_msg->setText("Я тут!");

    }

    // добавим отметку об активности программы
    int n = data_app.msg_timeout_counter - data_app.id_operator;
    if ( n>0 && n%500==0 ) {
        data_app.msg_timeout_counter = 0;
        QString sql_time = "insert into operators_timeline(id_operator, oper_date, oper_time, state) "
                           "values (" + QString::number(data_app.id_operator) + ", CURRENT_DATE, CURRENT_TIME, 1) ; ";
        QSqlQuery *query_time = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_time, "Фоновая отметка TIMELINE 1", *query_time, true, db, data_app)) {
        }
        delete query_time;
    }
}

// переключение раскладки клавиатуры
void persons_wnd::on_bn_layout_clicked() {
    int lay0 = (long long)ActivateKeyboardLayout(HKL(1), 0x00000008);
    long long lay = (long long)GetKeyboardLayout(GetCurrentThreadId());
    if (lay == 68748313) {      //Russian
        ui->bn_layout->setText("Руc");
        QPalette pal = ui->bn_layout->palette();
        pal.setColor(QPalette::Button,QColor(0,255,0,255));
        ui->bn_layout->setPalette(pal);
    } else if(lay == 67699721) {  //English
        ui->bn_layout->setText("Eng");
        QPalette pal = ui->bn_layout->palette();
        pal.setColor(QPalette::Button,QColor(128,128,255,255));
        ui->bn_layout->setPalette(pal);
    } else if(lay == 69338146) {  //Ukrainian
        ui->bn_layout->setText("Укр");
        QPalette pal = ui->bn_layout->palette();
        pal.setColor(QPalette::Button,QColor(255,0,0,255));
        ui->bn_layout->setPalette(pal);
    } else { //unknown language
        ui->bn_layout->setText("???");
        QPalette pal = ui->bn_layout->palette();
        pal.setColor(QPalette::Button,QColor(200,200,200,255));
        ui->bn_layout->setPalette(pal);
    }
}

void persons_wnd::b_need_save(bool f) {
    ui->pan_pers_save->setVisible(f);
    ui->bn_pers_save->setVisible(true);
    ui->bn_pers_save->setEnabled(true);
    ui->ch_p040->setVisible(true);
}

void persons_wnd::on_ln_pers_pan_fam_textChanged(const QString &arg1) {
    data_pers.fam = arg1;
    ui->lab_pers_pan_fio->setText(ui->ln_pers_pan_fam->text() + " " + ui->ln_pers_pan_im->text() + " " + ui->ln_pers_pan_ot->text() );
    b_need_save(true);
}
void persons_wnd::on_ln_pers_pan_im_textChanged(const QString &arg1) {
    data_pers.im = arg1;
    ui->lab_pers_pan_fio->setText(ui->ln_pers_pan_fam->text() + " " + ui->ln_pers_pan_im->text() + " " + ui->ln_pers_pan_ot->text() );
    b_need_save(true);
}
void persons_wnd::on_ln_pers_pan_ot_textChanged(const QString &arg1) {
    data_pers.ot = arg1;
    ui->lab_pers_pan_fio->setText(ui->ln_pers_pan_fam->text() + " " + ui->ln_pers_pan_im->text() + " " + ui->ln_pers_pan_ot->text() );
    b_need_save(true);
}
void persons_wnd::on_date_pers_pan_birth_dateChanged(const QDate &date) {
    data_pers.date_birth = date;
    ui->lab_pers_pan_fio->setText(ui->ln_pers_pan_fam->text() + " " + ui->ln_pers_pan_im->text() + " " + ui->ln_pers_pan_ot->text() );
    b_need_save(true);
}
void persons_wnd::on_ch_pers_pan_ot_clicked(bool checked) {
    if (!checked) data_pers.ot = "";
    ui->lab_pers_pan_fio->setText(ui->ln_pers_pan_fam->text() + " " + ui->ln_pers_pan_im->text() + " " + ui->ln_pers_pan_ot->text() );
    ui->ch_dost_ot->setChecked(checked);
    data_pers.dost = QString(checked ? "_" : "1") + data_pers.dost.right(5);
    ui->lab_pers_pan_dost->setText(data_pers.dost);
    b_need_save(true);
}
void persons_wnd::on_combo_pers_pan_sex_currentIndexChanged(int index) {
    data_pers.sex = index;
    ui->lab_pers_pan_fio->setText(ui->ln_pers_pan_fam->text() + " " + ui->ln_pers_pan_im->text() + " " + ui->ln_pers_pan_ot->text() );
    b_need_save(true);
}
void persons_wnd::on_line_pers_pan_snils_textChanged(const QString &arg1) {
    data_pers.snils = arg1;
    ui->lab_pers_pan_fio->setText(ui->ln_pers_pan_fam->text() + " " + ui->ln_pers_pan_im->text() + " " + ui->ln_pers_pan_ot->text() );
    b_need_save(true);
}
void persons_wnd::on_ch_pers_pan_snils_clicked(bool checked) {
    if (!checked) data_pers.snils = "";
    ui->lab_pers_pan_fio->setText(ui->ln_pers_pan_fam->text() + " " + ui->ln_pers_pan_im->text() + " " + ui->ln_pers_pan_ot->text() );
    b_need_save(true);
}


void persons_wnd::on_pan_rep_clicked(bool checked) {
    if (!checked) data_pers.rep_fio = "";
    ui->lab_pers_pan_fio_rep->setText(ui->line_pers_pan_rep->text() );
    b_need_save(true);
}
void persons_wnd::on_combo_pers_pan_rep_rel_activated(int index) {
    data_pers.rep_relation = ui->combo_pers_pan_rep_rel->currentIndex();
    ui->lab_pers_pan_fio_rep->setText(ui->line_pers_pan_rep->text() );
    b_need_save();
}
void persons_wnd::on_date_pers_pan_death_dateChanged(const QDate &date) {
    data_pers.date_death = date;
}
void persons_wnd::on_ch_pers_pan_death_clicked(bool checked) {
    if (!checked) data_pers.date_death = QDate(1990,1,1);
    b_need_save(true);
}
void persons_wnd::on_ln_pers_pan_plc_birth_textChanged(const QString &arg1) {
    data_pers.plc_birth = arg1;
}
void persons_wnd::on_date_pers_pan_reg_dateChanged(const QDate &date) {
    data_pers.reg_date = date;
}
void persons_wnd::on_ch_pers_pan_reg_clicked(bool checked) {
    if (!checked) {
        data_pers.reg_date = QDate(1900,1,1);
        data_pers.id_reg_addr = -1;
    }
    ui->pan_address_reg->setVisible(checked);
    if ( (ui->ch_person->isChecked() && ui->ch_person_old->isChecked()) ||
         (ui->ch_pers_pan_reg->isChecked() && ui->ch_pers_pan_liv->isChecked()) ) {
        ui->split_main->setStretchFactor(0,0);
        ui->split_main->setStretchFactor(1,2);
        ui->split_main->setStretchFactor(2,1);
    } else {
        ui->split_main->setStretchFactor(0,0);
        ui->split_main->setStretchFactor(1,1);
        ui->split_main->setStretchFactor(2,1);
    }
    on_split_main_splitterMoved(0, 1);
    b_need_save();
}
void persons_wnd::on_ch_pers_pan_liv_clicked(bool checked) {
    if (!checked) data_pers.id_liv_addr = -1;
    ui->pan_address_liv->setVisible(checked);
    if ( (ui->ch_person->isChecked() && ui->ch_person_old->isChecked()) ||
         (ui->ch_pers_pan_reg->isChecked() && ui->ch_pers_pan_liv->isChecked()) ) {
        ui->split_main->setStretchFactor(0,0);
        ui->split_main->setStretchFactor(1,2);
        ui->split_main->setStretchFactor(2,1);
    } else {
        ui->split_main->setStretchFactor(0,0);
        ui->split_main->setStretchFactor(1,1);
        ui->split_main->setStretchFactor(2,1);
    }
    on_split_main_splitterMoved(0, 1);
    b_need_save();
}
void persons_wnd::on_ln_pers_pan_phone_code_textChanged(const QString &arg1) {
    data_pers.phone_code = arg1;
    ui->lab_pers_pan_phones->setText(ui->ln_pers_pan_phone_cell->text());
}

void persons_wnd::on_ln_pers_pan_phone_cell_textChanged(const QString &arg1) {
    // уберём все разделители
    QString txt0 = arg1.trimmed().replace("(","").replace(")","").replace("-","").replace(" ",""), txt = "";

    // перебор цифр
    for (int i=0; i<txt0.size(); ++i) {
        bool jmp = false;
        if (txt.length()>=20)
            break;
        QString c = txt0.mid(i, 1);

        // первая 8-ка
        if (i==0) {
            if (c!="8") {
                txt += "8";
            } else {
                txt += c;
                jmp = true;
                // 1-я цифра потрачена
            }
        }

        // разделители
        switch (txt.length()) {
        case 1:
            txt += " (";
            break;
        case 6:
            txt += ") ";
            break;
        case 11:
            txt += "-";
            break;
        case 14:
            txt += "-";
            break;
        case 17:
            txt += " ";
            break;
        default:
            break;
        }

        if (jmp)
            continue;

        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            txt += c;
        }
    }
    ui->ln_pers_pan_phone_cell->setText(txt);
    ui->ln_pers_pan_phone_cell->setCursorPosition(txt.length());
    data_pers.phone_cell = arg1;
}
void persons_wnd::on_ln_pers_pan_phone_home_textChanged(const QString &arg1) {
    // уберём все разделители
    QString txt0 = arg1.trimmed().replace("(","").replace(")","").replace("-","").replace(" ",""), txt = "";

    // перебор цифр
    for (int i=0; i<txt0.size(); ++i) {
        bool jmp = false;
        if (txt.length()>=20)
            break;
        QString c = txt0.mid(i, 1);

        // первая 8-ка
        if (i==0) {
            if (c!="8") {
                txt += "8";
            } else {
                txt += c;
                jmp = true;
                // 1-я цифра потрачена
            }
        }

        // разделители
        switch (txt.length()) {
        case 1:
            txt += " (";
            break;
        case 6:
            txt += ") ";
            break;
        case 11:
            txt += "-";
            break;
        case 14:
            txt += "-";
            break;
        case 17:
            txt += " ";
            break;
        default:
            break;
        }

        if (jmp)
            continue;

        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            txt += c;
        }
    }
    ui->ln_pers_pan_phone_home->setText(txt);
    ui->ln_pers_pan_phone_home->setCursorPosition(txt.length());
    data_pers.phone_home = arg1;
}
void persons_wnd::on_ln_pers_pan_phone_work_textChanged(const QString &arg1) {
    // уберём все разделители
    QString txt0 = arg1.trimmed().replace("(","").replace(")","").replace("-","").replace(" ",""), txt = "";

    // перебор цифр
    for (int i=0; i<txt0.size(); ++i) {
        bool jmp = false;
        if (txt.length()>=20)
            break;
        QString c = txt0.mid(i, 1);

        // первая 8-ка
        if (i==0) {
            if (c!="8") {
                txt += "8";
            } else {
                txt += c;
                jmp = true;
                // 1-я цифра потрачена
            }
        }

        // разделители
        switch (txt.length()) {
        case 1:
            txt += " (";
            break;
        case 6:
            txt += ") ";
            break;
        case 11:
            txt += "-";
            break;
        case 14:
            txt += "-";
            break;
        case 17:
            txt += " ";
            break;
        default:
            break;
        }

        if (jmp)
            continue;

        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            txt += c;
        }
    }
    ui->ln_pers_pan_phone_work->setText(txt);
    ui->ln_pers_pan_phone_work->setCursorPosition(txt.length());
    data_pers.phone_work = arg1;
}
void persons_wnd::on_ln_pers_pan_email_textChanged(const QString &arg1) {
    data_pers.email = arg1;
    ui->lab_pers_pan_phones->setText(ui->ln_pers_pan_email->text());
}
void persons_wnd::on_combo_polis_post_way_currentIndexChanged(int index) {
    data_pers.polis_post_way = ui->combo_polis_post_way->currentIndex();
    if (data_pers.polis_post_way<0 || data_pers.polis_post_way>5)
        data_pers.polis_post_way = 0;
    b_need_save();
}


void persons_wnd::on_bn_close_clicked() {
    if (ui->bn_pers_pers_pan_back->isVisible() &&
        QMessageBox::warning(this,
                             "Есть несохранённые изменения",
                             "На окне есть несохранённые изменения.\nВы действительно хотите закрыть окно без сохранения несохранённых данных?",
                             QMessageBox::Yes|QMessageBox::Cancel,
                             QMessageBox::Cancel)==QMessageBox::Cancel) {
        return;
    }
    if (QMessageBox::question(this,"Завершение работы", "Закрыть программу?", QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes)==QMessageBox::Yes) {
        if (data_app.id_session>0) {
            // закрытие сессии
            QString sql_close = "update db_sessions "
                                " set status=-1,"
                                "     dt_end=CURRENT_TIMESTAMP "
                                " where id=" + QString::number(data_app.id_session) + " ; ";
            QSqlQuery *query_close = new QSqlQuery(db);
            /*bool res_close =*/ mySQL.exec(this, sql_close, "Закроем сессию", *query_close, true, db, data_app);
        }

        QApplication::closeAllWindows();
        return;
    }
    b_need_save();
}

void persons_wnd::on_act_close_triggered() {
    on_bn_close_clicked();
}

void persons_wnd::on_show_pers_tabl_clicked(bool checked) {
    ui->group_persons_tab->setVisible(checked);
    ui->group_persons_tab->setEnabled(checked);
    ui->show_add_blanks->setEnabled(checked && (!data_app.is_locl));
    ui->show_protokols->setEnabled(checked && (!data_app.is_locl));
}

void persons_wnd::on_show_pers_data_clicked(bool checked) {
    ui->pan_pers_data->setVisible(checked);
    ui->group_person_data->setVisible(checked);
    ui->group_person_data->setEnabled(checked);
    ui->frame_bn_pers->setVisible(checked);
    ui->frame_bn_pers->setEnabled(checked);
}

void persons_wnd::on_show_pers_docs_clicked(bool checked) {
    if (checked && data_pers.id<0) {
        QMessageBox::warning(this,"Запись персоны ещё не создана",
                             "Сначала создайте запись персоны, нажав кнопку [Сохранить] \nв нижней части панели \n"
                             "\"Ввод и редактирование перс. данных застрахованного\"");
        ui->group_person_docs->setChecked(false);
        on_group_person_docs_clicked(false);
        ui->show_pers_docs->setChecked(false);
        on_show_pers_docs_clicked(false);
    } else {
        ui->pan_pers_docs->setVisible(checked);
        ui->group_person_docs->setVisible(checked);
        ui->group_person_docs->setEnabled(checked);
        ui->frame_bn_docs->setVisible(checked);
        ui->frame_bn_docs->setEnabled(checked);
    }
}

void persons_wnd::on_act_font_6_triggered() {
    QFont f = this->font();
    data_app.font_size = 6;
    f.setPointSize(data_app.font_size);
    this->setFont(f);
}

void persons_wnd::on_act_font_8_triggered() {
    QFont f = this->font();
    data_app.font_size = 7;
    f.setPointSize(data_app.font_size);
    this->setFont(f);
}

void persons_wnd::on_act_font_10_triggered() {
    QFont f = this->font();
    data_app.font_size = 8;
    f.setPointSize(data_app.font_size);
    this->setFont(f);
}

void persons_wnd::on_act_font_12_triggered() {
    QFont f = this->font();
    data_app.font_size = 10;
    f.setPointSize(data_app.font_size);
    this->setFont(f);
}

void persons_wnd::on_act_font_15_triggered() {
    QFont f = this->font();
    data_app.font_size = 12;
    f.setPointSize(data_app.font_size);
    this->setFont(f);
}

void persons_wnd::refresh_persons_tab() {
    // если обновление отключено - сразу выйдем
    if (!can_refresh_persons_tab)
        return;

    this->setCursor(Qt::WaitCursor);
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    // отображение переключателей первой колонки
    if (ui->ch_id_note->isChecked()) {
        ui->bn_save_note->setVisible(true);
        ui->bn_delete_note->setVisible(true);
        ui->line_note->setVisible(true);
    } else {
        ui->bn_save_note->setVisible(false);
        ui->bn_delete_note->setVisible(false);
        ui->line_note->setVisible(false);
    }
    ui->bn_save_note->setEnabled(false);
    ui->bn_delete_note->setEnabled(false);
    ui->line_note->setEnabled(false);

    // отображение бегущих строк доп-данных
    ui->ch_pers_dopdata->setEnabled(false);
    ui->ch_pers_dopdata->setChecked(false);
    ui->te_pers_dopdata->setVisible(false);
    ui->te_pers_dopdata->clear();
    if (ui->ch_pers_dopdata->isChecked()) {
        ui->te_pers_dopdata->setText(data_pers.fam + " " + data_pers.im + " " + data_pers.ot + " " + data_pers.date_birth.toString("dd.MM.yyyy") + " ");
    }

    /*QString date;
    QString date2;
    if (ui->ch_pers_date->isChecked()) {
        date = ui->date_pers_date->date().toString("yyyy-MM-dd");
    } else if (ui->ch_pers_day->isChecked()) {
        date = ui->date_pers_day->date().toString("yyyy-MM-dd");
    } else if (ui->ch_pers_dates->isChecked()) {
        date = ui->date_pers_date_from->date().toString("yyyy-MM-dd");
        date2 = ui->date_pers_date_to->date().toString("yyyy-MM-dd");
    } else if (ui->ch_pol_date->isChecked()) {
        date = ui->date_pol_date->date().toString("yyyy-MM-dd");
    } else if (ui->ch_pol_day->isChecked()) {
        date = ui->date_pol_day->date().toString("yyyy-MM-dd");
    } else if (ui->ch_pol_dates->isChecked()) {
        date = ui->date_pol_date_from->date().toString("yyyy-MM-dd");
        date2 = ui->date_pol_date_to->date().toString("yyyy-MM-dd");
    } else {
        date = QDate::currentDate().toString("yyyy-MM-dd");
    }*/

    sql_pers_flds = "select e.id, e.guid, e.note, "
                    "       e.fam, e.im, e.ot, e.sex, e.date_birth, e.date_death, "
                    "       e.snils, e.category, '('||e.category||') '||v13.text as categ_text, e.bomj, e.phone_cell, e.phone_code, e.phone_home, e.phone_work, e.email, "
                    "       o2b.code as oksm_b, o2b.short_name as oksm_b_name, "
                    "       o2c.code as oksm_c, o2c.short_name as oksm_c_name, "
                    "       " + (ui->ch_retro->isChecked() ? " (select * from st_person(e.id,'" + ui->date_retro->date().toString("yyyy-MM-dd") + "')) " : "e.status") + ", "
                    "       e.plc_birth, NULL, "
                    "       case when e.id_addr_reg is NULL then -1 else e.id_addr_reg end as id_addr_reg, "
                    "       case when e.date_reg is NULL then cast('01.01.1900' as date) else e.date_reg end as date_reg, "
                    "       case when e.id_addr_liv is NULL then -1 else e.id_addr_liv end as id_addr_liv, "
                    "       rep_id, rep_fio, rep_relation, dost, "
                    "       q_pb.cnt as cnt_blanks, in_p.cnt as cnt_errors, "
                    "       po.id as id_old, old_fam, old_im, old_ot, old_date_birth, old_plc_birth, old_enp, old_snils, old_sex, po.dt_ins as old_dt_ins, po.dt_upd as old_dt_upd, "
                    "       asg.code_mo, asg.code_mp, asg.code_ms, asg.snils_mt, asg.assig_type, asg.assig_date, asg.status, "
                    "       NULL, pol.pol_v, pol.f_polis, pol.vs_num, pol.enp, e._id_first_point, points.point_regnum, points.point_name, e._id_first_operator, operators.oper_fio, pol.date_get2hand, "
                    "       " + (ui->ch_retro->isChecked() ? " (select * from id_person_udl(e.id,cast('" + ui->date_retro->date().toString("yyyy-MM-dd") + "' as date) )) " : "e.id_udl  ") + ", "
                    "       " + (ui->ch_retro->isChecked() ? " (select * from id_person_drp(e.id,cast('" + ui->date_retro->date().toString("yyyy-MM-dd") + "' as date) )) " : "e.id_drp  ") + ", "
                    "       " + (ui->ch_retro->isChecked() ? " (select * from id_person_pol(e.id,cast('" + ui->date_retro->date().toString("yyyy-MM-dd") + "' as date) )) " : "e.id_polis") + ", "
                    "       la._id_asg as id_assig, "
                    "       fld.folder_name, e._date_insure_begin, e._date_insure_end, e.polis_post_way, "
                    "       pol.tfoms_date, pol.date_sms_pol, "
                    "       talks.type_talk, "
                    "       talks.date_talk as talk_date, "
                    "       talks.result as talk_result, "
                    "       e.dt_ins, "
                    "       a_reg.fias_aoid, a_reg.fias_houseid, a_liv.fias_aoid, a_liv.fias_houseid, e.addr_reg_text, e.addr_liv_text ";

    sql_pers_from = " from persons e "
                    "      left join link_persons_asg la on(la.id_person=e.id) "
                    "      left join folders fld on(fld.id=e.id_folder) "
                    "      left join spr_oksm o2b on(e.oksm_birth=o2b.code) "
                    "      left join spr_oksm o2c on(e.oksm_c=o2c.code) "
                    "      left join spr_v013 v13 on(e.category=v13.code) "
                    "      left join persons_old po on(po.id_person=e.id) "
                    "      left join addresses a_reg on(a_reg.id=e.id_addr_reg) "
                    "      left join addresses a_liv on(a_liv.id=e.id_addr_liv) "
             // действующее прикрепление
                    "      left join persons_assig asg on(asg.id=la._id_asg) "
             // действующий полис
                    "      left join polises pol    on(pol.id   =" + (ui->ch_retro->isChecked() ? " (select * from id_person_pol(e.id,cast('" + ui->date_retro->date().toString("yyyy-MM-dd") + "' as date) )) " : "e.id_polis") + ") "
                    "      left join polises pol_p  on(pol_p.id =" + (ui->ch_retro->isChecked() ? " (select * from id_person_pol(e.id,cast('" + ui->date_retro->date().toString("yyyy-MM-dd") + "' as date) )) " : "e.id_polis") + "  AND pol_p.pol_v=3) "
                    "      left join polises pol_vs on(pol_vs.id=" + (ui->ch_retro->isChecked() ? " (select * from id_person_pol(e.id,cast('" + ui->date_retro->date().toString("yyyy-MM-dd") + "' as date) )) " : "e.id_polis") + " AND pol_vs.pol_v=2) "
                    "      left join points on(points.id=coalesce(e._id_first_point, pol._id_first_point)) "
                    "      left join operators on(operators.id=coalesce(e._id_first_operator, pol._id_first_operator)) "
                    "      left join talks on(talks.id=e._id_talk) "
                    "      left join ( select id_polis, count(*) as cnt from frecs_in_p in_p where in_p.status in (/*0,*/1) group by id_polis ) in_p on(in_p.id_polis=e.id_polis) "
             // не выданные бланки
                    "      left join ( "
                    "        select count(*) as cnt, id_person "
                    "        from blanks_pol pb "
                    "        where pb.status=0 "
                    "        group by id_person "
                    "      ) q_pb on (e.id=q_pb.id_person) ";

    if (ui->bn_finder->isChecked()) {
        sql_pers_from += " join persons_find pf on(pf.id_person=e.id AND pf.find_flag=1) ";
    }

    sql_pers_from += " WHERE ";

    if ( ui->ch_trash->isChecked()  && ui->ch_archive->isChecked() ) {
        sql_pers_from += " 1=1 ";
    } else
    if ( ui->ch_archive->isChecked() ) {
        sql_pers_from += " " + ( ui->ch_retro->isChecked() ? (" (select * from st_person(e.id,'" + ui->date_retro->date().toString("yyyy-MM-dd") + "')) ") : "e.status") + ">-666 ";
    } else
    if ( ui->ch_trash->isChecked() ) {
        sql_pers_from += " " + ( ui->ch_retro->isChecked() ? (" (select * from st_person(e.id,'" + ui->date_retro->date().toString("yyyy-MM-dd") + "')) ") : "e.status") + " not between -665 AND -100 ";
    } else {
        sql_pers_from += " " + ( ui->ch_retro->isChecked() ? (" (select * from st_person(e.id,'" + ui->date_retro->date().toString("yyyy-MM-dd") + "')) ") : "e.status") + ">-100 ";
    }

    if ( ui->ch_retro->isChecked()            ||
         ui->ch_pers_fam->isChecked()         ||
         ui->ch_pers_im->isChecked()          ||
         ui->ch_pers_ot->isChecked()          ||
         ui->ch_pers_sex->isChecked()         ||
         ui->ch_pers_birth->isChecked()       ||
         ui->ch_pers_snils->isChecked()       ||
         ui->ch_pers_enp->isChecked()         ||
         ui->ch_pers_vs->isChecked()          ||
         ui->ch_pers_vs_2->isChecked()        ||
         ui->ch_pers_old_vs->isChecked()      ||
         ui->ch_pers_polis->isChecked()       ||
         ui->ch_pers_polis_2->isChecked()     ||
         ui->ch_pers_actNget->isChecked()     ||
         ui->ch_pers_blanks->isChecked()      ||
         ui->ch_pers_errors->isChecked()      ||
         //ui->ch_pers_assig->isChecked()     ||
         ui->ch_pers_assig_2->isChecked()     ||
         ui->ch_pers_assig_mo->isChecked()    ||
         ui->ch_pers_assig_mt->isChecked()    ||
         ui->ch_pers_assig_ter->isChecked()   ||
         ui->ch_pers_assig_ter_2->isChecked() ||
         ui->ch_pers_assig_errors->isChecked()||
         ui->ch_pers_addr_reg->isChecked()    ||
         ui->ch_pers_addr_reg_2->isChecked()  ||
         ui->ch_pol_end->isChecked()          ||
         ui->ch_pers_date->isChecked()        ||
         ui->ch_pers_day->isChecked()         ||
         ui->ch_pers_month->isChecked()       ||
         ui->ch_pers_year->isChecked()        ||
         ui->ch_pers_dates->isChecked()       ||
         ui->ch_pol_date->isChecked()         ||
         ui->ch_pol_day->isChecked()          ||
         ui->ch_pol_month->isChecked()        ||
         ui->ch_pol_year->isChecked()         ||
         ui->ch_pol_dates->isChecked()        ||
         ui->ch_insure_date->isChecked()      ||
         ui->ch_insure_day->isChecked()       ||
         ui->ch_insure_month->isChecked()     ||
         ui->ch_insure_year->isChecked()      ||
         ui->ch_insure_dates->isChecked()     ||
         ui->ch_pers_point->isChecked()       ||
         ui->ch_pers_operator->isChecked()    ||
         ui->ch_pers_category->isChecked()    ||
         ui->ch_pers_status_f->isChecked()    ||
         ui->ch_pers_tfoms_ok->isChecked()    ||
         ui->ch_pers_tfoms_no->isChecked()    ||
         ui->ch_folder->isChecked()      ) {

        bool f = false;
        if (ui->ch_retro->isChecked()) {
            sql_pers_from +=" AND  e.dt_ins<='" + ui->date_retro->date().toString("yyyy-MM-dd") + " 23:59:59.999' ";
            f = true;
        }
        if (ui->ch_pers_fam->isChecked() && !ui->line_pers_fam->text().isEmpty()) {
            sql_pers_from +=" AND (e.fam like('" + ui->line_pers_fam->text().replace("'","").trimmed().simplified().toUpper() + "%') or e.fam_norm like('" + ui->line_pers_fam->text().replace("'","").trimmed().simplified().toUpper() + "%')) ";
            f = true;
        }
        if (ui->ch_pers_im->isChecked() && !ui->line_pers_im->text().isEmpty()) {
            sql_pers_from +=" AND  (e.im like('" + ui->line_pers_im->text().replace("'","").trimmed().simplified().toUpper() + "%') or e.im_norm like('" + ui->line_pers_im->text().replace("'","").trimmed().simplified().toUpper() + "%')) ";
            f = true;
        }
        if (ui->ch_pers_ot->isChecked() && !ui->line_pers_ot->text().isEmpty()) {
            sql_pers_from +=" AND  (e.ot like('" + ui->line_pers_ot->text().replace("'","").trimmed().simplified().toUpper() + "%') or e.ot_norm like('" + ui->line_pers_ot->text().replace("'","").trimmed().simplified().toUpper() + "%')) ";
            f = true;
        }
        if (ui->ch_pers_sex->isChecked()) {
            sql_pers_from +=" AND  e.sex=" + QString::number(ui->combo_pers_sex->currentIndex()) + " ";
            f = true;
        }
        if (ui->ch_pers_birth->isChecked()) {
            sql_pers_from +=" AND  (e.date_birth>='" + ui->date_pers_birth->date().toString("yyyy-MM-dd") + "' AND e.date_birth<='" + ui->date_pers_birth_2->date().toString("yyyy-MM-dd") + "') ";
            f = true;
        }
        if (ui->ch_pers_snils->isChecked() && !ui->line_pers_snils->text().isEmpty()) {
            sql_pers_from +=" AND  e.snils like('" + ui->line_pers_snils->text().replace("'","") + "%') ";
            f = true;
        }
        if (ui->ch_pers_enp->isChecked() && !ui->line_pers_enp->text().isEmpty()) {
            sql_pers_from +=" AND  pol.enp like('" + ui->line_pers_enp->text().replace("'","") + "%') ";
            f = true;
        }
        if (ui->ch_pers_vs->isChecked() && !ui->line_pers_vs->text().isEmpty()) {
            if (ui->ch_pers_vs_2->isChecked()) {
                // диапазон ВС
                sql_pers_from +=" AND  (pol.vs_num>=" + ui->line_pers_vs->text().replace("'","") + " AND pol.vs_num<=" + ui->line_pers_vs_2->text().replace("'","") + ") ";
                f = true;
            } else {
                // один номер ВС
                sql_pers_from +=" AND  RIGHT('00'||pol.vs_num, 9) like('" + ui->line_pers_vs->text().replace("'","") + "%') ";
                f = true;
            }
        }
        if (ui->ch_pers_polis->isChecked()) {
            sql_pers_from +=" AND  (" + (ui->ch_retro->isChecked() ? " (select * from st_person(e.id,'" + ui->date_retro->date().toString("yyyy-MM-dd") + "')) " : "e.status") + " in(1,2,3,4,11,12,13,14)) ";
            f = true;
        }
        if (ui->ch_pers_polis_2->isChecked()) {
            sql_pers_from +=" AND  (" + (ui->ch_retro->isChecked() ? " (select * from st_person(e.id,'" + ui->date_retro->date().toString("yyyy-MM-dd") + "')) " : "e.status") + " not in(1,2,3,4,11,12,13,14)) ";
            f = true;
        }
        /*if (ui->ch_pers_assig->isChecked()) {
            sql_pers_from +=" AND  asg.id is not NULL ";
            f = true;
        }*/
        if (ui->ch_pers_assig_2->isChecked()) {
            sql_pers_from +=" AND  asg.id is NULL ";
            f = true;
        }
        if (ui->ch_pers_assig_mo->isChecked()) {
            sql_pers_from +=" AND  asg.code_mo='" + QString::number(ui->spin_pers_assig_mo->value()) + "' ";
            f = true;
        }
        if (ui->ch_pers_assig_mt->isChecked()) {
            sql_pers_from +=" AND  asg.snils_mt='" + ui->line_pers_assig_snils_mt->text() + "' ";
            f = true;
        }
        if (ui->ch_pers_assig_ter->isChecked()) {
            sql_pers_from +=" AND  (asg.snils_mt is not NULL AND CHAR_LENGTH(asg.snils_mt)>10 ) ";
            f = true;
        }
        if (ui->ch_pers_assig_ter_2->isChecked()) {
            sql_pers_from +=" AND  (asg.snils_mt is NULL or CHAR_LENGTH(asg.snils_mt)<10 ) ";
            f = true;
        }
        if (ui->ch_pers_assig_errors->isChecked()) {
            sql_pers_from +=" AND  (asg.status is not NULL AND asg.status<0) ";
            f = true;
        }
        if (ui->ch_pers_addr_reg->isChecked()) {
            sql_pers_from +=" AND  e.id_addr_reg is not NULL ";
            f = true;
        }
        if (ui->ch_pers_old_vs->isChecked()) {
            sql_pers_from +=" AND  pol.pol_v=2 AND pol.date_end<" + QString(ui->ch_retro->isChecked() ? QString("'" + ui->date_retro->date().toString("yyyy-MM-dd") + "'") : "CURRENT_DATE") + " ";
            f = true;
        }
        if (ui->ch_pers_blanks->isChecked()) {
            sql_pers_from +=" AND  q_pb.cnt>0 ";
            f = true;
        }
        if (ui->ch_pers_errors->isChecked()) {
            sql_pers_from +=" AND  in_p.cnt>0 ";
            f = true;
        }
        if (ui->ch_pers_actNget->isChecked()) {
            sql_pers_from +=" AND  pol.pol_v=3 AND pol.date_activate is not NULL AND pol.date_activate<=CURRENT_DATE AND pol.date_get2hand is NULL ";
            f = true;
        }
        if (ui->ch_pers_addr_reg_2->isChecked()) {
            sql_pers_from +=" AND  e.id_addr_reg is NULL ";
            f = true;
        }
        if (ui->ch_pol_end->isChecked()) {
            sql_pers_from +=" AND  pol.date_end<'" + ui->date_pol_end->date().toString("yyyy-MM-dd") + "' ";
            f = true;
        }

        if (ui->ch_pers_date->isChecked()) {
            sql_pers_from +=" AND  e.dt_ins<='" + ui->date_pers_date->date().toString("yyyy-MM-dd") + " 23:59:59' ";
            f = true;
        }
        if (ui->ch_pers_year->isChecked()) {
            sql_pers_from +=" AND  (e.dt_ins>='" + ui->combo_pers_year->currentData().toDate().toString("yyyy-MM-dd") + "' AND e.dt_ins<'" + ui->combo_pers_year->currentData().toDate().addYears(1).toString("yyyy-MM-dd") + "') ";
            f = true;
        }
        if (ui->ch_pers_month->isChecked()) {
            sql_pers_from +=" AND  (e.dt_ins>='" + ui->combo_pers_month->currentData().toDate().toString("yyyy-MM-dd") + "' AND e.dt_ins<'" + ui->combo_pers_month->currentData().toDate().addMonths(1).toString("yyyy-MM-dd") + "') ";
            f = true;
        }
        if (ui->ch_pers_day->isChecked()) {
            sql_pers_from +=" AND  e.dt_ins>='" + ui->date_pers_day->date().toString("yyyy-MM-dd") + " 0:0:0' AND e.dt_ins<='" + ui->date_pers_day->date().toString("yyyy-MM-dd") + " 23:59:59' ";
            f = true;
        }
        if (ui->ch_pers_dates->isChecked()) {
            sql_pers_from +=" AND  e.dt_ins>='" + ui->date_pers_date_from->date().toString("yyyy-MM-dd") + " 0:0:0' AND e.dt_ins<='" + ui->date_pers_date_to->date().toString("yyyy-MM-dd") + " 23:59:59' ";
            f = true;
        }

        if (ui->ch_pol_date->isChecked()) {
            sql_pers_from +=" AND  pol.dt_ins<='" + ui->date_pol_date->date().toString("yyyy-MM-dd") + " 23:59:59' ";
            f = true;
        }
        if (ui->ch_pol_year->isChecked()) {
            sql_pers_from +=" AND  (pol.dt_ins>='" + ui->combo_pol_year->currentData().toDate().toString("yyyy-MM-dd") + "' AND pol.dt_ins<'" + ui->combo_pol_year->currentData().toDate().addYears(1).toString("yyyy-MM-dd") + "') ";
            f = true;
        }
        if (ui->ch_pol_month->isChecked()) {
            sql_pers_from +=" AND  (pol.dt_ins>='" + ui->combo_pol_month->currentData().toDate().toString("yyyy-MM-dd") + "' AND pol.dt_ins<'" + ui->combo_pol_month->currentData().toDate().addMonths(1).toString("yyyy-MM-dd") + "') ";
            f = true;
        }
        if (ui->ch_pol_day->isChecked()) {
            sql_pers_from +=" AND  pol.dt_ins>='" + ui->date_pol_day->date().toString("yyyy-MM-dd") + " 0:0:0' AND pol.dt_ins<='" + ui->date_pol_day->date().toString("yyyy-MM-dd") + " 23:59:59' ";
            f = true;
        }
        if (ui->ch_pol_dates->isChecked()) {
            sql_pers_from +=" AND  pol.dt_ins>='" + ui->date_pol_date_from->date().toString("yyyy-MM-dd") + " 0:0:0' AND pol.dt_ins<='" + ui->date_pol_date_to->date().toString("yyyy-MM-dd") + " 23:59:59' ";
            f = true;
        }


        if (ui->ch_insure_date->isChecked()) {
            sql_pers_from +=" AND  pol.date_begin<='" + ui->date_insure_date->date().toString("yyyy-MM-dd") + "' ";
            f = true;
        }
        if (ui->ch_insure_year->isChecked()) {
            sql_pers_from +=" AND  (pol.date_begin>='" + ui->combo_insure_year->currentData().toDate().toString("yyyy-MM-dd") + "' AND pol.date_begin<'" + ui->combo_insure_year->currentData().toDate().addYears(1).toString("yyyy-MM-dd") + "') ";
            f = true;
        }
        if (ui->ch_insure_month->isChecked()) {
            sql_pers_from +=" and  (pol.date_begin>='" + ui->combo_insure_month->currentData().toDate().toString("yyyy-MM-dd") + "' and pol.date_begin<'" + ui->combo_insure_month->currentData().toDate().addMonths(1).toString("yyyy-MM-dd") + "') ";
            f = true;
        }
        if (ui->ch_insure_day->isChecked()) {
            sql_pers_from +=" and  pol.date_begin='" + ui->date_insure_day->date().toString("yyyy-MM-dd") + "' ";
            f = true;
        }
        if (ui->ch_insure_dates->isChecked()) {
            sql_pers_from +=" and  pol.date_begin='" + ui->date_insure_date_from->date().toString("yyyy-MM-dd") + "' and pol.dt_ins<='" + ui->date_insure_date_to->date().toString("yyyy-MM-dd") + "' ";
            f = true;
        }


        // points.point_regnum, points.point_name, pol._id_first_operator, operators.oper_fio
        if (ui->ch_pers_point->isChecked() /*&& ui->combo_pers_point->currentIndex()>0*/) {
            sql_pers_from +=" and  points.point_regnum='" + ui->combo_pers_point->currentData().toString() + "' ";
            f = true;
        }
        if (ui->ch_pers_operator->isChecked() /*&& ui->combo_pers_operator->currentIndex()>0*/) {
            sql_pers_from +=" and  pol._id_first_operator=" + QString::number(ui->combo_pers_operator->currentData().toInt()) + " ";
            f = true;
        }

        if (ui->ch_pers_category->isChecked()) {
            sql_pers_from +=" and  e.category in (" + ui->combo_pers_category->currentData().toString() + ") ";
            f = true;
        }

        if (ui->ch_pers_status_f->isChecked()) {
            if (ui->combo_pers_status_f->currentData().toInt()==-11) {
                sql_pers_from +=" and  " + (ui->ch_retro->isChecked() ? " (select * from st_person(e.id,'" + ui->date_retro->date().toString("yyyy-MM-dd") + "')) " : "e.status") + " in(11,12,13,14) ";
                f = true;
            } else {
                sql_pers_from +=" and  " + (ui->ch_retro->isChecked() ? " (select * from st_person(e.id,'" + ui->date_retro->date().toString("yyyy-MM-dd") + "')) " : "e.status") + "=" + QString::number(ui->combo_pers_status_f->currentData().toInt()) + " ";
                f = true;
            }
        }

        if (ui->ch_pers_tfoms_ok->isChecked()) {
            sql_pers_from +=" and  pol.tfoms_date is not NULL ";
            f = true;
        }
        if (ui->ch_pers_tfoms_no->isChecked()) {
            sql_pers_from +=" and  pol.tfoms_date is NULL ";
            f = true;
        }

        if (ui->ch_folder->isChecked()) {
            sql_pers_from +=" and " + (ui->combo_folder->currentIndex()==0 ? QString(" (e.id_folder is NULL or e.id_folder=0) ") : QString(" e.id_folder=" + QString::number(ui->combo_folder->currentData().toInt())) ) + " ";
            f = true;
        }
    }

    sql_pers_all = sql_pers_flds + sql_pers_from + " order by e.fam, e.im, e.ot, e.date_birth, e.id ";


    // подсчитаем число строк
    sql_pers_cnt = "select count(*) as cnt "
                   " " + sql_pers_from + " ; ";
    QSqlQuery *query_count = new QSqlQuery(db);
    bool res_count = mySQL.exec(this, sql_pers_cnt, QString("Подсчёт числа отображаемых строк персон"), *query_count, true, db, data_app);
    if (!res_count) {
        QMessageBox::warning(this, "Ошибка при подсчёте числа отображаемых строк персон", "При подсчёте числа отображаемых строк персон произошла неожиданная ошибка");
        ui->lab_tab_cnt->setText(" -//- ");
    } else {
        query_count->next();
        QString cnt = query_count->value("cnt").toString();
        ui->lab_tab_cnt->setText(cnt);
    }
    delete query_count;


    // ограничение числа отображаемых строк
    sql_pers_lim = sql_pers_all;
    if (ui->ch_tab_limit->isChecked())
        sql_pers_lim += " LIMIT " + QString::number(ui->spin_tab_limit->value()) + " ";

    model_persons.setQuery(sql_pers_lim,db);
    QString err2 = model_persons.lastError().driverText();

    // подключаем модель из БД
    ui->tab_persons->setModel(&model_persons);

    // обновляем таблицу
    ui->tab_persons->reset();

    // задаём ширину колонок
    ui->tab_persons->setColumnWidth( 0, ui->ch_id_field->isChecked() ?  55 : 2);     // id
    ui->tab_persons->setColumnWidth( 1, ui->ch_id_guid->isChecked()  ? 220 : 2);     // GUID,
    ui->tab_persons->setColumnWidth( 2, ui->ch_id_note->isChecked()  ? 120 : 2);     // note,
    ui->tab_persons->setColumnWidth( 3, 80);     // fam,
    ui->tab_persons->setColumnWidth( 4, 80);     // im,
    ui->tab_persons->setColumnWidth( 5, 80);     // ot,
    ui->tab_persons->setColumnWidth( 6, 35);     // sex,
    ui->tab_persons->setColumnWidth( 7, 80);     // date_birth,
    ui->tab_persons->setColumnWidth( 8, 80);     // date_death,
    ui->tab_persons->setColumnWidth( 9, 80);     // snils,
    ui->tab_persons->setColumnWidth(10,  1);     // category,
    ui->tab_persons->setColumnWidth(11,150);     // categ_text,
    ui->tab_persons->setColumnWidth(12, 50);     // bomj,
    ui->tab_persons->setColumnWidth(13, 85);     // phone_cell,
    ui->tab_persons->setColumnWidth(14,  1);     // phone_code,
    ui->tab_persons->setColumnWidth(15,  1);     // phone_home,
    ui->tab_persons->setColumnWidth(16,  1);     // phone_work,
    ui->tab_persons->setColumnWidth(17,  1);     // email,
    ui->tab_persons->setColumnWidth(18,  1);     // oksm_b,
    ui->tab_persons->setColumnWidth(19, 70);     // oksm_b_name,
    ui->tab_persons->setColumnWidth(20,  1);     // oksm_c,
    ui->tab_persons->setColumnWidth(21, 70);     // oksm_c_name,
    ui->tab_persons->setColumnWidth(22, 82);     // e.status,
    ui->tab_persons->setColumnWidth(23,  1);     // org_id,
    ui->tab_persons->setColumnWidth(24, 85);     // org_name,
    ui->tab_persons->setColumnWidth(25,  1);     // id_addr_reg,
    ui->tab_persons->setColumnWidth(26,  1);     // date_reg,
    ui->tab_persons->setColumnWidth(27,  1);     // id_addr_liv,
    ui->tab_persons->setColumnWidth(28,  1);     // rep_id,
    ui->tab_persons->setColumnWidth(29,  1);     // rep_fio,
    ui->tab_persons->setColumnWidth(30,  1);     // rep_relation,
    ui->tab_persons->setColumnWidth(31,  1);     // dost,
    ui->tab_persons->setColumnWidth(32, 70);     // q_pb.cnt,
    ui->tab_persons->setColumnWidth(33, 70);     // cnt_errors,
    ui->tab_persons->setColumnWidth(34,  1);     // po.id as id_old,
    ui->tab_persons->setColumnWidth(35,  1);     // old_fam,
    ui->tab_persons->setColumnWidth(36,  1);     // old_im,
    ui->tab_persons->setColumnWidth(37,  1);     // old_ot,
    ui->tab_persons->setColumnWidth(38,  1);     // old_date_birth,
    ui->tab_persons->setColumnWidth(39,  1);     // old_plc_birth,
    ui->tab_persons->setColumnWidth(40,  1);     // old_enp,
    ui->tab_persons->setColumnWidth(41,  1);     // old_snils,
    ui->tab_persons->setColumnWidth(42,  1);     // old_sex,
    ui->tab_persons->setColumnWidth(43,  1);     // old_dt_ins,
    ui->tab_persons->setColumnWidth(44,  1);     // old_dt_upd,
    ui->tab_persons->setColumnWidth(45, 80);     // code_mo,
    ui->tab_persons->setColumnWidth(46, 80);     // code_mp,
    ui->tab_persons->setColumnWidth(47, 80);     // code_ms,
    ui->tab_persons->setColumnWidth(48, 80);     // snils_mt,
    ui->tab_persons->setColumnWidth(49, 60);     // assig_type,
    ui->tab_persons->setColumnWidth(50, 70);     // assig_date,
    ui->tab_persons->setColumnWidth(51, 60);     // assig_status,
    ui->tab_persons->setColumnWidth(52,  1);     // q_old_vs.id,
    ui->tab_persons->setColumnWidth(53, 45);     // pol.pol_v
    ui->tab_persons->setColumnWidth(54, 45);     // pol.f_polis
    ui->tab_persons->setColumnWidth(55, 70);     // pol.vs_num
    ui->tab_persons->setColumnWidth(56,110);     // pol.enp
    ui->tab_persons->setColumnWidth(57,  1);     // pol._id_first_point,
    ui->tab_persons->setColumnWidth(58,  1);     // points.point_regnum,
    ui->tab_persons->setColumnWidth(59,150);     // points.point_name,
    ui->tab_persons->setColumnWidth(60,  1);     // pol._id_first_operator,
    ui->tab_persons->setColumnWidth(61, 80);     // operators.oper_fio
    ui->tab_persons->setColumnWidth(62, 70);     // pol.date_get2hand
    ui->tab_persons->setColumnWidth(63, 30);     // e.id_udl
    ui->tab_persons->setColumnWidth(64, 30);     // e.id_drp
    ui->tab_persons->setColumnWidth(65, 30);     // e.id_polis
    ui->tab_persons->setColumnWidth(66, 30);     // e.id_assig
    ui->tab_persons->setColumnWidth(67,120);     // fld.folder_name
    ui->tab_persons->setColumnWidth(68, 85);     // e._date_insure_begin
    ui->tab_persons->setColumnWidth(69, 85);     // e._date_insure_end
    ui->tab_persons->setColumnWidth(70,  1);     // e.polis_post_way

    ui->tab_persons->setColumnWidth(71, 90);     // tfoms_date
    ui->tab_persons->setColumnWidth(72, 90);     // date_sms_pol
    ui->tab_persons->setColumnWidth(73, 80);     // talk_type
    ui->tab_persons->setColumnWidth(74, 75);     // talk_date
    ui->tab_persons->setColumnWidth(75,150);     // talk_result
    ui->tab_persons->setColumnWidth(76,110);     // e.dt_ins
    //
    // правим заголовки
    model_persons.setHeaderData( 0, Qt::Horizontal, ("ID"));
    model_persons.setHeaderData( 1, Qt::Horizontal, ("GUID"));
    model_persons.setHeaderData( 2, Qt::Horizontal, ("заметки\nна полях"));
    model_persons.setHeaderData( 3, Qt::Horizontal, ("фамилия"));
    model_persons.setHeaderData( 4, Qt::Horizontal, ("имя"));
    model_persons.setHeaderData( 5, Qt::Horizontal, ("отчество"));
    model_persons.setHeaderData( 6, Qt::Horizontal, ("пол"));
    model_persons.setHeaderData( 7, Qt::Horizontal, ("дата\nрождения"));
    model_persons.setHeaderData( 8, Qt::Horizontal, ("дата\nсмерти"));
    model_persons.setHeaderData( 9, Qt::Horizontal, ("СНИЛС"));
    model_persons.setHeaderData(11, Qt::Horizontal, ("категория"));
    model_persons.setHeaderData(12, Qt::Horizontal, ("БОМЖ?"));
    model_persons.setHeaderData(13, Qt::Horizontal, ("телефон"));
    model_persons.setHeaderData(17, Qt::Horizontal, ("e-mail"));
    model_persons.setHeaderData(18, Qt::Horizontal, ("ОКСМ\nрожд"));
    model_persons.setHeaderData(19, Qt::Horizontal, ("страна\nрождения"));
    model_persons.setHeaderData(20, Qt::Horizontal, ("ОКСМ\nпрож"));
    model_persons.setHeaderData(21, Qt::Horizontal, ("граждан-\nство"));
    model_persons.setHeaderData(22, Qt::Horizontal, ("статус\nперс."));
    model_persons.setHeaderData(23, Qt::Horizontal, ("ID прдп."));
    model_persons.setHeaderData(24, Qt::Horizontal, ("предприятие"));
    model_persons.setHeaderData(25, Qt::Horizontal, ("ID адр.\nрег."));
    model_persons.setHeaderData(26, Qt::Horizontal, ("дат рег"));
    model_persons.setHeaderData(27, Qt::Horizontal, ("ID адр.\nпрож."));
    model_persons.setHeaderData(28, Qt::Horizontal, ("ID предст."));
    model_persons.setHeaderData(29, Qt::Horizontal, ("ФИО представителя"));
    model_persons.setHeaderData(30, Qt::Horizontal, ("отношение\nпредст."));
    model_persons.setHeaderData(31, Qt::Horizontal, ("DOST"));
    model_persons.setHeaderData(32, Qt::Horizontal, ("не выдано\nбланков"));
    model_persons.setHeaderData(33, Qt::Horizontal, ("ошибок"));
    model_persons.setHeaderData(45, Qt::Horizontal, ("прикреп.\nк ЛПУ"));
    model_persons.setHeaderData(46, Qt::Horizontal, ("прикреп.\nк подразд."));
    model_persons.setHeaderData(47, Qt::Horizontal, ("прикреп.\nк участку"));
    model_persons.setHeaderData(48, Qt::Horizontal, ("прикреп.\nк врачу"));
    model_persons.setHeaderData(49, Qt::Horizontal, ("спос.\nприкреп."));
    model_persons.setHeaderData(50, Qt::Horizontal, ("дата\nприкреп."));
    model_persons.setHeaderData(51, Qt::Horizontal, ("статус\nприкреп."));
    model_persons.setHeaderData(52, Qt::Horizontal, ("ID старого ВС"));
    model_persons.setHeaderData(53, Qt::Horizontal, ("тип \nполиса"));
    model_persons.setHeaderData(54, Qt::Horizontal, ("форма\nполиса"));
    model_persons.setHeaderData(55, Qt::Horizontal, ("№ ВС"));
    model_persons.setHeaderData(56, Qt::Horizontal, ("действ. ЕНП"));
    model_persons.setHeaderData(57, Qt::Horizontal, ("ID ПВП"));    //pol._id_first_point, points.point_regnum, points.point_name, pol._id_first_operator, operators.oper_fio
    model_persons.setHeaderData(58, Qt::Horizontal, ("рег.№ ПВП"));
    model_persons.setHeaderData(59, Qt::Horizontal, ("ПВП"));
    model_persons.setHeaderData(60, Qt::Horizontal, ("ID инсп."));
    model_persons.setHeaderData(61, Qt::Horizontal, ("ФИО\nинспектора"));
    model_persons.setHeaderData(62, Qt::Horizontal, ("выдан\nна руки"));

    model_persons.setHeaderData(67, Qt::Horizontal, ("папка"));
    model_persons.setHeaderData(68, Qt::Horizontal, ("начало\nстрахования"));
    model_persons.setHeaderData(69, Qt::Horizontal, ("конец\nстрахования"));
    model_persons.setHeaderData(70, Qt::Horizontal, ("способ\nдоставки"));
    model_persons.setHeaderData(71, Qt::Horizontal, ("дата заявки\nна бланк ЕНП"));
    model_persons.setHeaderData(72, Qt::Horizontal, ("дата СМС\nо готовн.ЕНП"));
    model_persons.setHeaderData(73, Qt::Horizontal, ("способ\nзвонка/виз"));
    model_persons.setHeaderData(74, Qt::Horizontal, ("дата\nзвонка/виз"));
    model_persons.setHeaderData(75, Qt::Horizontal, ("результат\nзвонка/визита"));
    model_persons.setHeaderData(76, Qt::Horizontal, ("дата/время\nсоздания записи"));

    model_persons.setHeaderData(77, Qt::Horizontal, ("ФИАС рег.\nулица"));
    model_persons.setHeaderData(78, Qt::Horizontal, ("ФИАС рег.\nдом"));
    model_persons.setHeaderData(79, Qt::Horizontal, ("ФИАС прож.\nулица"));
    model_persons.setHeaderData(80, Qt::Horizontal, ("ФИАС прож.\nдом"));

    model_persons.setHeaderData(81, Qt::Horizontal, ("адрес рег.\nтекстом"));
    model_persons.setHeaderData(82, Qt::Horizontal, ("адрес прож.\nтекстом"));
    ui->tab_persons->repaint();

    refresh_polises_tab(-1, -1);
    refresh_events_tab(-1);

    // деактивируем дополнительные компоненты
    ui->lab_pers_status->setEnabled(false);
    ui->ch_pers_status->setEnabled(false);
    ui->combo_pers_status->setCurrentIndex(-1);
    ui->ch_pers_status->setChecked(false);
    ui->ch_insure_begin->setEnabled(false);
    ui->ch_insure_end->setEnabled(false);
    ui->date_insure_begin->setVisible(false);
    ui->date_insure_end->setVisible(false);
    ui->date_insure_begin->setEnabled(false);
    ui->date_insure_end->setEnabled(false);

    QApplication::processEvents();
    this->setCursor(Qt::ArrowCursor);
}


void persons_wnd::refresh_polises_tab(int id_person, int id_polis) {
    this->setCursor(Qt::WaitCursor);
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    QString polises_sql = "select p.id, vs.status, pol.status, p.ocato, p.enp, p.ogrn_smo, p.pol_v as f008_code, f8.text as f008_text, "
                          "       p.pol_type, p.vs_num, p.pol_ser, p.pol_num, p.uec_num, p.date_begin, p.date_end, p.date_stop, "
                          "       p.in_erp, p.order_num, p.order_date, p.f_polis, p.id_person, "
                          "       p._id_first_point, pt1.point_regnum, pt1.point_name, p._id_first_operator, op1.oper_fio, "
                          "       p._id_last_point, pt2.point_regnum, pt2.point_name, p._id_last_operator, op2.oper_fio, "
                          "       pol.id, vs.vs_num, "
                          "       p.dt_ins, p.dt_upd, p.tfoms_date, p.date_sms_pol, p.date_activate, p.date_get2hand, "
                          "       p.tfoms_id, p.tfoms_date, p.r_smo, p.r_polis, "
                          "       q_fi.id_fi, q_fi.file_i_name, q_fi.id_ri, q_fi.date_send as date_send, "
                          "       q_fp.id_fp, q_fp.file_p_name, q_fp.id_rp, q_fp.date_get as date_get_p, "
                          "       q_f1.id_f1, q_f1.file_1_name, q_f1.id_r1, q_f1.date_get as date_get_1, "
                          "       q_fs.id_fs, q_fs.file_s_name, q_fs.id_rs, q_fs.date_get as date_get_s, "
                          "       q_fs.s_reason, q_fs.s_text "
                          "  from polises p "
                          "       left join spr_f008 f8 on(p.pol_v=f8.code) "
                          "       left join blanks_vs vs on(vs.vs_num=p.vs_num) "
                          "       left join blanks_pol pol on(pol.pol_ser=p.pol_ser and pol.pol_num=p.pol_num) "
                          "       left join points pt1 on(pt1.id=p._id_first_point) "
                          "       left join operators op1 on(op1.id=p._id_first_operator) "
                          "       left join points pt2 on(pt2.id=p._id_last_point) "
                          "       left join operators op2 on(op2.id=p._id_last_operator) "
            // найдём I-файл
                          "       left join (select ri.id as id_ri, fi.id as id_fi, fi.file_name as file_i_name, ri.id_polis, fi.date_send "
                          "                   from (select max(ri0.id)as id "
                          "                           from frecs_out_i ri0 "
                          "                          group by ri0.id_polis) q_ri0 "
                          "                   left join frecs_out_i ri on(ri.id=q_ri0.id) "
                          "                  right join files_out_i fi on(fi.id=ri.id_file_i) ) q_fi "
                          "                  on( q_fi.id_polis=p.id ) "
            // найдём P-файл
                          "       left join (select rp.id as id_rp, fp.id as id_fp, fp.file_name as file_p_name, rp.id_polis, fp.date_get "
                          "                   from (select max(rp0.id)as id "
                          "                           from frecs_in_p rp0 "
                          "                          group by rp0.id_polis) q_rp0 "
                          "                   left join frecs_in_p rp on(rp.id=q_rp0.id) "
                          "                  right join files_in_p fp on(fp.id=rp.id_file_p and right(fp.file_name,2)<>'_1') ) q_fp "
                          "                  on( q_fp.id_polis=p.id ) "
            // найдём P_1-файл
                          "       left join (select r1.id as id_r1, f1.id as id_f1, f1.file_name as file_1_name, r1.id_polis, f1.date_get "
                          "                   from (select max(r10.id)as id "
                          "                           from frecs_in_p r10 "
                          "                          group by r10.id_polis) q_r10 "
                          "                   left join frecs_in_p r1 on(r1.id=q_r10.id) "
                          "                  right join files_in_p f1 on(f1.id=r1.id_file_p and right(f1.file_name,2)='_1') ) q_f1 "
                          "                  on( q_f1.id_polis=p.id ) "
            // найдём S-файл
                          "       left join (select rs.id as id_rs, fs.id as id_fs, fs.file_name as file_s_name, rs.id_polis, fs.date_get, rs.s_reason, spr.text as s_text "
                          "                   from (select max(rs0.id)as id "
                          "                           from frecs_in_s rs0 "
                          "                          group by rs0.id_polis) q_rs0 "
                          "                   left join frecs_in_s rs on(rs.id=q_rs0.id) "
                          "                   left join spr_stop_reasons spr on(spr.code=rs.s_reason) "
                          "                  right join files_in_s fs on(fs.id=rs.id_file_s) ) q_fs "
                          "                  on( q_fs.id_polis=p.id ) "

                          " where p.id_person=" + QString::number(id_person);
    if (ui->ch_only_act->isChecked()) {
        polises_sql += " and (p.date_stop is NULL or p.date_stop>'" + QDate::currentDate().toString("yyyy-MM-dd") + "') ";
    }
    polises_sql += " order by p.id desc ; ";

    model_polises.setQuery(polises_sql,db);
    QString err = model_polises.lastError().driverText();

    // подключаем модель из БД
    ui->tab_polises->setModel(&model_polises);

    // обновляем таблицу
    ui->tab_polises->reset();

    // задаём ширину колонок
    ui->tab_polises->setColumnWidth( 0,  2);    // p.id
    ui->tab_polises->setColumnWidth( 1, 30);    // vs.status
    ui->tab_polises->setColumnWidth( 2, 30);    // pol.status
    ui->tab_polises->setColumnWidth( 3, 50);    // p.ocato
    ui->tab_polises->setColumnWidth( 4,115);    // p.enp
    ui->tab_polises->setColumnWidth( 5, 50);    // p.ogrn_smo
    ui->tab_polises->setColumnWidth( 6,  2);    // p.pol_v as f008_code
    ui->tab_polises->setColumnWidth( 7,140);    // f8.text as f008_text
    ui->tab_polises->setColumnWidth( 8,  2);    // p.pol_type
    ui->tab_polises->setColumnWidth( 9, 70);    // p.vs_num
    ui->tab_polises->setColumnWidth(10, 50);    // p.pol_ser
    ui->tab_polises->setColumnWidth(11, 60);    // p.pol_num
    ui->tab_polises->setColumnWidth(12, 50);    // p.uec_num
    ui->tab_polises->setColumnWidth(13, 80);    // p.date_begin
    ui->tab_polises->setColumnWidth(14, 90);    // p.date_end
    ui->tab_polises->setColumnWidth(15, 80);    // p.date_stop
    ui->tab_polises->setColumnWidth(16, 70);    // p.in_erp
    ui->tab_polises->setColumnWidth(17,  2);    // p.order_num
    ui->tab_polises->setColumnWidth(18,  2);    // p.order_date
    ui->tab_polises->setColumnWidth(19, 60);    // p.f_polis
    ui->tab_polises->setColumnWidth(20,  2);    // p.id_person
    ui->tab_polises->setColumnWidth(21,  2);    // p._id_first_point
    ui->tab_polises->setColumnWidth(22,  2);    // pt1.point_regnum,
    ui->tab_polises->setColumnWidth(23,150);    // pt1.point_name,
    ui->tab_polises->setColumnWidth(24,  2);    // p._id_first_operator,
    ui->tab_polises->setColumnWidth(25, 80);    // op1.oper_fio
    ui->tab_polises->setColumnWidth(26,  2);    // p._id_last_point,
    ui->tab_polises->setColumnWidth(27,  2);    // pt2.point_regnum,
    ui->tab_polises->setColumnWidth(28,150);    // pt2.point_name,
    ui->tab_polises->setColumnWidth(29,  2);    // p._id_last_operator,
    ui->tab_polises->setColumnWidth(30, 80);    // op1.oper_fio
    ui->tab_polises->setColumnWidth(31,  2);    // pol.id
    ui->tab_polises->setColumnWidth(32,  2);    // vs_num
    ui->tab_polises->setColumnWidth(33,  2);    // p.dt_ins
    ui->tab_polises->setColumnWidth(34,  2);    // p.dt_upd
    ui->tab_polises->setColumnWidth(35, 85);    // tfoms_date
    ui->tab_polises->setColumnWidth(36, 85);    // date_sms_pol
    ui->tab_polises->setColumnWidth(37, 85);    // date_activate
    ui->tab_polises->setColumnWidth(38, 85);    // date_get2hand

    ui->tab_polises->setColumnWidth(39,  2);    // p.tfoms_id
    ui->tab_polises->setColumnWidth(40, 70);    // p.tfoms_date
    ui->tab_polises->setColumnWidth(41, 10);    // p.r_smo
    ui->tab_polises->setColumnWidth(42, 10);    // p.r_polis,
    ui->tab_polises->setColumnWidth(43,  2);    // q_fi.id_fi
    ui->tab_polises->setColumnWidth(44,110);    // q_fi.file_i_name
    ui->tab_polises->setColumnWidth(45,  2);    // q_fi.id_ri,
    ui->tab_polises->setColumnWidth(46,  2);    // q_fi.date_send
    ui->tab_polises->setColumnWidth(47,  2);    // q_fp.id_f
    ui->tab_polises->setColumnWidth(48,115);    // q_fp.file_p_name
    ui->tab_polises->setColumnWidth(49,  2);    // q_fp.id_rp,
    ui->tab_polises->setColumnWidth(50,  2);    // q_fp.date_get_p
    ui->tab_polises->setColumnWidth(51,  2);    // q_f1.id_f1
    ui->tab_polises->setColumnWidth(52,130);    // q_f1.f1le_1_name
    ui->tab_polises->setColumnWidth(53,  2);    // q_f1.id_r1,
    ui->tab_polises->setColumnWidth(54,  2);    // q_f1.date_get_1
    ui->tab_polises->setColumnWidth(55,  2);    // q_fs.id_fs
    ui->tab_polises->setColumnWidth(56,150);    // q_fs.file_s_name
    ui->tab_polises->setColumnWidth(57,  2);    // q_fs.id_rs
    ui->tab_polises->setColumnWidth(58, 80);    // q_fs.date_get_s
    ui->tab_polises->setColumnWidth(59, 40);    // q_fs.s_reason
    ui->tab_polises->setColumnWidth(60,200);    // q_fs.s_text
    // правим заголовки
    model_polises.setHeaderData( 1, Qt::Horizontal, ("ВС"));
    model_polises.setHeaderData( 2, Qt::Horizontal, ("П"));
    model_polises.setHeaderData( 3, Qt::Horizontal, ("ОКАТО"));
    model_polises.setHeaderData( 4, Qt::Horizontal, ("ЕНП"));
    model_polises.setHeaderData( 5, Qt::Horizontal, ("ОГРН\nСМО"));
    model_polises.setHeaderData( 7, Qt::Horizontal, ("тип полиса"));
    model_polises.setHeaderData( 9, Qt::Horizontal, ("№ ВС"));
    model_polises.setHeaderData(10, Qt::Horizontal, ("серия"));
    model_polises.setHeaderData(11, Qt::Horizontal, ("номер"));
    model_polises.setHeaderData(12, Qt::Horizontal, ("№ УЭК"));
    model_polises.setHeaderData(13, Qt::Horizontal, ("начало\nдействия"));
    model_polises.setHeaderData(14, Qt::Horizontal, ("плановое\nокончание"));
    model_polises.setHeaderData(15, Qt::Horizontal, ("дата\nизъятия"));
    model_polises.setHeaderData(16, Qt::Horizontal, ("активация\nв ЕРП?"));
    model_polises.setHeaderData(17, Qt::Horizontal, ("номер заявки на\nизгот. полиса"));
    model_polises.setHeaderData(18, Qt::Horizontal, ("дата заявки на\nизгот. полиса"));
    model_polises.setHeaderData(19, Qt::Horizontal, ("форма\nвыпуска"));
    model_polises.setHeaderData(23, Qt::Horizontal, ("первый ПВП"));
    model_polises.setHeaderData(25, Qt::Horizontal, ("первый\nинспектор"));
    model_polises.setHeaderData(28, Qt::Horizontal, ("последний ПВП"));
    model_polises.setHeaderData(30, Qt::Horizontal, ("последний\nинспектор"));
    model_polises.setHeaderData(31, Qt::Horizontal, ("ID\nЕНП"));
    model_polises.setHeaderData(32, Qt::Horizontal, ("ID\nВС"));
    model_polises.setHeaderData(35, Qt::Horizontal, ("дата заявки\nна бланк ЕНП"));
    model_polises.setHeaderData(36, Qt::Horizontal, ("дата СМС\nо готовн.ЕНП"));
    model_polises.setHeaderData(37, Qt::Horizontal, ("дата\nактивации"));
    model_polises.setHeaderData(38, Qt::Horizontal, ("выдача\nна руки"));

    model_polises.setHeaderData(43, Qt::Horizontal, ("ID I"));
    model_polises.setHeaderData(44, Qt::Horizontal, ("имя I-файла"));
    model_polises.setHeaderData(45, Qt::Horizontal, ("запись I"));
    model_polises.setHeaderData(46, Qt::Horizontal, ("дата I"));
    model_polises.setHeaderData(47, Qt::Horizontal, ("ID P"));
    model_polises.setHeaderData(48, Qt::Horizontal, ("имя P-файла"));
    model_polises.setHeaderData(49, Qt::Horizontal, ("запись P"));
    model_polises.setHeaderData(50, Qt::Horizontal, ("дата P"));
    model_polises.setHeaderData(51, Qt::Horizontal, ("ID P1"));
    model_polises.setHeaderData(52, Qt::Horizontal, ("имя P1-файла"));
    model_polises.setHeaderData(53, Qt::Horizontal, ("запись P1"));
    model_polises.setHeaderData(54, Qt::Horizontal, ("дата P1"));
    model_polises.setHeaderData(55, Qt::Horizontal, ("ID S"));
    model_polises.setHeaderData(56, Qt::Horizontal, ("имя S-файла"));
    model_polises.setHeaderData(57, Qt::Horizontal, ("запись S"));
    model_polises.setHeaderData(58, Qt::Horizontal, ("дата S"));
    model_polises.setHeaderData(59, Qt::Horizontal, ("код"));
    model_polises.setHeaderData(60, Qt::Horizontal, ("причина закрытия полиса"));

    ui->tab_polises->repaint();

    // выделим полис с заданным ID
    QItemSelectionModel *select_mod = ui->tab_polises->selectionModel();
    for (int n=0; n<model_polises.rowCount(); n++) {
        QModelIndex ind = model_polises.index(n,0);
        int value = model_polises.data(ind).toInt();
        if (value==id_polis) {
            select_mod->select(ind,QItemSelectionModel::Select);
    }   }

    this->setCursor(Qt::ArrowCursor);

    // проверим выделенную строку
    QModelIndexList indexes = ui->tab_polises->selectionModel()->selection().indexes();
    int id = -1;

    if (indexes.size()>0) {
        QModelIndex index = indexes.front();
        id = model_polises.data( model_polises.index(index.row(), 0), Qt::EditRole).toInt();
    }
    refresh_events_tab(id);
}


void persons_wnd::refresh_events_tab(int id_polis) {
    this->setCursor(Qt::WaitCursor);
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    // данные персоны

    QString events_sql = "select a.id_vizit, v.v_date, v.v_method, v.has_petition, v.r_smo, v.r_polis, v.f_polis, f.text as fpolis_text, "
                         "       a.id, a.event_dt, a.event_code, a.event_time, a.status, a.send_sms, a.comment, a.id_polis, "
                         "       v.dt_ins as dt_ins_viz, v.dt_upd as dt_upd_viz, "
                         "       a.dt_ins as dt_ins_act, a.dt_upd as dt_upd_act, "
                         "       v.id_point as id_point_vis, a.id_operator as id_oper_vis, "
                         "       a.id_point as id_point_act, a.id_operator as id_oper_act, "
                         "       v_pt.point_name as viz_point_name, v_op.oper_fio as vis_oper_fio, "
                         "       a_pt.point_name as act_point_name, a_op.oper_fio as act_oper_fio, "
                         "       a.duty_field, a.id_udl, a.id_drp "
                         "  from events a "
                         "       left join vizits v on(v.id=a.id_vizit) "
                         "       left join spr_fpolis f on(f.code=v.f_polis) "
                         "       left join points v_pt on(v_pt.id=v.id_point) "
                         "       left join operators v_op on(v_op.id=v.id_operator) "
                         "       left join points a_pt on(a_pt.id=v.id_point) "
                         "       left join operators a_op on(a_op.id=a.id_operator) "
                         " where a.id_polis=" + QString::number(id_polis) + " "
                         " order by id ; ";

    model_events.setQuery(events_sql,db);
    QString err = model_events.lastError().driverText();

    // подключаем модель из БД
    ui->tab_events->setModel(&model_events);

    // обновляем таблицу
    ui->tab_events->reset();

    // задаём ширину колонок
    ui->tab_events->setColumnWidth( 0,  2);    // a.id_vizit
    ui->tab_events->setColumnWidth( 1, 65);    // v.v_date
    ui->tab_events->setColumnWidth( 2, 45);    // v.v_method
    ui->tab_events->setColumnWidth( 3, 45);    // v.has_petition
    ui->tab_events->setColumnWidth( 4, 60);    // v.r_smo
    ui->tab_events->setColumnWidth( 5, 60);    // v.r_polis
    ui->tab_events->setColumnWidth( 6,  2);    // v.f_polis
    ui->tab_events->setColumnWidth( 7, 90);    // f.fpolis_text
    ui->tab_events->setColumnWidth( 8,  2);    // id
    ui->tab_events->setColumnWidth( 9, 80);    // event_dt
    ui->tab_events->setColumnWidth(10, 50);    // event_code
    ui->tab_events->setColumnWidth(11,  2);    // event_time
    ui->tab_events->setColumnWidth(12, 50);    // status
    ui->tab_events->setColumnWidth(13, 50);    // send_sms
    ui->tab_events->setColumnWidth(14,  2);    // comment
    ui->tab_events->setColumnWidth(15,  2);    // id_polis
    ui->tab_events->setColumnWidth(16,  2);    // v.dt_ins as dt_ins_viz,
    ui->tab_events->setColumnWidth(17,  2);    // v.dt_upd as dt_upd_viz,
    ui->tab_events->setColumnWidth(18,  2);    // a.dt_ins as dt_ins_act,
    ui->tab_events->setColumnWidth(19,  2);    // a.dt_upd as dt_upd_act,
    ui->tab_events->setColumnWidth(20,  2);    // v.id_point as id_point_vis,
    ui->tab_events->setColumnWidth(21,  2);    // a.id_operator as id_oper_vis,
    ui->tab_events->setColumnWidth(22,  2);    // a.id_point as id_point_act,
    ui->tab_events->setColumnWidth(23,  2);    // a.id_operator as id_oper_act,
    ui->tab_events->setColumnWidth(24,  2);    // v_pt.point_name as viz_point_name,
    ui->tab_events->setColumnWidth(25,  2);    // v_op.oper_fio as vis_oper_fio,
    ui->tab_events->setColumnWidth(26,100);    // a_pt.point_name as act_point_name,
    ui->tab_events->setColumnWidth(27,100);    // a_op.oper_fio as act_oper_fio

    // правим заголовки
    model_events.setHeaderData( 1, Qt::Horizontal, ("дата\nвизита"));
    model_events.setHeaderData( 2, Qt::Horizontal, ("способ"));
    model_events.setHeaderData( 3, Qt::Horizontal, ("ходат."));
    model_events.setHeaderData( 4, Qt::Horizontal, ("причина\nвыб.СМО"));
    model_events.setHeaderData( 5, Qt::Horizontal, ("причина\nдубл."));
    model_events.setHeaderData( 7, Qt::Horizontal, ("форма выпуска\nполиса"));
    model_events.setHeaderData( 9, Qt::Horizontal, ("дата\nсобытия"));
    model_events.setHeaderData(10, Qt::Horizontal, ("код\nсобыт."));
    model_events.setHeaderData(11, Qt::Horizontal, ("время"));
    model_events.setHeaderData(12, Qt::Horizontal, ("статус"));
    model_events.setHeaderData(13, Qt::Horizontal, ("СМС?"));
    model_events.setHeaderData(14, Qt::Horizontal, ("комментарий"));
    ui->tab_events->repaint();

    this->setCursor(Qt::ArrowCursor);
}


void persons_wnd::refresh_pers_data() {
    QDate dd_min = QDate(1920,1,1);

    ui->ch_dost->setChecked(false);
    ui->pan_dost->setVisible(false);

    ui->ch_assig_mt_by_medsite->setChecked(false);
    ui->pan_pers_save->setVisible(false);
    ui->lab_prep_fias->setVisible(false);
    ui->lab_test_for->setVisible(false);

    refresh_pers_pan_category();
    refresh_pers_pan_oksm();
    refresh_docs_pan_type();
    refresh_pers_assig_mo();

    refresh_insure_agents();

    if (data_pers.id<0) {

        ui->ln_pers_pan_fam->setText("");
        ui->ln_pers_pan_im->setText("");
        ui->ln_pers_pan_ot->setText("");
        ui->line_pers_pan_snils->setText("");
        ui->ln_pers_pan_plc_birth->setText("");

        ui->ln_pers_pan_fam_old->setText("");
        ui->ln_pers_pan_im_old->setText("");
        ui->ln_pers_pan_ot_old->setText("");
        ui->line_pers_pan_snils_old->setText("");
        ui->line_pers_pan_enp_old->setText("");
        ui->ln_pers_pan_plc_birth_old->setText("");
        ui->combo_pers_pan_sex_old->setCurrentIndex(0);
        ui->date_pers_pan_birth_old->setDate(QDate(1900,1,1));

        ui->pan_rep->setChecked(false);
        ui->line_pers_pan_rep->setText("");
        ui->lab_pers_pan_fio_rep->setText("");
        on_pan_rep_toggled(ui->pan_rep->isChecked());

        ui->ln_pers_pan_phone_code->setText("");
        ui->ln_pers_pan_phone_work->setText("");
        ui->ln_pers_pan_phone_home->setText("");
        ui->ln_pers_pan_phone_cell->setText("");
        ui->ln_pers_pan_email->setText("");
        ui->combo_polis_post_way->setCurrentIndex(0);
        ui->date_pers_pan_birth->setDate(QDate(1900,1,1));
        ui->date_pers_pan_death->setDate(QDate(1900,1,1));
        ui->date_pers_pan_reg->setDate(QDate(1900,1,1));

        ui->spin_pers_pan_category->setValue(0);
        ui->combo_pers_pan_category->setCurrentIndex(0);

        ui->combo_pers_pan_reg_city->setCurrentIndex(0);
        ui->combo_pers_pan_reg_dstr->setCurrentIndex(0);
        ui->combo_pers_pan_reg_nasp->setCurrentIndex(0);
        ui->combo_pers_pan_reg_strt->setCurrentIndex(0);
        ui->combo_pers_pan_reg_subj->setCurrentIndex(0);
        ui->ln_pers_pan_reg_hous->setText("");
        ui->ln_pers_pan_reg_corp->setText("");
        ui->ln_pers_pan_reg_qart->setText("");
        ui->ln_pers_pan_reg_index->setText("");
        ui->ln_pers_pan_reg_text->setText("");

        ui->combo_pers_pan_liv_city->setCurrentIndex(0);
        ui->combo_pers_pan_liv_dstr->setCurrentIndex(0);
        ui->combo_pers_pan_liv_nasp->setCurrentIndex(0);
        ui->combo_pers_pan_liv_strt->setCurrentIndex(0);
        ui->combo_pers_pan_liv_subj->setCurrentIndex(0);
        ui->ln_pers_pan_liv_hous->setText("");
        ui->ln_pers_pan_liv_corp->setText("");
        ui->ln_pers_pan_liv_qart->setText("");
        ui->ln_pers_pan_liv_index->setText("");
        ui->ln_pers_pan_liv_text->setText("");

        ui->combo_pers_pan_sex->setCurrentIndex(0);
        int n = ui->combo_pers_pan_oksm_rname->findData(643);
        ui->combo_pers_pan_oksm_rname->setCurrentIndex(n);
        int m = ui->combo_pers_pan_oksm_cname->findData(643);
        ui->combo_pers_pan_oksm_cname->setCurrentIndex(m);
        ui->spin_pers_pan_oksm_c->setEnabled(true);
        ui->combo_pers_pan_oksm_cname->setEnabled(true);
        ui->ch_stateless->setChecked(false);

        ui->combo_pers_assig_mo->setCurrentIndex(0);
        ui->combo_pers_assig_mp->setCurrentIndex(0);
        ui->combo_pers_assig_ms->setCurrentIndex(0);
        ui->combo_pers_assig_mt->setCurrentIndex(0);
        ui->combo_pers_assig_type->setCurrentIndex(0);
        ui->date_pers_assig_date->setDate(QDate::currentDate());

        // новый человек
        if (filter_pers.has_fam)
            ui->ln_pers_pan_fam->setText(filter_pers.fam);
        if (filter_pers.has_im)
            ui->ln_pers_pan_im->setText(filter_pers.im);
        if (filter_pers.has_ot)
            ui->ln_pers_pan_ot->setText(filter_pers.ot);

        if (filter_pers.has_sex)
            ui->combo_pers_pan_sex->setCurrentIndex(filter_pers.sex);
        if (filter_pers.has_birth)
            ui->date_pers_pan_birth->setDate(filter_pers.date_birth);
        if (filter_pers.has_ot)
            ui->line_pers_pan_snils->setText(filter_pers.snils);

        ui->lab_pers_pan_bomj->setVisible(false);
        ui->lab_pers_pan_dost->setText( "______" );
        ui->ch_dost_fam->setChecked(true);
        ui->ch_dost_im ->setChecked(true);
        ui->ch_dost_ot ->setChecked(true);
        ui->ch_dost_day->setChecked(true);
        ui->ch_dost_mon->setChecked(true);
        ui->ch_dost_year->setChecked(true);
        data_pers.dost = "______";

        ui->ch_pers_pan_death->setChecked(false);
        ui->ch_pers_pan_snils->setChecked(true);
        ui->ch_pers_pan_reg->setChecked(true);
        ui->ch_pers_pan_liv->setChecked(false);
        ui->ch_pers_pan_ot->setChecked(true);

        ui->ch_pers_pan_fam_old->setChecked(false);
        ui->ch_pers_pan_im_old->setChecked(false);
        ui->ch_pers_pan_ot_old->setChecked(false);
        ui->ch_pers_pan_sex_old->setChecked(false);
        ui->ch_pers_pan_date_birth_old->setChecked(false);
        ui->ch_pers_pan_snils_old->setChecked(false);
        ui->ch_pers_pan_plc_birth_old->setChecked(false);

        on_ch_pers_pan_ot_stateChanged(ui->ch_pers_pan_ot->isChecked() ? 2 : 0);
        on_ch_pers_pan_reg_stateChanged(ui->ch_pers_pan_reg->isChecked() ? 2 : 0);
        on_ch_pers_pan_liv_stateChanged(ui->ch_pers_pan_liv->isChecked() ? 2 : 0);
        on_ch_pers_pan_snils_stateChanged(ui->ch_pers_pan_snils->isChecked() ? 2 : 0);
        on_ch_pers_pan_death_stateChanged(ui->ch_pers_pan_death->isChecked() ? 2 : 0);

        refresh_pers_pan_fiass_reg(0,0,0,0,0,"");
        refresh_pers_pan_fiass_liv(0,0,0,0,0,"");
        //ui->ch_pers_pan_reg_hous->setChecked(false);
        //ui->ch_pers_pan_liv_hous->setChecked(false);

    } else {
        // данные человека - из его свойств
        ui->ln_pers_pan_fam->setText(data_pers.fam);
        ui->ln_pers_pan_im->setText(data_pers.im);
        ui->ch_pers_pan_ot->setChecked(!data_pers.ot.trimmed().isEmpty());
        ui->ln_pers_pan_ot->setText(data_pers.ot);
        ui->lab_pers_pan_dost->setText( data_pers.dost );
        ui->ch_dost_fam->setChecked(data_pers.dost.indexOf("2")<0);
        ui->ch_dost_im ->setChecked(data_pers.dost.indexOf("3")<0);
        ui->ch_dost_ot ->setChecked(data_pers.dost.indexOf("1")<0);
        ui->ch_dost_day->setChecked(data_pers.dost.indexOf("4")<0);
        ui->ch_dost_mon->setChecked(data_pers.dost.indexOf("5")<0);
        ui->ch_dost_year->setChecked(data_pers.dost.indexOf("6")<0);

        ui->combo_pers_pan_sex->setCurrentIndex(data_pers.sex);
        ui->date_pers_pan_birth->setDate(data_pers.date_birth);
        ui->ch_pers_pan_snils->setChecked(!data_pers.snils.trimmed().isEmpty());
        ui->line_pers_pan_snils->setText(data_pers.snils);

        ui->pan_rep->setChecked(!data_pers.rep_fio.trimmed().isEmpty());
        ui->line_pers_pan_rep->setText(data_pers.rep_fio);
        ui->lab_pers_pan_fio_rep->setText(ui->line_pers_pan_rep->text() );
        on_pan_rep_toggled(ui->pan_rep->isChecked());

        ui->ch_pers_pan_death->setChecked(data_pers.date_death>dd_min);
        ui->date_pers_pan_death->setDate(data_pers.date_death);

        ui->ln_pers_pan_plc_birth->setText(data_pers.plc_birth);
        ui->spin_pers_pan_category->setValue(data_pers.category);
        ui->combo_pers_pan_category->setCurrentIndex(ui->combo_pers_pan_category->findData(data_pers.category));

        ui->ch_pers_pan_fam_old->setChecked( !(data_pers.fam_old.isEmpty()) );
        ui->ln_pers_pan_fam_old->setText(data_pers.fam_old);
        ui->ch_pers_pan_im_old->setChecked( !(data_pers.im_old.isEmpty()) );
        ui->ln_pers_pan_im_old->setText(data_pers.im_old);
        ui->ch_pers_pan_ot_old->setChecked( !(data_pers.ot_old.isEmpty()) );
        ui->ln_pers_pan_ot_old->setText(data_pers.ot_old);
        ui->ch_pers_pan_sex_old->setChecked(data_pers.sex_old>0 && data_pers.sex_old<3);
        ui->combo_pers_pan_sex_old->setCurrentIndex(data_pers.sex_old);
        ui->ch_pers_pan_date_birth_old->setChecked(data_pers.date_birth_old>QDate(1920,1,1));
        ui->date_pers_pan_birth_old->setDate(data_pers.date_birth_old);
        ui->ch_pers_pan_snils_old->setChecked( !(data_pers.snils_old.isEmpty()) );
        ui->line_pers_pan_snils_old->setText(data_pers.snils_old);
        ui->line_pers_pan_enp_old->setText(data_pers.enp_old);
        ui->ch_pers_pan_plc_birth_old->setChecked( !(data_pers.plc_birth_old.isEmpty()) );
        ui->ln_pers_pan_plc_birth_old->setText(data_pers.plc_birth_old);

        ui->spin_pers_pan_oksm_r->setValue(data_pers.oksm_birth);
        ui->spin_pers_pan_oksm_c->setValue(data_pers.oksm_c);
        ui->spin_pers_pan_oksm_c->setEnabled(data_pers.oksm_c>0);
        ui->combo_pers_pan_oksm_cname->setEnabled(data_pers.oksm_c>0);
        ui->ch_stateless->setChecked(data_pers.oksm_c<=0);

        ui->ch_pers_pan_reg->setChecked(data_pers.id_reg_addr>=0);
        ui->date_pers_pan_reg->setDate (data_pers.reg_date);
        ui->ch_pers_pan_liv->setChecked(data_pers.id_liv_addr>=0);

        ui->ln_pers_pan_phone_code->setText(data_pers.phone_code);
        ui->ln_pers_pan_phone_cell->setText(data_pers.phone_cell);
        ui->ln_pers_pan_phone_home->setText(data_pers.phone_home);
        ui->ln_pers_pan_phone_work->setText(data_pers.phone_work);
        ui->ln_pers_pan_email->setText(data_pers.email);
        ui->combo_polis_post_way->setCurrentIndex(data_pers.polis_post_way);

        ui->lab_pers_pan_bomj->setVisible(!ui->ch_pers_pan_reg->isChecked());

        if (data_pers.assig_code_mo.isEmpty()) {
            ui->combo_pers_assig_mo->setCurrentIndex(0);
        } else {
            ui->combo_pers_assig_mo->setCurrentIndex(ui->combo_pers_assig_mo->findData(data_pers.assig_code_mo));
        }
        refresh_pers_assig_mo();
        refresh_pers_assig_mp();
        refresh_pers_assig_ms();
        refresh_pers_assig_mt();
        if (data_pers.assig_code_mp.isEmpty()) {
            ui->combo_pers_assig_mp->setCurrentIndex(0);
        } else {
            int n = ui->combo_pers_assig_mp->findData(data_pers.assig_code_mp);
            ui->combo_pers_assig_mp->setCurrentIndex(n);
        }
        if (data_pers.assig_code_ms.isEmpty()) {
            ui->combo_pers_assig_ms->setCurrentIndex(0);
        } else {
            ui->combo_pers_assig_ms->setCurrentIndex(ui->combo_pers_assig_ms->findData(data_pers.assig_code_ms));
        }
        if (data_pers.assig_snils_mt.isEmpty()) {
            ui->combo_pers_assig_mt->setCurrentIndex(0);
        } else {
            ui->combo_pers_assig_mt->setCurrentIndex(ui->combo_pers_assig_mt->findData(data_pers.assig_snils_mt));
        }

        if (data_pers.has_fam_old)
              ui->ln_pers_pan_fam_old->setText(data_pers.fam_old);
        else  ui->ln_pers_pan_fam_old->setText("");
        if (data_pers.has_im_old)
            ui->ln_pers_pan_im_old->setText(data_pers.im_old);
        else  ui->ln_pers_pan_im_old->setText("");
        if (data_pers.has_ot_old)
            ui->ln_pers_pan_ot_old->setText(data_pers.ot_old);
        else  ui->ln_pers_pan_ot_old->setText("");
        if (data_pers.has_sex_old)
            ui->combo_pers_pan_sex_old->setCurrentIndex(data_pers.sex_old);
        else  ui->combo_pers_pan_sex_old->setCurrentIndex(0);
        if (data_pers.has_date_birth_old)
            ui->date_pers_pan_birth_old->setDate(data_pers.date_birth_old);
        else  ui->date_pers_pan_birth_old->setDate(QDate(1900,1,1));
        if (data_pers.has_snils_old)
            ui->line_pers_pan_snils_old->setText(data_pers.snils_old);
        else  ui->line_pers_pan_snils_old->setText("");
        if (data_pers.has_enp_old)
            ui->line_pers_pan_enp_old->setText(data_pers.enp_old);
        else  ui->line_pers_pan_enp_old->setText("");
        if (data_pers.has_plc_birth_old)
            ui->ln_pers_pan_plc_birth_old->setText(data_pers.plc_birth_old);
        else  ui->ln_pers_pan_plc_birth_old->setText("");

        on_ch_pers_pan_ot_stateChanged(ui->ch_pers_pan_ot->isChecked() ? 2 : 0);
        on_ch_pers_pan_reg_stateChanged(ui->ch_pers_pan_reg->isChecked() ? 2 : 0);
        on_ch_pers_pan_liv_stateChanged(ui->ch_pers_pan_liv->isChecked() ? 2 : 0);
        on_ch_pers_pan_snils_stateChanged(ui->ch_pers_pan_snils->isChecked() ? 2 : 0);
        on_ch_pers_pan_death_stateChanged(ui->ch_pers_pan_death->isChecked() ? 2 : 0);
        on_pan_rep_toggled(ui->pan_rep->isChecked());

        // адрес регистрации
        this->setCursor(Qt::WaitCursor);
        QSqlQuery *query_reg = new QSqlQuery(db);
        QString sql_reg = "select post_index,ocato,ocato_full, "
                          "       subj, dstr, city, nasp, strt, "
                          "       FIAS_aoid, FIAS_houseid, "
                          "       house, corp, quart "
                          " from addresses "
                          " where id=" + QString::number(data_pers.id_reg_addr) + " ; ";
        bool res_reg = mySQL.exec(this, sql_reg, QString("Адрес регистрации"), *query_reg, true, db, data_app);
        if (!res_reg) {
            delete query_reg;
            this->setCursor(Qt::ArrowCursor);
            QMessageBox::warning(this, "Ошибка при чтении адреса", "При чтении адреса регистрации произошла неожиданная ошибка");
        } else {
            QString reg_post_index = "";
            int reg_subj = 0;
            int reg_dstr = 0;
            int reg_city = 0;
            int reg_nasp = 0;
            int reg_strt = 0;
            QString reg_house = "";
            QString reg_corp = "";
            QString reg_quart = "";
            data_pers.reg_AOID = "";
            data_pers.reg_HOUSEID = "";
            bool f_FIAS = false;

            if (query_reg->next()) {
                reg_post_index = query_reg->value(0).toString();
                reg_subj = query_reg->value(3).toInt();
                reg_dstr = query_reg->value(4).toInt();
                reg_city = query_reg->value(5).toInt();
                reg_nasp = query_reg->value(6).toInt();
                reg_strt = query_reg->value(7).toInt();
                reg_house = QString::number(query_reg->value(10).toInt());
                reg_corp = query_reg->value(11).toString();
                reg_quart = query_reg->value(12).toString();

                data_pers.reg_AOID = query_reg->value(8).toString();
                data_pers.reg_HOUSEID = query_reg->value(9).toString();
                f_FIAS = !query_reg->value(9).isNull();
            }
            delete query_reg;

            refresh_pers_pan_fiass_reg(reg_subj, reg_dstr, reg_city, reg_nasp, reg_strt, data_pers.reg_HOUSEID);
            ui->ln_pers_pan_reg_subj->setText(QString::number(reg_subj));
            ui->ln_pers_pan_reg_dstr->setText(QString::number(reg_dstr));
            ui->ln_pers_pan_reg_city->setText(QString::number(reg_city));
            ui->ln_pers_pan_reg_nasp->setText(QString::number(reg_nasp));
            ui->ln_pers_pan_reg_strt->setText(QString::number(reg_strt));

            //ui->ch_pers_pan_reg_hous->setChecked(data_pers.reg_HOUSEID.isEmpty());
            ui->ln_pers_pan_reg_hous->setText(reg_house);
            ui->ln_pers_pan_reg_corp->setText(reg_corp);
            ui->ln_pers_pan_reg_qart->setText(reg_quart);
            ui->ln_pers_pan_reg_index->setText(reg_post_index);

            this->setCursor(Qt::ArrowCursor);
        }
        ui->ch_pers_pan_reg_text->setChecked(!data_pers.reg_text.isEmpty());
        ui->ln_pers_pan_reg_text->setEnabled(!data_pers.reg_text.isEmpty());
        ui->ln_pers_pan_reg_text->setText(data_pers.reg_text);

        ui->ch_pers_pan_reg->setChecked(res_reg);
        ui->pan_address_reg->setVisible(res_reg);

        // адрес проживания
        this->setCursor(Qt::WaitCursor);
        QSqlQuery *query_liv = new QSqlQuery(db);
        QString sql_liv = "select post_index,ocato,ocato_full, "
                          "       subj, dstr, city, nasp, strt, "
                          "       FIAS_aoid, FIAS_houseid, "
                          "       house, corp, quart "
                          " from addresses "
                          " where id=" + QString::number(data_pers.id_liv_addr) + " ; ";
        bool res_liv = mySQL.exec(this, sql_liv, QString("Адрес проживания"), *query_liv, true, db, data_app);
        if (!res_liv) {
            delete query_liv;
            this->setCursor(Qt::ArrowCursor);
            QMessageBox::warning(this, "Ошибка при чтении адреса", "При чтении адреса проживания произошла неожиданная ошибка");
        } else {
            QString liv_post_index = "";
            int liv_subj = 0;
            int liv_dstr = 0;
            int liv_city = 0;
            int liv_nasp = 0;
            int liv_strt = 0;
            QString liv_house = "";
            QString liv_corp = "";
            QString liv_quart = "";
            data_pers.liv_AOID = "";
            data_pers.liv_HOUSEID = "";
            bool f_FIAS = false;

            if (query_liv->next()) {
                liv_post_index = query_liv->value(0).toString();
                liv_subj = query_liv->value(3).toInt();
                liv_dstr = query_liv->value(4).toInt();
                liv_city = query_liv->value(5).toInt();
                liv_nasp = query_liv->value(6).toInt();
                liv_strt = query_liv->value(7).toInt();
                liv_house = QString::number(query_liv->value(10).toInt());
                liv_corp = query_liv->value(11).toString();
                liv_quart = query_liv->value(12).toString();

                data_pers.liv_AOID = query_liv->value(8).toString();
                data_pers.liv_HOUSEID = query_liv->value(9).toString();
                f_FIAS = !query_liv->value(9).isNull();
            }
            delete query_liv;

            refresh_pers_pan_fiass_liv(liv_subj, liv_dstr, liv_city, liv_nasp, liv_strt, data_pers.liv_HOUSEID);
            ui->ln_pers_pan_liv_subj->setText(QString::number(liv_subj));
            ui->ln_pers_pan_liv_dstr->setText(QString::number(liv_dstr));
            ui->ln_pers_pan_liv_city->setText(QString::number(liv_city));
            ui->ln_pers_pan_liv_nasp->setText(QString::number(liv_nasp));
            ui->ln_pers_pan_liv_strt->setText(QString::number(liv_strt));

            ui->ch_pers_pan_liv_hous->setChecked(data_pers.liv_HOUSEID.isEmpty());
            ui->ln_pers_pan_liv_hous->setText(liv_house);
            ui->ln_pers_pan_liv_corp->setText(liv_corp);
            ui->ln_pers_pan_liv_qart->setText(liv_quart);
            ui->ln_pers_pan_liv_index->setText(liv_post_index);

            this->setCursor(Qt::ArrowCursor);
        }
        ui->ch_pers_pan_liv->setChecked(res_liv);
        ui->pan_address_liv->setVisible(res_liv);

    }
    ui->ch_pers_pan_liv_text->setChecked(!data_pers.liv_text.isEmpty());
    ui->ln_pers_pan_liv_text->setEnabled(!data_pers.liv_text.isEmpty());
    ui->ln_pers_pan_liv_text->setText(data_pers.liv_text);
    //refresh_pers_assig();

    // страховые агенты
    QString sql_agt = "select e.id_insure_agent1, ag1.fio, id_insure_agent2, ag2.fio "
                      "  from persons e "
                      "  left join insure_agents as ag1 on(ag1.id=e.id_insure_agent1) "
                      "  left join insure_agents as ag2 on(ag2.id=e.id_insure_agent2) "
                      " where e.id=" + QString::number(data_pers.id) + " ; ";
    QSqlQuery *query_agt = new QSqlQuery(db);

    if (!mySQL.exec(this, sql_agt, "Получение ID страховых агентв", *query_agt, true, db, data_app))
        QMessageBox::critical(this, "Непредвиденная ошибка", "При получении ID страховых агентов произошла непредвиденная ошибка.\n\nОперация отменена.");
    if (query_agt->next()) {
        data_pers.id_insure_agent1 = query_agt->value(0).toInt();
        data_pers.fio_insure_agent1 = query_agt->value(1).toString();
        data_pers.id_insure_agent2 = query_agt->value(2).toInt();
        data_pers.fio_insure_agent2 = query_agt->value(3).toString();
    } else {
        data_pers.id_insure_agent1 = -1;
        data_pers.fio_insure_agent1 = "";
        data_pers.id_insure_agent2 = -1;
        data_pers.fio_insure_agent2 = "";
    }
    ui->combo_pers_insure_agent1->setCurrentIndex(ui->combo_pers_insure_agent1->findData(data_pers.id_insure_agent1));
    ui->combo_pers_insure_agent2->setCurrentIndex(ui->combo_pers_insure_agent2->findData(data_pers.id_insure_agent2));

    ui->ch_p040->setChecked(true);

    test_for_FIAS(false);
    test_for_UDL(false,false);
    test_for_SNILS(data_pers.snils, data_pers.oksm_c, data_pers.category, data_pers.date_birth);
    test_for_EAES(true);
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_pers_photo() {
    this->setCursor(Qt::WaitCursor);
    QSqlQuery *query_ph = new QSqlQuery(db);
    QString sql_ph = "select bin "
                      " from persons_photo "
                      " where id_person=" + QString::number(data_pers.id) + " and type=2 ; ";
    /*bool res_ph =*/ mySQL.exec(this, sql_ph, QString("Чтение фото"), *query_ph, true, db, data_app);
    if (query_ph->next()) {
        QByteArray jpg;
        jpg = query_ph->value(0).toByteArray();
        // сохраним файл
        QString path_ph = data_app.path_temp + "photo.jpg";
        QFile file_d(path_ph);
        if (file_d.exists()) file_d.remove();
        file_d.close();
        QFile file(path_ph);
        file.open(QIODevice::WriteOnly);
        /*int w_res =*/ file.write(jpg);
        file.close();
        // обновим картинку на форме
        ui->lab_docs_pan_photo->setPixmap(QPixmap(path_ph).scaled(ui->lab_docs_pan_photo->size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));
        ui->lab_docs_pan_photo->show();
    } else if (query_ph->size()<1) {
        ui->lab_docs_pan_photo->hide();
    }
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_pers_sign() {
    this->setCursor(Qt::WaitCursor);
    QSqlQuery *query_sg = new QSqlQuery(db);
    QString sql_sg = "select bin "
                  " from persons_photo "
                  " where id_person=" + QString::number(data_pers.id) + " and type=3 ; ";
    /*bool res_sg =*/ mySQL.exec(this, sql_sg, QString("Чтение подписи"), *query_sg, true, db, data_app);
    if (query_sg->next()) {
        QByteArray jpg;
        jpg = query_sg->value(0).toByteArray();
        // сохраним файл
        QString path_sg = data_app.path_temp + "sign.jpg";
        QFile file_d(path_sg);
        if (file_d.exists()) file_d.remove();
        file_d.close();
        QFile file(path_sg);
        file.open(QIODevice::WriteOnly);
        file.write(jpg);
        file.close();
        // обновим картинку на форме
        ui->lab_docs_pan_sign->setPixmap(QPixmap(path_sg).scaled(ui->lab_docs_pan_sign->size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));
        ui->lab_docs_pan_sign->show();
    } else if (query_sg->size()<1) {
        ui->lab_docs_pan_sign->hide();
    }
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_pers_assig() {
    this->setCursor(Qt::WaitCursor);
    QSqlQuery *query_ph = new QSqlQuery(db);
    QString sql_ph = "select id, code_mo, code_mp, code_ms, snils_mt, assig_type, assig_way, assig_date, unsig_date "
                  " from persons_assig "
                  " where id_person=" + QString::number(data_pers.id) + " and "
                  "    assig_date is not NULL and assig_date<='" + QDate::currentDate().toString("yyyy-MM-dd") + "' and "
                  "    (unsig_date is NULL or unsig_date>'" + QDate::currentDate().toString("yyyy-MM-dd") + "') ; ";
    /*bool res_ph =*/ mySQL.exec(this, sql_ph, QString("Чтение фото"), *query_ph, true, db, data_app);
    if (query_ph->next()) {
        if (query_ph->value(1).isNull()) {
            ui->combo_pers_assig_mo->setCurrentIndex(0);
        } else {
            ui->combo_pers_assig_mo->setCurrentIndex(ui->combo_pers_assig_mo->findData(query_ph->value(1).toString()));
        }
        //refresh_pers_assig_mu();
        //refresh_pers_assig_ms();
        //refresh_pers_assig_mt();
        if (query_ph->value(2).isNull()) {
            ui->combo_pers_assig_mp->setCurrentIndex(0);
        } else {
            int n = ui->combo_pers_assig_mp->findData(query_ph->value(2).toString());
            ui->combo_pers_assig_mp->setCurrentIndex(n);
        }
        if (query_ph->value(3).isNull()) {
            ui->combo_pers_assig_ms->setCurrentIndex(0);
        } else {
            ui->combo_pers_assig_ms->setCurrentIndex(ui->combo_pers_assig_ms->findData(query_ph->value(3).toString()));
        }
        if (query_ph->value(4).isNull()) {
            ui->combo_pers_assig_mt->setCurrentIndex(0);
        } else {
            ui->combo_pers_assig_mt->setCurrentIndex(ui->combo_pers_assig_mt->findData(query_ph->value(4).toString()));
        }
        ui->combo_pers_assig_type->setCurrentIndex(query_ph->value(5).toInt());
        ui->date_pers_assig_date->setDate(query_ph->value(6).toDate());
    } else if (query_ph->size()<1) {
        ui->lab_docs_pan_photo->hide();
    }

    // страховые агенты
    ui->combo_pers_insure_agent1->setCurrentIndex(ui->combo_pers_insure_agent1->findData(data_pers.id_insure_agent1));
    ui->combo_pers_insure_agent2->setCurrentIndex(ui->combo_pers_insure_agent2->findData(data_pers.id_insure_agent2));

    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_pers_eaes() {
    this->setCursor(Qt::WaitCursor);
    QSqlQuery *query_eaes = new QSqlQuery(db);
    QString sql_eaes = "select id, id_person, category, case when category in(11,12,13,14) then category_text else '' end as category_text, residence, residence_exp, status "
                       "  from persons_eaes "
                       " where id_person=" + QString::number(data_pers.id) +
                       "   and status=1"
                       " limit 1 ; ";
    /*bool res_eaes =*/ mySQL.exec(this, sql_eaes, QString("Чтение данных ЕАЭС"), *query_eaes, true, db, data_app);
    if (query_eaes->next()) {
        // запишем данные документа ЕАЭС в поля данных персоны
        data_pers.eaes_category = query_eaes->value(2).isNull() ? -1 : query_eaes->value(2).toInt();
        data_pers.eaes_category_text = query_eaes->value(3).toString();

        data_pers.eaes_residence = query_eaes->value(4).toString();
        data_pers.eaes_residence_exp = query_eaes->value(5).isNull() ? QDate(1900,1,1) : query_eaes->value(5).toDate();

        ui->line_eaes_residence->setText(query_eaes->value(4).toString());

        ui->ch_eaes_reside_exp->setChecked(true);
        ui->date_eaes_reside_exp->setEnabled(true);
        ui->date_eaes_reside_exp->setDate(query_eaes->value(5).toDate());

    } else {
        ui->line_eaes_residence->setText("");

        ui->ch_eaes_reside_exp->setChecked(false);
        ui->date_eaes_reside_exp->setEnabled(false);
        ui->date_eaes_reside_exp->setDate(QDate(1900,1,1));

        data_pers.eaes_category = -1;
        data_pers.eaes_category_text = "";
        data_pers.eaes_residence = "";
        data_pers.eaes_residence_exp = QDate(1900,1,1);
    }
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_folders() {
    this->setCursor(Qt::WaitCursor);
    // обновление списка папок
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select id, folder_name||'  ('||id||')' "
                  " from public.folders "
                  " where date_open<='" + QDate::currentDate().toString("yyyy-MM-dd") + "' " +
                      ( ui->ch_folder_closed->isChecked() ? QString(" and status=0 ") : QString(" and status=1 ") ) +
                  " order by folder_name ; ";
    mySQL.exec(this, sql, QString("Список папок"), *query, true, db, data_app);
    ui->combo_folder->clear();
    ui->combo_folder->addItem(" - без папки - ", 0);
    while (query->next()) {
        ui->combo_folder->addItem(query->value(1).toString(), query->value(0).toInt());
    }
    delete query;
    int n = 0;
    ui->combo_folder->setCurrentIndex(n);
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_pers_years_mons() {
    this->setCursor(Qt::WaitCursor);
    // обновление списка папок
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select min(dt_ins) as date_min, max(dt_ins) as date_max "
                  "  from public.persons ; ";
    mySQL.exec(this, sql, QString("Диапазон дат страхования персон"), *query, true, db, data_app);

    ui->combo_pers_year->clear();
    ui->combo_pers_month->clear();
    ui->combo_pol_year->clear();
    ui->combo_pol_month->clear();
    ui->combo_insure_year->clear();
    ui->combo_insure_month->clear();
    query->next();
    QDate date_min = query->value(0).toDate();
    QDate date_max = query->value(1).toDate();
    for (int i=date_max.year(); i>=date_min.year(); i--){
        // годы
        ui->combo_pers_year->addItem(QString::number(i) + " г.", QDate(i,1,1));
        ui->combo_pol_year->addItem(QString::number(i) + " г.", QDate(i,1,1));
        ui->combo_insure_year->addItem(QString::number(i) + " г.", QDate(i,1,1));

        // месяцы
        if ( (i==date_min.year() && date_min.month()<=12) ||
             (i>date_min.year()  && i<date_max.year() )  ||
             (i==date_max.year() && date_max.month()>=12) ) {
            ui->combo_pers_month->addItem(QString::number(i) + ", декабрь", QDate(i,12,1));
            ui->combo_pol_month->addItem(QString::number(i) + ", декабрь", QDate(i,12,1));
            ui->combo_insure_month->addItem(QString::number(i) + ", декабрь", QDate(i,12,1));
        }
        if ( (i==date_min.year() && date_min.month()<=11) ||
             (i>date_min.year()  && i<date_max.year() )  ||
             (i==date_max.year() && date_max.month()>=11) ) {
            ui->combo_pers_month->addItem(QString::number(i) + ", ноябрь", QDate(i,11,1));
            ui->combo_pol_month->addItem(QString::number(i) + ", ноябрь", QDate(i,11,1));
            ui->combo_insure_month->addItem(QString::number(i) + ", ноябрь", QDate(i,11,1));
        }
        if ( (i==date_min.year() && date_min.month()<=10) ||
             (i>date_min.year()  && i<date_max.year() )  ||
             (i==date_max.year() && date_max.month()>=10) ) {
            ui->combo_pers_month->addItem(QString::number(i) + ", октябрь", QDate(i,10,1));
            ui->combo_pol_month->addItem(QString::number(i) + ", октябрь", QDate(i,10,1));
            ui->combo_insure_month->addItem(QString::number(i) + ", октябрь", QDate(i,10,1));
        }
        if ( (i==date_min.year() && date_min.month()<=9) ||
             (i>date_min.year()  && i<date_max.year() )  ||
             (i==date_max.year() && date_max.month()>=9) ) {
            ui->combo_pers_month->addItem(QString::number(i) + ", сентябрь", QDate(i,9,1));
            ui->combo_pol_month->addItem(QString::number(i) + ", сентябрь", QDate(i,9,1));
            ui->combo_insure_month->addItem(QString::number(i) + ", сентябрь", QDate(i,9,1));
        }
        if ( (i==date_min.year() && date_min.month()<=8) ||
             (i>date_min.year()  && i<date_max.year() )  ||
             (i==date_max.year() && date_max.month()>=8) ) {
            ui->combo_pers_month->addItem(QString::number(i) + ", август", QDate(i,8,1));
            ui->combo_pol_month->addItem(QString::number(i) + ", август", QDate(i,8,1));
            ui->combo_insure_month->addItem(QString::number(i) + ", август", QDate(i,8,1));
        }
        if ( (i==date_min.year() && date_min.month()<=7) ||
             (i>date_min.year()  && i<date_max.year() )  ||
             (i==date_max.year() && date_max.month()>=7) ) {
            ui->combo_pers_month->addItem(QString::number(i) + ", июль", QDate(i,7,1));
            ui->combo_pol_month->addItem(QString::number(i) + ", июль", QDate(i,7,1));
            ui->combo_insure_month->addItem(QString::number(i) + ", июль", QDate(i,7,1));
        }
        if ( (i==date_min.year() && date_min.month()<=6) ||
             (i>date_min.year()  && i<date_max.year() )  ||
             (i==date_max.year() && date_max.month()>=6) ) {
            ui->combo_pers_month->addItem(QString::number(i) + ", июнь", QDate(i,6,1));
            ui->combo_pol_month->addItem(QString::number(i) + ", июнь", QDate(i,6,1));
            ui->combo_insure_month->addItem(QString::number(i) + ", июнь", QDate(i,6,1));
        }
        if ( (i==date_min.year() && date_min.month()<=5) ||
             (i>date_min.year()  && i<date_max.year() )  ||
             (i==date_max.year() && date_max.month()>=5) ) {
            ui->combo_pers_month->addItem(QString::number(i) + ", май", QDate(i,5,1));
            ui->combo_pol_month->addItem(QString::number(i) + ", май", QDate(i,5,1));
            ui->combo_insure_month->addItem(QString::number(i) + ", май", QDate(i,5,1));
        }
        if ( (i==date_min.year() && date_min.month()<=4) ||
             (i>date_min.year()  && i<date_max.year() )  ||
             (i==date_max.year() && date_max.month()>=4) ) {
            ui->combo_pers_month->addItem(QString::number(i) + ", апрель", QDate(i,4,1));
            ui->combo_pol_month->addItem(QString::number(i) + ", апрель", QDate(i,4,1));
            ui->combo_insure_month->addItem(QString::number(i) + ", апрель", QDate(i,4,1));
        }
        if ( (i==date_min.year() && date_min.month()<=3) ||
             (i>date_min.year()  && i<date_max.year() )  ||
             (i==date_max.year() && date_max.month()>=3) ) {
            ui->combo_pers_month->addItem(QString::number(i) + ", март", QDate(i,3,1));
            ui->combo_pol_month->addItem(QString::number(i) + ", март", QDate(i,3,1));
            ui->combo_insure_month->addItem(QString::number(i) + ", март", QDate(i,3,1));
        }
        if ( (i==date_min.year() && date_min.month()<=2) ||
             (i>date_min.year()  && i<date_max.year() )  ||
             (i==date_max.year() && date_max.month()>=2) ) {
            ui->combo_pers_month->addItem(QString::number(i) + ", февраль", QDate(i,2,1));
            ui->combo_pol_month->addItem(QString::number(i) + ", февраль", QDate(i,2,1));
            ui->combo_insure_month->addItem(QString::number(i) + ", февраль", QDate(i,2,1));
        }
        if ( (i==date_min.year() && date_min.month()<=1) ||
             (i>date_min.year()  && i<date_max.year() )  ||
             (i==date_max.year() && date_max.month()>=1) ) {
            ui->combo_pers_month->addItem(QString::number(i) + ", январь", QDate(i,1,1));
            ui->combo_pol_month->addItem(QString::number(i) + ", январь", QDate(i,1,1));
            ui->combo_insure_month->addItem(QString::number(i) + ", январь", QDate(i,1,1));
        }
    }

    while (query->next()) {
        ui->combo_folder->addItem(query->value(1).toString(), query->value(0).toInt());
    }
    delete query;
    int n = 0;
    ui->combo_folder->setCurrentIndex(n);
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_pers_pan_oksm() {
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающих списков стран
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select code, short_name "
                  " from public.spr_oksm s "
                  " order by short_name ; ";
    mySQL.exec(this, sql, QString("Справочник ОКСМ"), *query, true, db, data_app);
    ui->combo_pers_pan_oksm_rname->clear();
    ui->combo_pers_pan_oksm_cname->clear();
    while (query->next()) {
        ui->combo_pers_pan_oksm_rname->addItem(query->value(1).toString(), query->value(0).toInt());
        ui->combo_pers_pan_oksm_cname->addItem(query->value(1).toString(), query->value(0).toInt());
    }
    int n = ui->combo_pers_pan_oksm_rname->findData(643);
    ui->combo_pers_pan_oksm_rname->setCurrentIndex(n);
    int m = ui->combo_pers_pan_oksm_cname->findData(643);
    ui->combo_pers_pan_oksm_cname->setCurrentIndex(m);
    ui->ch_stateless->setChecked(false);
    ui->spin_pers_pan_oksm_r->setValue(data_pers.oksm_birth);
    ui->spin_pers_pan_oksm_c->setValue(data_pers.oksm_c);
    ui->ch_stateless->setChecked(data_pers.oksm_c<=0);
    delete query;
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_pers_pan_category() {
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающего списка категорий застрахованных
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select code, '(' || code || ') ' || text "
                  " from public.spr_v013 s "
                  " order by code ; ";
    mySQL.exec(this, sql, QString("Справочник категорий застрахованных"), *query, true, db, data_app);
    ui->combo_pers_pan_category->clear();
    ui->combo_pers_pan_category->addItem(" - выберите категорию - ", -1);
    while (query->next()) {
        ui->combo_pers_pan_category->addItem(query->value(1).toString(), query->value(0).toInt());
    }
    ui->combo_pers_pan_category->setCurrentIndex(0);
    delete query;
    this->setCursor(Qt::ArrowCursor);

    // документы можно вводить только при выданной категории
    int index = ui->combo_pers_pan_category->currentIndex();
    ui->pan_docs_tab->setEnabled(index>0);
    // если категория не выбрана - фото вводить нельзя
    ui->pan_docs_photo->setEnabled(false);
}

void persons_wnd::refresh_pers_assig_mo() {
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающего списка медорганизаций
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select code_mo, '(' || code_mo || ') ' || name_mo "
                  " from public.spr_medorgs s "
                  " where is_head=1 "
                  " order by code_mo ; ";
    mySQL.exec(this, sql, QString("Справочник медорганизаций"), *query, true, db, data_app);
    ui->combo_pers_assig_mo->clear();
    ui->combo_pers_assig_mo->addItem(" - ??? - ", "0");
    while (query->next()) {
        ui->combo_pers_assig_mo->addItem(query->value(1).toString(), query->value(0).toString());
    }
    delete query;

    int index = ui->combo_pers_assig_mo->findData(data_pers.assig_code_mo);
    ui->combo_pers_assig_mo->setCurrentIndex(index);
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_pers_assig_mp() {
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающего списка подразделений МО
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select code_mp, '(' || code_mp || ') ' || name_mp "
                  " from public.spr_medparts s "
                  " where code_mo='" + ui->combo_pers_assig_mo->currentData().toString() + "' "
                  " order by code_mp ; ";
    mySQL.exec(this, sql, QString("Справочник подразделений МО"), *query, true, db, data_app);
    ui->combo_pers_assig_mp->clear();
    ui->combo_pers_assig_mp->addItem(" - ??? - ", "0");
    while (query->next()) {
        ui->combo_pers_assig_mp->addItem(query->value(1).toString(), query->value(0).toString());
    }
    delete query;

    int index = ui->combo_pers_assig_mp->findData(data_pers.assig_code_mp);
    ui->combo_pers_assig_mp->setCurrentIndex(index);
    if (ui->combo_pers_assig_mp->currentIndex()<0)
        ui->combo_pers_assig_mp->setCurrentIndex(0);
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_pers_assig_ms() {
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающего списка мед.участков
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select code_ms, '(' || code_ms || ') ' || t.text "
                  " from public.spr_medsites s "
                  " left join spr_medsites_types t on(t.code=s.type_ms) "
                  " where code_mo='" + ui->combo_pers_assig_mo->currentData().toString() + "' "
                  " order by code_ms ; ";
    mySQL.exec(this, sql, QString("Справочник мед.участков"), *query, true, db, data_app);
    ui->combo_pers_assig_ms->clear();
    ui->combo_pers_assig_ms->addItem(" - ??? - ", "0");
    while (query->next()) {
        QString name_ms = query->value(1).toString();
        QString code_ms = query->value(0).toString();
        ui->combo_pers_assig_ms->addItem(name_ms, code_ms);
    }
    /*if (ui->combo_pers_assig_ms->findData(0)<0) {
        ui->combo_pers_assig_ms->addItem(" - ??? - ", "0");
    }*/
    delete query;

    int index = ui->combo_pers_assig_ms->findData(data_pers.assig_code_ms);
    ui->combo_pers_assig_ms->setCurrentIndex(index);
    if (ui->combo_pers_assig_ms->currentIndex()<0)
        ui->combo_pers_assig_ms->setCurrentIndex(0);
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_pers_assig_mt() {
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающего списка врачей
    QSqlQuery *query = new QSqlQuery(db);
    QString sql;
    if (ui->ch_assig_mt_by_medsite->isChecked()) {
        sql = "select t.snils_mt, COALESCE(t.fio_mt,' - ') || ' (' || t.snils_mt || '),   '||COALESCE(s.text,' - ')"
              "  from public.spr_medters t "
              "  left join spr_medters_spec s on(s.code=t.spec_mt) "
              "       join spr_ms_r_mt r on( r.id_mt=t.id "
                                       " and r.date_beg<=CURRENT_DATE "
                                       " and (r.date_end is NULL or r.date_end>CURRENT_DATE) ) "
              "       join spr_medsites ms on(ms.id=r.id_ms) "
              " where t.code_mo='" + ui->combo_pers_assig_mo->currentData().toString() + "' "
              "   and ms.code_mo='" + ui->combo_pers_assig_mo->currentData().toString() + "' "
              "   and (ms.code_mp='" + ui->combo_pers_assig_mp->currentData().toString() + "' or '0'='" + ui->combo_pers_assig_mp->currentData().toString() + "') "
              "   and ms.code_ms='" + ui->combo_pers_assig_ms->currentData().toString() + "' "
              " order by fio_mt ; ";
    } else {
        sql = "select t.snils_mt, COALESCE(t.fio_mt,' - ') || ' (' || t.snils_mt || '),   '||COALESCE(s.text,' - ')"
              "  from public.spr_medters t "
              "       left join spr_medters_spec s on(s.code=t.spec_mt) "
              " where code_mo='" + ui->combo_pers_assig_mo->currentData().toString() + "' "
              " order by fio_mt ; ";
    }
    mySQL.exec(this, sql, QString("Справочник врачей"), *query, true, db, data_app);
    ui->combo_pers_assig_mt->clear();
    //ui->combo_pers_assig_mt->addItem(" - ??? - ", "0");
    while (query->next()) {
        ui->combo_pers_assig_mt->addItem(query->value(1).toString().simplified(), query->value(0).toString().simplified());
    }
    delete query;

    int index = ui->combo_pers_assig_mt->findData(data_pers.assig_snils_mt);
    ui->combo_pers_assig_mt->setCurrentIndex(index);
    if (ui->combo_pers_assig_mt->currentIndex()<0)
        ui->combo_pers_assig_mt->setCurrentIndex(0);
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_docs_pan_type() {
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающего списка типов документов
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select code, '('||code||') '||text, mask_ser, mask_num "
                  " from public.spr_f011 s "
                  " order by code ; ";
    mySQL.exec(this, sql, QString("Справочник типов документов"), *query, true, db, data_app);
    ui->combo_docs_pan_type->clear();
    ui->combo_docs_pan_type->addItem(" - выберите тип документа - ", 0);
    doc_ser_mask.clear();
    doc_num_mask.clear();
    doc_ser_mask.append("");
    doc_num_mask.append("");
    while (query->next()) {
        doc_ser_mask.append(query->value(2).toString());
        doc_num_mask.append(query->value(3).toString());
        ui->combo_docs_pan_type->addItem(query->value(1).toString(), query->value(0).toInt());
    }
    data_doc.mask_num = doc_num_mask.at(0);
    data_doc.mask_ser = doc_ser_mask.at(0);
    ui->combo_docs_pan_type->setCurrentIndex(0);
    delete query;
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_insure_agents() {
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающего списка страховых агентов
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select id, fio, level "
                  " from insure_agents "
                  " order by fio ; ";
    mySQL.exec(this, sql, QString("Справочник страховых агентов"), *query, true, db, data_app);
    ui->combo_pers_insure_agent1->clear();
    ui->combo_pers_insure_agent2->clear();
    while (query->next()) {
        int level = query->value(2).toInt();
        switch (level) {
        case 1:
            ui->combo_pers_insure_agent1->addItem(query->value(1).toString(), query->value(0).toInt());
            break;
        default:
            ui->combo_pers_insure_agent2->addItem(query->value(1).toString(), query->value(0).toInt());
            break;
        }
    }
    ui->combo_pers_insure_agent2->setCurrentIndex(0);
    ui->combo_pers_insure_agent1->setCurrentIndex(0);
    delete query;
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_combo_docs_pan_type_activated(int index) {
    ui->spin_docs_pan_type->setValue(ui->combo_docs_pan_type->currentData().toInt());
    data_doc.doc_type = ui->combo_docs_pan_type->currentData().toInt();
    data_doc.mask_num = doc_num_mask.at(index);
    data_doc.mask_ser = doc_ser_mask.at(index);
    ui->lab_docs_pan_mask->setText(data_doc.mask_ser + " № " + data_doc.mask_num);
    // для временного убежища серия фиксированная - "ВУ"
    if (ui->combo_docs_pan_type->currentData().toInt()==25) {
        ui->line_docs_pan_ser->setText("ВУ");
        ui->line_docs_pan_ser->setEnabled(false);
    } else {
        ui->line_docs_pan_ser->setEnabled(true);
    }
}


// КЛАДР места регистрации
void persons_wnd::refresh_pers_pan_fiass_reg(int subj, int dstr, int city, int nasp, int strt, QString houseid) {
    // проверим доступность базы ФИАС
    QString sql_test = "select count_recs from fias.load_files limit 1 ; ";
    QSqlQuery *query_test = new QSqlQuery(db_FIAS);
    bool res_test = query_test->exec(sql_test);
    query_test->next();
    int cnt = query_test->value(0).toInt();

    if (!res_test) {
        delete query_test;
        bool f_ok = false;
        while (!f_ok) {
            if (QMessageBox::warning(this, "Нет доступа к базе ФИАС!",
                                     "Внимание! \nНет доступа к базе ФИАС. При этом невозможен ввод и редактирование адресной информации.\n\n"
                                     "Попробуйте обновить подключение к базе ФИАС нажатем на кнопку [Retry]\n\nЕсли подключение не удалось - перезапустите программу.",
                                     QMessageBox::Retry|QMessageBox::Cancel, QMessageBox::Retry)==QMessageBox::Retry) {
                f_ok = refresh_fias_connection();
            } else {
                f_ok = false;
                break;
            }
        }
        if (!f_ok) {
            // нет доступа к ФИАС - отмена операции
            return;
        }
    } else {
        delete query_test;
    }

    ui->group_persons_tab->setEnabled(false);
    ui->group_person_data->setEnabled(false);
    ui->group_person_docs->setEnabled(false);

    ui->pan_pers_save->setVisible(false);
    ui->lab_prep_fias->setText("Обновление ФИАС (регистр.)");
    ui->lab_prep_fias->setVisible(true);
    ui->lab_test_for->setVisible(false);
    QApplication::processEvents();

    this->setCursor(Qt::WaitCursor);

    QString regioncode = subj>=0 ? QString("00" + QString::number(subj)).right(2)
                                : QString("00" + QString::number(ui->combo_pers_pan_reg_subj->currentData().toInt())).right(2);
    subj = regioncode.toInt();
    QString areacode   = dstr>=0 ? QString("000" + QString::number(dstr)).right(3)
                                : QString("000" + QString::number(ui->combo_pers_pan_reg_dstr->currentData().toInt())).right(3);
    dstr = areacode.toInt();
    QString citycode   = city>=0 ? QString("000" + QString::number(city)).right(3)
                                : QString("000" + QString::number(ui->combo_pers_pan_reg_city->currentData().toInt())).right(3);
    city = citycode.toInt();
    QString placecode  = nasp>=0 ? QString("000" + QString::number(nasp)).right(3)
                                : QString("000" + QString::number(ui->combo_pers_pan_reg_nasp->currentData().toInt())).right(3);
    nasp = placecode.toInt();
    QString streetcode = strt>=0 ? QString("0000" + QString::number(strt)).right(4)
                                : QString("0000" + QString::number(ui->combo_pers_pan_reg_strt->currentData().toInt())).right(4);
    strt = streetcode.toInt();

    // регион регистрации
    if (subj>=0) {
        // обновление выпадающего списка регионов
        QPalette pal = ui->lab_pers_pan_reg_subj->palette();
        pal.setColor(QPalette::Text, QColor(0,0,255));
        ui->lab_pers_pan_reg_subj->setPalette(pal);
        QFont font = ui->lab_pers_pan_reg_subj->font();
        font.setBold(true);
        ui->lab_pers_pan_reg_subj->setFont(font);
        QApplication::processEvents();

        okato_reg_subj.clear();
        okato_reg_subj.append("");
        kladr_reg_subj.clear();
        kladr_reg_subj.append("");
        index_reg_subj.clear();
        index_reg_subj.append("");
        index_reg_subj.clear();
        index_reg_subj.append("");
        fguid_reg_subj.clear();
        fguid_reg_subj.append("");
        fiass_reg_subj.clear();
        fiass_reg_subj.append("");
        ui->combo_pers_pan_reg_subj->clear();
        ui->combo_pers_pan_reg_subj->addItem(" - нет - ", " -//- ");

        QSqlQuery *query = new QSqlQuery(db);
        sql_subj_reg= "select s.subj, formalname||' '||shortname as name, RIGHT('00000000000'||TRIM(okato),11) as okato, code, trim(postalcode) as post_index, aoguid, aoid "
                      "  from fias.subj s "
                      " where s.aolevel=1 "
                      "   and actstatus=1 "
                      " order by s.formalname ; ";
        query->exec( sql_subj_reg );
        while (query->next()) {
            okato_reg_subj.append(query->value(2).toString());
            kladr_reg_subj.append(query->value(3).toString());
            index_reg_subj.append(query->value(4).toString());
            fguid_reg_subj.append(query->value(5).toString());
            fiass_reg_subj.append(query->value(6).toString());
            ui->combo_pers_pan_reg_subj->addItem(query->value(1).toString(), query->value(0).toInt());
        }
        delete query;
        // зададим текущее значение
        if (subj>0) ui->combo_pers_pan_reg_subj->setCurrentIndex(ui->combo_pers_pan_reg_subj->findData(subj));
        else        ui->combo_pers_pan_reg_subj->setCurrentIndex(0);

        pal = ui->lab_pers_pan_reg_subj->palette();
        pal.setColor(QPalette::Text, QColor(0,0,0));
        ui->lab_pers_pan_reg_subj->setPalette(pal);
        font = ui->lab_pers_pan_reg_subj->font();
        font.setBold(false);
        ui->lab_pers_pan_reg_subj->setFont(font);
        QApplication::processEvents();
    }
    if (ui->combo_pers_pan_reg_subj->currentIndex()<0)
        ui->combo_pers_pan_reg_subj->setCurrentIndex(0);

    //район регистрации
    if (dstr>=0) {
        // обновление выпадающего списка районов
        QPalette pal = ui->lab_pers_pan_reg_dstr->palette();
        pal.setColor(QPalette::Text, QColor(0,0,255));
        ui->lab_pers_pan_reg_dstr->setPalette(pal);
        QFont font = ui->lab_pers_pan_reg_dstr->font();
        font.setBold(true);
        ui->lab_pers_pan_reg_dstr->setFont(font);
        QApplication::processEvents();

        okato_reg_dstr.clear();
        okato_reg_dstr.append("");
        kladr_reg_dstr.clear();
        kladr_reg_dstr.append("");
        index_reg_dstr.clear();
        index_reg_dstr.append("");
        fguid_reg_dstr.clear();
        fguid_reg_dstr.append("");
        fiass_reg_dstr.clear();
        fiass_reg_dstr.append("");
        ui->combo_pers_pan_reg_dstr->clear();
        ui->combo_pers_pan_reg_dstr->addItem(" - нет - ", " -//- ");

        if (subj!=0) {
            QSqlQuery *query = new QSqlQuery(db);
            sql_dstr_reg= "select s.dstr, formalname||' '||shortname as name, RIGHT('00000000000'||TRIM(okato),11) as okato, code, trim(postalcode) as post_index, aoguid, aoid "
                          "  from fias.dstr s "
                          " where s.subj=" + QString::number(subj) + " "
                          "   and s.aolevel=3 "
                          "   and actstatus=1 "
                          " order by s.formalname ; ";
            query->exec( sql_dstr_reg );
            while (query->next()) {
                okato_reg_dstr.append(query->value(2).toString());
                kladr_reg_dstr.append(query->value(3).toString());
                index_reg_dstr.append(query->value(4).toString());
                fguid_reg_dstr.append(query->value(5).toString());
                fiass_reg_dstr.append(query->value(6).toString());
                ui->combo_pers_pan_reg_dstr->addItem(query->value(1).toString(), query->value(0).toInt());
            }
            delete query;
        }
        // зададим текущее значение
        if (dstr>0) ui->combo_pers_pan_reg_dstr->setCurrentIndex(ui->combo_pers_pan_reg_dstr->findData(dstr));
        else        ui->combo_pers_pan_reg_dstr->setCurrentIndex(0);

        pal = ui->lab_pers_pan_reg_dstr->palette();
        pal.setColor(QPalette::Text, QColor(0,0,0));
        ui->lab_pers_pan_reg_dstr->setPalette(pal);
        font = ui->lab_pers_pan_reg_dstr->font();
        font.setBold(false);
        ui->lab_pers_pan_reg_dstr->setFont(font);
        QApplication::processEvents();
    }
    if (ui->combo_pers_pan_reg_dstr->currentIndex()<0)
        ui->combo_pers_pan_reg_dstr->setCurrentIndex(0);

    // город регистрации
    if (city>=0) {
        QPalette pal = ui->lab_pers_pan_reg_city->palette();
        pal.setColor(QPalette::Text, QColor(0,0,255));
        ui->lab_pers_pan_reg_city->setPalette(pal);
        QFont font = ui->lab_pers_pan_reg_city->font();
        font.setBold(true);
        ui->lab_pers_pan_reg_city->setFont(font);
        QApplication::processEvents();

        okato_reg_city.clear();
        okato_reg_city.append("");
        kladr_reg_city.clear();
        kladr_reg_city.append("");
        index_reg_city.clear();
        index_reg_city.append("");
        fguid_reg_city.clear();
        fguid_reg_city.append("");
        fiass_reg_city.clear();
        fiass_reg_city.append("");
        ui->combo_pers_pan_reg_city->clear();
        ui->combo_pers_pan_reg_city->addItem(" - нет - ", " -//- ");

        if (subj!=0) {
            // обновление выпадающего списка городов
            QSqlQuery *query = new QSqlQuery(db);
            sql_city_reg= "select s.city, formalname||' '||shortname as name, RIGHT('00000000000'||TRIM(okato),11) as okato, code, trim(postalcode) as post_index, aoguid, aoid "
                          "  from fias.city s "
                          " where s.subj=" + QString::number(subj) + " "
                          "   and s.dstr=" + QString::number(dstr) + " "
                          "   and s.aolevel=4 "
                          "   and actstatus=1 "
                          " order by s.formalname ; ";
            query->exec( sql_city_reg );
            while (query->next()) {
                okato_reg_city.append(query->value(2).toString());
                kladr_reg_city.append(query->value(3).toString());
                index_reg_city.append(query->value(4).toString());
                fguid_reg_city.append(query->value(5).toString());
                fiass_reg_city.append(query->value(6).toString());
                ui->combo_pers_pan_reg_city->addItem(query->value(1).toString(), query->value(0).toInt());
            }
            delete query;
        }
        // зададим текущее значение
        if (city>0) ui->combo_pers_pan_reg_city->setCurrentIndex(ui->combo_pers_pan_reg_city->findData(city));
        else        ui->combo_pers_pan_reg_city->setCurrentIndex(0);

        pal = ui->lab_pers_pan_reg_city->palette();
        pal.setColor(QPalette::Text, QColor(0,0,0));
        ui->lab_pers_pan_reg_city->setPalette(pal);
        font = ui->lab_pers_pan_reg_city->font();
        font.setBold(false);
        ui->lab_pers_pan_reg_city->setFont(font);
        QApplication::processEvents();
    }
    if (ui->combo_pers_pan_reg_city->currentIndex()<0)
        ui->combo_pers_pan_reg_city->setCurrentIndex(0);

    // нас.пункт регистрации
    if (nasp>=0) {
        QPalette pal = ui->lab_pers_pan_reg_nasp->palette();
        pal.setColor(QPalette::Text, QColor(0,0,255));
        ui->lab_pers_pan_reg_nasp->setPalette(pal);
        QFont font = ui->lab_pers_pan_reg_nasp->font();
        font.setBold(true);
        ui->lab_pers_pan_reg_nasp->setFont(font);
        QApplication::processEvents();

        okato_reg_nasp.clear();
        okato_reg_nasp.append("");
        kladr_reg_nasp.clear();
        kladr_reg_nasp.append("");
        index_reg_nasp.clear();
        index_reg_nasp.append("");
        fguid_reg_nasp.clear();
        fguid_reg_nasp.append("");
        fiass_reg_nasp.clear();
        fiass_reg_nasp.append("");
        ui->combo_pers_pan_reg_nasp->clear();
        ui->combo_pers_pan_reg_nasp->addItem(" - нет - ", " -//- ");

        if (subj!=0) {
            // обновление выпадающего списка нас.пунктов
            QSqlQuery *query = new QSqlQuery(db);
            sql_nasp_reg = "select s.nasp, formalname||' '||shortname as name, RIGHT('00000000000'||TRIM(okato),11) as okato, code, trim(postalcode) as post_index, aoguid, aoid "
                          "  from fias.nasp s "
                          " where s.subj=" + QString::number(subj) + " "
                          "   and s.dstr=" + QString::number(dstr) + " "
                          "   and s.city=" + QString::number(city) + " "
                          "   and s.aolevel=6 "
                          "   and actstatus=1 "
                          " order by s.formalname ; ";
            query->exec( sql_nasp_reg );
            while (query->next()) {
                okato_reg_nasp.append(query->value(2).toString());
                kladr_reg_nasp.append(query->value(3).toString());
                index_reg_nasp.append(query->value(4).toString());
                fguid_reg_nasp.append(query->value(5).toString());
                fiass_reg_nasp.append(query->value(6).toString());
                ui->combo_pers_pan_reg_nasp->addItem(query->value(1).toString(), query->value(0).toInt());
            }
            delete query;
        }
        // зададим текущее значение
        if (nasp>0) ui->combo_pers_pan_reg_nasp->setCurrentIndex(ui->combo_pers_pan_reg_nasp->findData(nasp));
        else        ui->combo_pers_pan_reg_nasp->setCurrentIndex(0);

        pal = ui->lab_pers_pan_reg_nasp->palette();
        pal.setColor(QPalette::Text, QColor(0,0,0));
        ui->lab_pers_pan_reg_nasp->setPalette(pal);
        font = ui->lab_pers_pan_reg_nasp->font();
        font.setBold(false);
        ui->lab_pers_pan_reg_nasp->setFont(font);
        QApplication::processEvents();
    }
    if (ui->combo_pers_pan_reg_nasp->currentIndex()<0)
        ui->combo_pers_pan_reg_nasp->setCurrentIndex(0);

    // улица регистрации
    if (strt>=0) {
        QPalette pal = ui->lab_pers_pan_reg_strt->palette();
        pal.setColor(QPalette::Text, QColor(0,0,255));
        ui->lab_pers_pan_reg_strt->setPalette(pal);
        QFont font = ui->lab_pers_pan_reg_strt->font();
        font.setBold(true);
        ui->lab_pers_pan_reg_strt->setFont(font);
        QApplication::processEvents();

        okato_reg_strt.clear();
        okato_reg_strt.append("");
        kladr_reg_strt.clear();
        kladr_reg_strt.append("");
        index_reg_strt.clear();
        index_reg_strt.append("");
        fguid_reg_strt.clear();
        fguid_reg_strt.append("");
        fiass_reg_strt.clear();
        fiass_reg_strt.append("");
        ui->combo_pers_pan_reg_strt->clear();
        ui->combo_pers_pan_reg_strt->addItem(" - нет - ", " -//- ");

        if (subj!=0) {
            // обновление выпадающего списка улиц
            QSqlQuery *query = new QSqlQuery(db);
            sql_strt_reg= "select s.strt, formalname||' '||shortname as name, RIGHT('00000000000'||TRIM(okato),11) as okato, code, trim(postalcode) as post_index, aoguid, aoid "
                          "  from fias.strt s "
                          " where s.subj=" + QString::number(subj) + " "
                          "   and s.dstr=" + QString::number(dstr) + " "
                          "   and s.city=" + QString::number(city) + " "
                          "   and s.nasp=" + QString::number(nasp) + " "
                          "   and s.aolevel=7 "
                          "   and actstatus=1 "
                          " order by s.formalname ; ";
            query->exec( sql_strt_reg );
            while (query->next()) {
                okato_reg_strt.append(query->value(2).toString());
                kladr_reg_strt.append(query->value(3).toString());
                index_reg_strt.append(query->value(4).toString());
                fguid_reg_strt.append(query->value(5).toString());
                fiass_reg_strt.append(query->value(6).toString());
                ui->combo_pers_pan_reg_strt->addItem(query->value(1).toString(), query->value(0).toInt());
            }
            delete query;
        }
        // зададим текущее значение
        int i = ui->combo_pers_pan_reg_strt->findData(strt,Qt::UserRole,Qt::MatchExactly);
        //int i = ui->combo_pers_pan_reg_strt->findData(strt,Qt::UserRole,Qt::MatchExactly);
        QString str = ui->combo_pers_pan_reg_strt->itemText(i);
        if (strt>0) ui->combo_pers_pan_reg_strt->setCurrentIndex(i);
        else        ui->combo_pers_pan_reg_strt->setCurrentIndex(0);

        pal = ui->lab_pers_pan_reg_strt->palette();
        pal.setColor(QPalette::Text, QColor(0,0,0));
        ui->lab_pers_pan_reg_strt->setPalette(pal);
        font = ui->lab_pers_pan_reg_strt->font();
        font.setBold(false);
        ui->lab_pers_pan_reg_strt->setFont(font);
        QApplication::processEvents();
    }
    if (ui->combo_pers_pan_reg_strt->currentIndex()<0)
        ui->combo_pers_pan_reg_strt->setCurrentIndex(0);

    // дом регистрации
    if (houseid!="-1") {
        // обновление выпадающего списка улиц
        QPalette pal = ui->lab_pers_pan_reg_hous->palette();
        pal.setColor(QPalette::Text, QColor(0,0,255));
        ui->lab_pers_pan_reg_hous->setPalette(pal);
        QFont font = ui->lab_pers_pan_reg_hous->font();
        font.setBold(true);
        ui->lab_pers_pan_reg_hous->setFont(font);
        QApplication::processEvents();

        okato_reg_hous.clear();
        okato_reg_hous.append("");
        kladr_reg_hous.clear();
        kladr_reg_hous.append("");
        index_reg_hous.clear();
        index_reg_hous.append("");
        fguid_reg_hous.clear();
        fguid_reg_hous.append("");
        fiass_reg_hous.clear();
        fiass_reg_hous.append("");
        ui->combo_pers_pan_reg_hous->clear();
        ui->combo_pers_pan_reg_hous->addItem(" - нет - ", "");

        if (subj!=0) {
            QSqlQuery *query = new QSqlQuery(db_FIAS);
            sql_hous_reg= "("
                          "select s.houseid, coalesce(s.housenum||' '||coalesce(s.buildnum,''),s.strucnum,'???') as name, RIGHT('00000000000'||TRIM(okato),11) as okato, NULL, trim(postalcode) as post_index, houseguid, houseid "
                          //"select s.houseid, coalesce(s.housenum,'-')||' '||coalesce(s.buildnum,'')||' '||coalesce(s.strucnum,'') as name, RIGHT('00000000000'||TRIM(okato),11) as okato, NULL, trim(postalcode) as post_index, houseguid, houseid "
                          "  from fias.house s ";
            if (ui->combo_pers_pan_reg_strt->currentIndex()>0)
                sql_hous_reg+=   " where s.aoguid="+ (fguid_reg_strt.size()>ui->combo_pers_pan_reg_strt->currentIndex() ? ("'" + fguid_reg_strt.at( ui->combo_pers_pan_reg_strt->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_reg_nasp->currentIndex()>0)
                sql_hous_reg+=   " where s.aoguid="+ (fguid_reg_nasp.size()>ui->combo_pers_pan_reg_nasp->currentIndex() ? ("'" + fguid_reg_nasp.at( ui->combo_pers_pan_reg_nasp->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_reg_city->currentIndex()>0)
                sql_hous_reg+=   " where s.aoguid="+ (fguid_reg_city.size()>ui->combo_pers_pan_reg_city->currentIndex() ? ("'" + fguid_reg_city.at( ui->combo_pers_pan_reg_city->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_reg_dstr->currentIndex()>0)
                sql_hous_reg+=   " where s.aoguid="+ (fguid_reg_dstr.size()>ui->combo_pers_pan_reg_dstr->currentIndex() ? ("'" + fguid_reg_dstr.at( ui->combo_pers_pan_reg_dstr->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_reg_subj->currentIndex()>0)
                sql_hous_reg+=   " where s.aoguid="+ (fguid_reg_subj.size()>ui->combo_pers_pan_reg_subj->currentIndex() ? ("'" + fguid_reg_subj.at( ui->combo_pers_pan_reg_subj->currentIndex()) + "'") : "NULL") + " ";
            else
                sql_hous_reg+=   " where s.aoguid=NULL ";
            sql_hous_reg +=   //"   and s.strstatus=0 "
                              "   and s.startdate<=current_date "
                              "   and (s.enddate is NULL or s.enddate>current_date) "
                              " order by s.housenum, s.buildnum  "
                            ") ";

            sql_hous_reg+= " UNION ALL ";

            sql_hous_reg+="("
                          "select s.houseintid, 'инт. '||coalesce(s.intstart,'0')||' - '||coalesce(s.intend,'0')||' ('||(case coalesce(s.intstatus,'0') when 0 then '???' when 1 then 'Все' when 2 then 'Чёт' when 3 then 'Неч' end)||')' as name, RIGHT('00000000000'||TRIM(okato),11) as okato, NULL, trim(postalcode) as post_index, intguid, houseintid "
                          "  from fias.houseint s ";
            if (ui->combo_pers_pan_reg_strt->currentIndex()>0)
                sql_hous_reg+=   " where s.aoguid="+ (fguid_reg_strt.size()>ui->combo_pers_pan_reg_strt->currentIndex() ? ("'" + fguid_reg_strt.at( ui->combo_pers_pan_reg_strt->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_reg_nasp->currentIndex()>0)
                sql_hous_reg+=   " where s.aoguid="+ (fguid_reg_nasp.size()>ui->combo_pers_pan_reg_nasp->currentIndex() ? ("'" + fguid_reg_nasp.at( ui->combo_pers_pan_reg_nasp->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_reg_city->currentIndex()>0)
                sql_hous_reg+=   " where s.aoguid="+ (fguid_reg_city.size()>ui->combo_pers_pan_reg_city->currentIndex() ? ("'" + fguid_reg_city.at( ui->combo_pers_pan_reg_city->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_reg_dstr->currentIndex()>0)
                sql_hous_reg+=   " where s.aoguid="+ (fguid_reg_dstr.size()>ui->combo_pers_pan_reg_dstr->currentIndex() ? ("'" + fguid_reg_dstr.at( ui->combo_pers_pan_reg_dstr->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_reg_subj->currentIndex()>0)
                sql_hous_reg+=   " where s.aoguid="+ (fguid_reg_subj.size()>ui->combo_pers_pan_reg_subj->currentIndex() ? ("'" + fguid_reg_subj.at( ui->combo_pers_pan_reg_subj->currentIndex()) + "'") : "NULL") + " ";
            else
                sql_hous_reg+= " where s.aoguid=NULL ";
            sql_hous_reg +=   //"   and s.strstatus=0 "
                              "   and s.startdate<=current_date "
                              "   and (s.enddate is NULL or s.enddate>current_date) "
                              " order by s.intstart, s.intend "
                            ") ; ";

            query->exec( sql_hous_reg );
            while (query->next()) {
                okato_reg_hous.append(query->value(2).toString());
                kladr_reg_hous.append(query->value(3).toString());
                index_reg_hous.append(query->value(4).toString());
                fguid_reg_hous.append(query->value(5).toString());
                fiass_reg_hous.append(query->value(6).toString());
                ui->combo_pers_pan_reg_hous->addItem(query->value(1).toString(), query->value(0).toString());
            }
            delete query;
        }
        // зададим текущее значение
        int i = ui->combo_pers_pan_reg_hous->findData(houseid, Qt::UserRole,Qt::MatchExactly);
        QString str = ui->combo_pers_pan_reg_hous->itemText(i);

        if (houseid.isEmpty() || i<0)
            ui->combo_pers_pan_reg_hous->setCurrentIndex(0);
        else ui->combo_pers_pan_reg_hous->setCurrentIndex(i);

        pal = ui->lab_pers_pan_reg_hous->palette();
        pal.setColor(QPalette::Text, QColor(0,0,0));
        ui->lab_pers_pan_reg_hous->setPalette(pal);
        font = ui->lab_pers_pan_reg_hous->font();
        font.setBold(false);
        ui->lab_pers_pan_reg_hous->setFont(font);
        QApplication::processEvents();
    }
    if (ui->combo_pers_pan_reg_hous->currentIndex()<0)
        ui->combo_pers_pan_reg_hous->setCurrentIndex(0);

    ui->lab_prep_fias->setVisible(false);
    ui->group_persons_tab->setEnabled(true);
    ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
    ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());
    this->setCursor(Qt::ArrowCursor);

    QApplication::processEvents();
}


// КЛАДР места проживания
void persons_wnd::refresh_pers_pan_fiass_liv(int subj, int dstr, int city, int nasp, int strt, QString houseid) {
    // проверим доступность базы ФИАС
    QString sql_test = "select count_recs from fias.load_files limit 1 ; ";
    QSqlQuery *query_test = new QSqlQuery(db_FIAS);
    bool res_test = query_test->exec(sql_test);
    query_test->next();
    int cnt = query_test->value(0).toInt();

    if (!res_test) {
        delete query_test;
        bool f_ok = false;
        while (!f_ok) {
            if (QMessageBox::warning(this, "Нет доступа к базе ФИАС!",
                                     "Внимание! \nНет доступа к базе ФИАС. При этом невозможен ввод и редактирование адресной информации.\n\n"
                                     "Попробуйте обновить подключение к базе ФИАС нажатем на кнопку [Retry]\n\nЕсли подключение не удалось - перезапустите программу.",
                                     QMessageBox::Retry|QMessageBox::Cancel, QMessageBox::Retry)==QMessageBox::Retry) {
                f_ok = refresh_fias_connection();
            } else {
                f_ok = false;
                break;
            }
        }
        if (!f_ok) {
            delete query_test;
            // нет доступа к ФИАС - отмена операции
            return;
        }
    } else {
        delete query_test;
    }

    ui->group_persons_tab->setEnabled(false);
    ui->group_person_data->setEnabled(false);
    ui->group_person_docs->setEnabled(false);

    ui->pan_pers_save->setVisible(false);
    ui->lab_prep_fias->setText("Обновление ФИАС (прожив.)");
    ui->lab_prep_fias->setVisible(true);
    ui->lab_test_for->setVisible(false);
    QApplication::processEvents();

    this->setCursor(Qt::WaitCursor);

    /*
    QString regioncode = subj>=0 ? QString("00" + QString::number(subj)).right(2)
                                : QString("00" + QString::number(ui->combo_pers_pan_liv_subj->currentData().toInt())).right(2);
    QString areacode   = dstr>=0 ? QString("000" + QString::number(dstr)).right(3)
                                : QString("000" + QString::number(ui->combo_pers_pan_liv_dstr->currentData().toInt())).right(3);
    QString citycode   = city>=0 ? QString("000" + QString::number(city)).right(3)
                                : QString("000" + QString::number(ui->combo_pers_pan_liv_city->currentData().toInt())).right(3);
    QString placecode  = nasp>=0 ? QString("000" + QString::number(nasp)).right(3)
                                : QString("000" + QString::number(ui->combo_pers_pan_liv_nasp->currentData().toInt())).right(3);
    QString streetcode = strt>=0 ? QString("0000" + QString::number(strt)).right(4)
                                : QString("0000" + QString::number(ui->combo_pers_pan_liv_strt->currentData().toInt())).right(4);
    */

    QString regioncode = subj>=0 ? QString("00" + QString::number(subj)).right(2)
                                 : QString("00" + QString::number(ui->combo_pers_pan_liv_subj->currentData().toInt())).right(2);
    subj = regioncode.toInt();
    QString areacode   = dstr>=0 ? QString("000" + QString::number(dstr)).right(3)
                                 : QString("000" + QString::number(ui->combo_pers_pan_liv_dstr->currentData().toInt())).right(3);
    dstr = areacode.toInt();
    QString citycode   = city>=0 ? QString("000" + QString::number(city)).right(3)
                                 : QString("000" + QString::number(ui->combo_pers_pan_liv_city->currentData().toInt())).right(3);
    city = citycode.toInt();
    QString placecode  = nasp>=0 ? QString("000" + QString::number(nasp)).right(3)
                                 : QString("000" + QString::number(ui->combo_pers_pan_liv_nasp->currentData().toInt())).right(3);
    nasp = placecode.toInt();
    QString streetcode = strt>=0 ? QString("0000" + QString::number(strt)).right(4)
                                 : QString("0000" + QString::number(ui->combo_pers_pan_liv_strt->currentData().toInt())).right(4);
    strt = streetcode.toInt();

    // регион проживания
    if (subj>=0) {
        // обновление выпадающего списка регионов
        QPalette pal = ui->lab_pers_pan_liv_subj->palette();
        pal.setColor(QPalette::Text, QColor(0,0,255));
        ui->lab_pers_pan_liv_subj->setPalette(pal);
        QFont font = ui->lab_pers_pan_liv_subj->font();
        font.setBold(true);
        ui->lab_pers_pan_liv_subj->setFont(font);
        QApplication::processEvents();

        okato_liv_subj.clear();
        okato_liv_subj.append("");
        kladr_liv_subj.clear();
        kladr_liv_subj.append("");
        index_liv_subj.clear();
        index_liv_subj.append("");
        fguid_liv_subj.clear();
        fguid_liv_subj.append("");
        fiass_liv_subj.clear();
        fiass_liv_subj.append("");
        ui->combo_pers_pan_liv_subj->clear();
        ui->combo_pers_pan_liv_subj->addItem(" - нет - ", " -//- ");

        QSqlQuery *query = new QSqlQuery(db);
        sql_subj_liv= "select s.subj, formalname||' '||shortname as name, RIGHT('00000000000'||TRIM(okato),11) as okato, code, trim(postalcode) as post_index "
                      "  from fias.subj s "
                      " where s.aolevel=1 "
                      "   and actstatus=1 "
                      " order by s.formalname ; ";
        query->exec( sql_subj_liv );
        while (query->next()) {
            okato_liv_subj.append(query->value(2).toString());
            kladr_liv_subj.append(query->value(3).toString());
            index_liv_subj.append(query->value(4).toString());
            fiass_liv_subj.append(query->value(5).toString());
            ui->combo_pers_pan_liv_subj->addItem(query->value(1).toString(), query->value(0).toInt());
        }
        delete query;
        // зададим текущее значение
        if (subj>0) ui->combo_pers_pan_liv_subj->setCurrentIndex(ui->combo_pers_pan_liv_subj->findData(subj));
        else        ui->combo_pers_pan_liv_subj->setCurrentIndex(0);

        pal = ui->lab_pers_pan_liv_subj->palette();
        pal.setColor(QPalette::Text, QColor(0,0,0));
        ui->lab_pers_pan_liv_subj->setPalette(pal);
        font = ui->lab_pers_pan_liv_subj->font();
        font.setBold(false);
        ui->lab_pers_pan_liv_subj->setFont(font);
        QApplication::processEvents();
    }
    if (ui->combo_pers_pan_liv_subj->currentIndex()<0)
        ui->combo_pers_pan_liv_subj->setCurrentIndex(0);

    //район проживания
    if (dstr>=0) {
        // обновление выпадающего списка районов
        QPalette pal = ui->lab_pers_pan_liv_dstr->palette();
        pal.setColor(QPalette::Text, QColor(0,0,255));
        ui->lab_pers_pan_liv_dstr->setPalette(pal);
        QFont font = ui->lab_pers_pan_liv_dstr->font();
        font.setBold(true);
        ui->lab_pers_pan_liv_dstr->setFont(font);
        QApplication::processEvents();

        okato_liv_dstr.clear();
        okato_liv_dstr.append("");
        kladr_liv_dstr.clear();
        kladr_liv_dstr.append("");
        index_liv_dstr.clear();
        index_liv_dstr.append("");
        fguid_liv_dstr.clear();
        fguid_liv_dstr.append("");
        fiass_liv_dstr.clear();
        fiass_liv_dstr.append("");
        ui->combo_pers_pan_liv_dstr->clear();
        ui->combo_pers_pan_liv_dstr->addItem(" - нет - ", " -//- ");

        if (subj!=0) {
            QSqlQuery *query = new QSqlQuery(db);
            sql_dstr_liv= "select s.dstr, formalname||' '||shortname as name, RIGHT('00000000000'||TRIM(okato),11) as okato, code, trim(postalcode) as post_index, aoguid, aoid "
                          "  from fias.dstr s "
                          " where s.subj=" + QString::number(subj) + " "
                          "   and s.aolevel=3 "
                          "   and actstatus=1 "
                          " order by s.formalname ; ";
            query->exec( sql_dstr_liv );
            while (query->next()) {
                okato_liv_dstr.append(query->value(2).toString());
                kladr_liv_dstr.append(query->value(3).toString());
                index_liv_dstr.append(query->value(4).toString());
                fguid_liv_dstr.append(query->value(5).toString());
                fiass_liv_dstr.append(query->value(6).toString());
                ui->combo_pers_pan_liv_dstr->addItem(query->value(1).toString(), query->value(0).toInt());
            }
            delete query;
        }
        // зададим текущее значение
        if (dstr>0) ui->combo_pers_pan_liv_dstr->setCurrentIndex(ui->combo_pers_pan_liv_dstr->findData(dstr));
        else        ui->combo_pers_pan_liv_dstr->setCurrentIndex(0);

        pal = ui->lab_pers_pan_liv_dstr->palette();
        pal.setColor(QPalette::Text, QColor(0,0,0));
        ui->lab_pers_pan_liv_dstr->setPalette(pal);
        font = ui->lab_pers_pan_liv_dstr->font();
        font.setBold(false);
        ui->lab_pers_pan_liv_dstr->setFont(font);
        QApplication::processEvents();
    }
    if (ui->combo_pers_pan_liv_dstr->currentIndex()<0)
        ui->combo_pers_pan_liv_dstr->setCurrentIndex(0);

    // город проживания
    if (city>=0) {
        // обновление выпадающего списка городов
        QPalette pal = ui->lab_pers_pan_liv_city->palette();
        pal.setColor(QPalette::Text, QColor(0,0,255));
        ui->lab_pers_pan_liv_city->setPalette(pal);
        QFont font = ui->lab_pers_pan_liv_city->font();
        font.setBold(true);
        ui->lab_pers_pan_liv_city->setFont(font);
        QApplication::processEvents();

        okato_liv_city.clear();
        okato_liv_city.append("");
        kladr_liv_city.clear();
        kladr_liv_city.append("");
        index_liv_city.clear();
        index_liv_city.append("");
        fguid_liv_city.clear();
        fguid_liv_city.append("");
        fiass_liv_city.clear();
        fiass_liv_city.append("");
        ui->combo_pers_pan_liv_city->clear();
        ui->combo_pers_pan_liv_city->addItem(" - нет - ", " -//- ");

        if (subj!=0) {
            QSqlQuery *query = new QSqlQuery(db);
            sql_city_liv= "select s.city, formalname||' '||shortname as name, RIGHT('00000000000'||TRIM(okato),11) as okato, code, trim(postalcode) as post_index, aoguid, aoid "
                          "  from fias.city s "
                          " where s.subj=" + QString::number(subj) + " "
                          "   and s.dstr=" + QString::number(dstr) + " "
                          "   and s.aolevel=4 "
                          "   and actstatus=1 "
                          " order by s.formalname ; ";
            query->exec( sql_city_liv );
            while (query->next()) {
                okato_liv_city.append(query->value(2).toString());
                kladr_liv_city.append(query->value(3).toString());
                index_liv_city.append(query->value(4).toString());
                fguid_liv_city.append(query->value(5).toString());
                fiass_liv_city.append(query->value(6).toString());
                ui->combo_pers_pan_liv_city->addItem(query->value(1).toString(), query->value(0).toInt());
            }
            delete query;
        }
        // зададим текущее значение
        if (city>0) ui->combo_pers_pan_liv_city->setCurrentIndex(ui->combo_pers_pan_liv_city->findData(city));
        else        ui->combo_pers_pan_liv_city->setCurrentIndex(0);

        pal = ui->lab_pers_pan_liv_city->palette();
        pal.setColor(QPalette::Text, QColor(0,0,0));
        ui->lab_pers_pan_liv_city->setPalette(pal);
        font = ui->lab_pers_pan_liv_city->font();
        font.setBold(false);
        ui->lab_pers_pan_liv_city->setFont(font);
        QApplication::processEvents();
    }
    if (ui->combo_pers_pan_liv_city->currentIndex()<0)
        ui->combo_pers_pan_liv_city->setCurrentIndex(0);

    // нас.пункт проживания
    if (nasp>=0) {
        // обновление выпадающего списка нас.пунктов
        QPalette pal = ui->lab_pers_pan_liv_nasp->palette();
        pal.setColor(QPalette::Text, QColor(0,0,255));
        ui->lab_pers_pan_liv_nasp->setPalette(pal);
        QFont font = ui->lab_pers_pan_liv_nasp->font();
        font.setBold(true);
        ui->lab_pers_pan_liv_nasp->setFont(font);
        QApplication::processEvents();

        okato_liv_nasp.clear();
        okato_liv_nasp.append("");
        kladr_liv_nasp.clear();
        kladr_liv_nasp.append("");
        index_liv_nasp.clear();
        index_liv_nasp.append("");
        fguid_liv_nasp.clear();
        fguid_liv_nasp.append("");
        fiass_liv_nasp.clear();
        fiass_liv_nasp.append("");
        ui->combo_pers_pan_liv_nasp->clear();
        ui->combo_pers_pan_liv_nasp->addItem(" - нет - ", " -//- ");

        if (subj!=0) {
            QSqlQuery *query = new QSqlQuery(db);
            sql_nasp_liv= "select s.nasp, formalname||' '||shortname as name, RIGHT('00000000000'||TRIM(okato),11) as okato, code, trim(postalcode) as post_index, aoguid, aoid "
                          "  from fias.nasp s "
                          " where s.subj=" + QString::number(subj) + " "
                          "   and s.dstr=" + QString::number(dstr) + " "
                          "   and s.city=" + QString::number(city) + " "
                          "   and s.aolevel=6 "
                          "   and actstatus=1 "
                          " order by s.formalname ; ";
            query->exec( sql_nasp_liv );
            while (query->next()) {
                okato_liv_nasp.append(query->value(2).toString());
                kladr_liv_nasp.append(query->value(3).toString());
                index_liv_nasp.append(query->value(4).toString());
                fguid_liv_nasp.append(query->value(5).toString());
                fiass_liv_nasp.append(query->value(6).toString());
                ui->combo_pers_pan_liv_nasp->addItem(query->value(1).toString(), query->value(0).toInt());
            }
            delete query;
        }
        // зададим текущее значение
        if (nasp>0) ui->combo_pers_pan_liv_nasp->setCurrentIndex(ui->combo_pers_pan_liv_nasp->findData(nasp));
        else        ui->combo_pers_pan_liv_nasp->setCurrentIndex(0);

        pal = ui->lab_pers_pan_liv_nasp->palette();
        pal.setColor(QPalette::Text, QColor(0,0,0));
        ui->lab_pers_pan_liv_nasp->setPalette(pal);
        font = ui->lab_pers_pan_liv_nasp->font();
        font.setBold(false);
        ui->lab_pers_pan_liv_nasp->setFont(font);
        QApplication::processEvents();
    }
    if (ui->combo_pers_pan_liv_nasp->currentIndex()<0)
        ui->combo_pers_pan_liv_nasp->setCurrentIndex(0);

    // улица проживания
    if (strt>=0) {
        // обновление выпадающего списка улиц
        QPalette pal = ui->lab_pers_pan_liv_strt->palette();
        pal.setColor(QPalette::Text, QColor(0,0,255));
        ui->lab_pers_pan_liv_strt->setPalette(pal);
        QFont font = ui->lab_pers_pan_liv_strt->font();
        font.setBold(true);
        ui->lab_pers_pan_liv_strt->setFont(font);
        QApplication::processEvents();

        okato_liv_strt.clear();
        okato_liv_strt.append("");
        kladr_liv_strt.clear();
        kladr_liv_strt.append("");
        index_liv_strt.clear();
        index_liv_strt.append("");
        fguid_liv_strt.clear();
        fguid_liv_strt.append("");
        fiass_liv_strt.clear();
        fiass_liv_strt.append("");
        ui->combo_pers_pan_liv_strt->clear();
        ui->combo_pers_pan_liv_strt->addItem(" - нет - ", " -//- ");

        if (subj!=0) {
            QSqlQuery *query = new QSqlQuery(db);
            sql_strt_liv= "select s.strt, formalname||' '||shortname as name, RIGHT('00000000000'||TRIM(okato),11) as okato, code, trim(postalcode) as post_index, aoguid, aoid "
                          "  from fias.strt s "
                          " where s.subj=" + QString::number(subj) + " "
                          "   and s.dstr=" + QString::number(dstr) + " "
                          "   and s.city=" + QString::number(city) + " "
                          "   and s.nasp=" + QString::number(nasp) + " "
                          "   and s.aolevel=7 "
                          "   and actstatus=1 "
                          " order by s.formalname ; ";
            query->exec( sql_strt_liv );
            while (query->next()) {
                okato_liv_strt.append(query->value(2).toString());
                kladr_liv_strt.append(query->value(3).toString());
                index_liv_strt.append(query->value(4).toString());
                fguid_liv_strt.append(query->value(5).toString());
                fiass_liv_strt.append(query->value(6).toString());
                ui->combo_pers_pan_liv_strt->addItem(query->value(1).toString(), query->value(0).toInt());
            }
            delete query;
        }
        // зададим текущее значение
        int i = ui->combo_pers_pan_liv_strt->findData(strt,Qt::UserRole,Qt::MatchExactly);
        QString str = ui->combo_pers_pan_liv_strt->itemText(i);
        if (strt>0) ui->combo_pers_pan_liv_strt->setCurrentIndex(i);
        else        ui->combo_pers_pan_liv_strt->setCurrentIndex(0);

        pal = ui->lab_pers_pan_liv_strt->palette();
        pal.setColor(QPalette::Text, QColor(0,0,0));
        ui->lab_pers_pan_liv_strt->setPalette(pal);
        font = ui->lab_pers_pan_liv_strt->font();
        font.setBold(false);
        ui->lab_pers_pan_liv_strt->setFont(font);
        QApplication::processEvents();
    }
    if (ui->combo_pers_pan_liv_strt->currentIndex()<0)
        ui->combo_pers_pan_liv_strt->setCurrentIndex(0);

    // дом проживания
    if (houseid!="-1") {
        // обновление выпадающего списка улиц
        QPalette pal = ui->lab_pers_pan_liv_hous->palette();
        pal.setColor(QPalette::Text, QColor(0,0,255));
        ui->lab_pers_pan_liv_hous->setPalette(pal);
        QFont font = ui->lab_pers_pan_liv_hous->font();
        font.setBold(true);
        ui->lab_pers_pan_liv_hous->setFont(font);
        QApplication::processEvents();

        okato_liv_hous.clear();
        okato_liv_hous.append("");
        kladr_liv_hous.clear();
        kladr_liv_hous.append("");
        index_liv_hous.clear();
        index_liv_hous.append("");
        fguid_liv_hous.clear();
        fguid_liv_hous.append("");
        fiass_liv_hous.clear();
        fiass_liv_hous.append("");
        ui->combo_pers_pan_liv_hous->clear();
        ui->combo_pers_pan_liv_hous->addItem(" - нет - ", "");

        /*
        if (subj!=0) {
            QSqlQuery *query = new QSqlQuery(db_FIAS);
            sql_hous_liv= "select s.houseid, coalesce(s.housenum||' '||coalesce(s.buildnum,''),s.strucnum,'???') as name, RIGHT('00000000000'||TRIM(okato),11) as okato, NULL, trim(postalcode) as post_index, houseguid, houseid "
                          //"select s.houseid, coalesce(s.housenum,'-')||' '||coalesce(s.buildnum,'')||' '||coalesce(s.strucnum,'') as name, RIGHT('00000000000'||TRIM(okato),11) as okato, NULL, trim(postalcode) as post_index, houseguid, houseid "
                          "  from fias.house s ";
            if (ui->combo_pers_pan_liv_strt->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_strt.size()>ui->combo_pers_pan_liv_strt->currentIndex() ? ("'" + fguid_liv_strt.at( ui->combo_pers_pan_liv_strt->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_liv_nasp->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_nasp.size()>ui->combo_pers_pan_liv_nasp->currentIndex() ? ("'" + fguid_liv_nasp.at( ui->combo_pers_pan_liv_nasp->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_liv_city->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_city.size()>ui->combo_pers_pan_liv_city->currentIndex() ? ("'" + fguid_liv_city.at( ui->combo_pers_pan_liv_city->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_liv_dstr->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_dstr.size()>ui->combo_pers_pan_liv_dstr->currentIndex() ? ("'" + fguid_liv_dstr.at( ui->combo_pers_pan_liv_dstr->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_liv_subj->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_subj.size()>ui->combo_pers_pan_liv_subj->currentIndex() ? ("'" + fguid_liv_subj.at( ui->combo_pers_pan_liv_subj->currentIndex()) + "'") : "NULL") + " ";
            else sql_hous_liv += " where s.aoguid=NULL ";
            sql_hous_liv +=   //"   and s.strstatus=0 "
                              "   and s.startdate<=current_date "
                              "   and (s.enddate is NULL or s.enddate>current_date) "
                              " order by s.housenum, s.buildnum ; ";
            query->exec( sql_hous_liv );
            while (query->next()) {
                okato_liv_hous.append(query->value(2).toString());
                kladr_liv_hous.append(query->value(3).toString());
                index_liv_hous.append(query->value(4).toString());
                fguid_liv_hous.append(query->value(5).toString());
                fiass_liv_hous.append(query->value(6).toString());
                ui->combo_pers_pan_liv_hous->addItem(query->value(1).toString(), query->value(0).toString());
            }
            delete query;
        }
        */

        if (subj!=0) {
            QSqlQuery *query = new QSqlQuery(db_FIAS);
            sql_hous_liv= "("
                          "select s.houseid, coalesce(s.housenum||' '||coalesce(s.buildnum,''),s.strucnum,'???') as name, RIGHT('00000000000'||TRIM(okato),11) as okato, NULL, trim(postalcode) as post_index, houseguid, houseid "
                          //"select s.houseid, coalesce(s.housenum,'-')||' '||coalesce(s.buildnum,'')||' '||coalesce(s.strucnum,'') as name, RIGHT('00000000000'||TRIM(okato),11) as okato, NULL, trim(postalcode) as post_index, houseguid, houseid "
                          "  from fias.house s ";
            if (ui->combo_pers_pan_liv_strt->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_strt.size()>ui->combo_pers_pan_liv_strt->currentIndex() ? ("'" + fguid_liv_strt.at( ui->combo_pers_pan_liv_strt->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_liv_nasp->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_nasp.size()>ui->combo_pers_pan_liv_nasp->currentIndex() ? ("'" + fguid_liv_nasp.at( ui->combo_pers_pan_liv_nasp->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_liv_city->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_city.size()>ui->combo_pers_pan_liv_city->currentIndex() ? ("'" + fguid_liv_city.at( ui->combo_pers_pan_liv_city->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_liv_dstr->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_dstr.size()>ui->combo_pers_pan_liv_dstr->currentIndex() ? ("'" + fguid_liv_dstr.at( ui->combo_pers_pan_liv_dstr->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_liv_subj->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_subj.size()>ui->combo_pers_pan_liv_subj->currentIndex() ? ("'" + fguid_liv_subj.at( ui->combo_pers_pan_liv_subj->currentIndex()) + "'") : "NULL") + " ";
            else
                sql_hous_liv+=   " where s.aoguid=NULL ";
            sql_hous_liv +=   //"   and s.strstatus=0 "
                              "   and s.startdate<=current_date "
                              "   and (s.enddate is NULL or s.enddate>current_date) "
                              " order by s.housenum, s.buildnum  "
                            ") ";

            sql_hous_liv+= " UNION ALL ";

            sql_hous_liv+="("
                          "select s.houseintid, 'инт. '||coalesce(s.intstart,'0')||' - '||coalesce(s.intend,'0')||' ('||(case coalesce(s.intstatus,'0') when 0 then '???' when 1 then 'Все' when 2 then 'Чёт' when 3 then 'Неч' end)||')' as name, RIGHT('00000000000'||TRIM(okato),11) as okato, NULL, trim(postalcode) as post_index, intguid, houseintid "
                          "  from fias.houseint s ";
            if (ui->combo_pers_pan_liv_strt->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_strt.size()>ui->combo_pers_pan_liv_strt->currentIndex() ? ("'" + fguid_liv_strt.at( ui->combo_pers_pan_liv_strt->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_liv_nasp->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_nasp.size()>ui->combo_pers_pan_liv_nasp->currentIndex() ? ("'" + fguid_liv_nasp.at( ui->combo_pers_pan_liv_nasp->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_liv_city->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_city.size()>ui->combo_pers_pan_liv_city->currentIndex() ? ("'" + fguid_liv_city.at( ui->combo_pers_pan_liv_city->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_liv_dstr->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_dstr.size()>ui->combo_pers_pan_liv_dstr->currentIndex() ? ("'" + fguid_liv_dstr.at( ui->combo_pers_pan_liv_dstr->currentIndex()) + "'") : "NULL") + " ";
            else if (ui->combo_pers_pan_liv_subj->currentIndex()>0)
                sql_hous_liv+=   " where s.aoguid="+ (fguid_liv_subj.size()>ui->combo_pers_pan_liv_subj->currentIndex() ? ("'" + fguid_liv_subj.at( ui->combo_pers_pan_liv_subj->currentIndex()) + "'") : "NULL") + " ";
            else
                sql_hous_liv+= " where s.aoguid=NULL ";
            sql_hous_liv +=   //"   and s.strstatus=0 "
                              "   and s.startdate<=current_date "
                              "   and (s.enddate is NULL or s.enddate>current_date) "
                              " order by s.intstart, s.intend "
                            ") ; ";

            query->exec( sql_hous_liv );
            while (query->next()) {
                okato_liv_hous.append(query->value(2).toString());
                kladr_liv_hous.append(query->value(3).toString());
                index_liv_hous.append(query->value(4).toString());
                fguid_liv_hous.append(query->value(5).toString());
                fiass_liv_hous.append(query->value(6).toString());
                ui->combo_pers_pan_liv_hous->addItem(query->value(1).toString(), query->value(0).toString());
            }
            delete query;
        }

        // зададим текущее значение
        int i = ui->combo_pers_pan_liv_hous->findData(houseid, Qt::UserRole,Qt::MatchExactly);
        QString str = ui->combo_pers_pan_liv_hous->itemText(i);

        if (houseid.isEmpty() || i<0)
            ui->combo_pers_pan_liv_hous->setCurrentIndex(0);
        else ui->combo_pers_pan_liv_hous->setCurrentIndex(i);

        pal = ui->lab_pers_pan_liv_hous->palette();
        pal.setColor(QPalette::Text, QColor(0,0,0));
        ui->lab_pers_pan_liv_hous->setPalette(pal);
        font = ui->lab_pers_pan_liv_hous->font();
        font.setBold(false);
        ui->lab_pers_pan_liv_hous->setFont(font);
        QApplication::processEvents();
    }
    if (ui->combo_pers_pan_liv_hous->currentIndex()<0)
        ui->combo_pers_pan_liv_hous->setCurrentIndex(0);

    ui->lab_prep_fias->setVisible(false);
    ui->group_persons_tab->setEnabled(true);
    ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
    ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());
    this->setCursor(Qt::ArrowCursor);

    QApplication::processEvents();
}

void persons_wnd::on_bn_pers_refresh_clicked() {
    refresh_persons_tab();
}

void persons_wnd::on_line_pers_fam_textChanged(const QString &arg1) {
    ui->ch_pers_fam->setChecked(!arg1.isEmpty());
}
void persons_wnd::on_line_pers_im_textChanged(const QString &arg1) {
    ui->ch_pers_im->setChecked(!arg1.isEmpty());
}
void persons_wnd::on_line_pers_ot_textChanged(const QString &arg1) {
    ui->ch_pers_ot->setChecked(!arg1.isEmpty());
}
void persons_wnd::on_line_pers_snils_textChanged(const QString &arg1) {
    ui->ch_pers_snils->setChecked(!arg1.isEmpty());
}
void persons_wnd::on_line_pers_enp_textChanged(const QString &arg1) {
    ui->ch_pers_enp->setChecked(!arg1.isEmpty());
}
void persons_wnd::on_line_pers_vs_textChanged(const QString &arg1) {
    ui->ch_pers_vs->setChecked(!arg1.isEmpty());
}
void persons_wnd::on_combo_pers_sex_currentIndexChanged(int index) {
    ui->ch_pers_sex->setChecked(index>0);
    refresh_persons_tab();
}

void persons_wnd::on_date_pers_birth_dateChanged(const QDate &date) {
    ui->ch_pers_birth->setChecked(date>QDate(1900,1,1));
}
void persons_wnd::on_date_pers_birth_2_dateChanged(const QDate &date) {
    ui->ch_pers_birth->setChecked(date>QDate(1900,1,1));
}
void persons_wnd::on_date_pers_birth_editingFinished() {
    if (ui->date_pers_birth_2->date()<ui->date_pers_birth->date()) {
        ui->date_pers_birth_2->setDate(ui->date_pers_birth->date());
    }
    refresh_persons_tab();
}
void persons_wnd::on_date_pers_birth_2_editingFinished() {
    if (ui->date_pers_birth_2->date()<ui->date_pers_birth->date()) {
        ui->date_pers_birth->setDate(ui->date_pers_birth_2->date());
    }
    refresh_persons_tab();
}

void persons_wnd::on_ch_pers_birth_clicked(bool checked) {
    /*if (!checked) {
        ui->date_pers_birth->setDate(QDate(1900,1,1));
        ui->date_pers_birth_2->setDate(QDate(1900,1,1));
    }*/
}

void persons_wnd::on_bn_pers_clear_clicked() {
    ui->ch_pers_polis->setChecked(false);
    ui->ch_pers_polis_2->setChecked(false);
    ui->ch_pers_old_vs->setChecked(false);
    ui->ch_pers_blanks->setChecked(false);
    ui->ch_pers_errors->setChecked(false);
    ui->ch_pers_actNget->setChecked(false);
    //ui->ch_pers_assig->setChecked(false);
    ui->ch_pers_assig_2->setChecked(false);
    ui->ch_pers_assig_ter->setChecked(false);
    ui->ch_pers_assig_ter_2->setChecked(false);
    ui->ch_pers_assig_errors->setChecked(false);
    ui->ch_pers_addr_reg->setChecked(false);
    ui->ch_pers_addr_reg_2->setChecked(false);
    ui->ch_pol_end->setChecked(false);
    ui->ch_pers_assig_mo->setChecked(false);
    ui->ch_pers_assig_mt->setChecked(false);
    ui->spin_pers_assig_mo->setVisible(false);
    ui->line_pers_assig_snils_mt->setVisible(false);

    ui->ch_pers_date->setChecked(false);
    ui->date_pers_date->setVisible(false);
    ui->ch_pers_day->setChecked(false);
    ui->date_pers_day->setVisible(false);
    ui->ch_pers_month->setChecked(false);
    ui->combo_pers_month->setVisible(false);
    ui->ch_pers_year->setChecked(false);
    ui->combo_pers_year->setVisible(false);
    ui->ch_pers_dates->setChecked(false);
    ui->date_pers_date_from->setVisible(false);
    ui->date_pers_date_to->setVisible(false);

    ui->ch_pol_date->setChecked(false);
    ui->date_pol_date->setVisible(false);
    ui->ch_pol_day->setChecked(false);
    ui->date_pol_day->setVisible(false);
    ui->ch_pol_month->setChecked(false);
    ui->combo_pol_month->setVisible(false);
    ui->ch_pol_year->setChecked(false);
    ui->combo_pol_year->setVisible(false);
    ui->ch_pol_dates->setChecked(false);
    ui->date_pol_date_from->setVisible(false);
    ui->date_pol_date_to->setVisible(false);

    ui->ch_insure_date->setChecked(false);
    ui->date_insure_date->setVisible(false);
    ui->ch_insure_day->setChecked(false);
    ui->date_insure_day->setVisible(false);
    ui->ch_insure_month->setChecked(false);
    ui->combo_insure_month->setVisible(false);
    ui->ch_insure_year->setChecked(false);
    ui->combo_insure_year->setVisible(false);
    ui->ch_insure_dates->setChecked(false);
    ui->date_insure_date_from->setVisible(false);
    ui->date_insure_date_to->setVisible(false);

    ui->ch_pers_point->setChecked(false);
    ui->combo_pers_point->setVisible(false);
    ui->ch_pers_operator->setChecked(false);
    ui->combo_pers_operator->setVisible(false);
    ui->ch_pers_category->setChecked(false);
    ui->combo_pers_category->setVisible(false);
    ui->ch_pers_status_f->setChecked(false);
    ui->combo_pers_status_f->setVisible(false);
    ui->ch_pers_tfoms_ok->setChecked(false);
    ui->ch_pers_tfoms_no->setChecked(false);
    ui->ch_pers_tfoms_ok->setVisible(false);
    ui->ch_pers_tfoms_no->setVisible(false);

    ui->line_pers_fam->clear();
    ui->line_pers_im->clear();
    ui->line_pers_ot->clear();
    ui->line_pers_snils->clear();
    ui->combo_pers_sex->setCurrentIndex(0);
    ui->date_pers_birth->setDate(QDate(1900,1,1));
    ui->date_pers_birth_2->setDate(QDate(1900,1,1));

    refresh_persons_tab();
}

void persons_wnd::on_group_filters_clicked(bool checked) {
    ui->pan_filters->setVisible(checked);
    if (!checked) {
        // сбросим дополнительные фильтры
        ui->ch_pers_polis->setChecked(false);
        ui->ch_pers_polis_2->setChecked(false);
        ui->ch_pers_old_vs->setChecked(false);
        ui->ch_pers_blanks->setChecked(false);
        ui->ch_pers_errors->setChecked(false);
        ui->ch_pers_actNget->setChecked(false);
        //ui->ch_pers_assig->setChecked(false);
        ui->ch_pers_assig_2->setChecked(false);
        ui->ch_pers_assig_ter->setChecked(false);
        ui->ch_pers_assig_ter_2->setChecked(false);
        ui->ch_pers_assig_errors->setChecked(false);
        ui->ch_pers_addr_reg->setChecked(false);
        ui->ch_pers_addr_reg_2->setChecked(false);
        ui->ch_pol_end->setChecked(false);
        ui->ch_pers_assig_mo->setChecked(false);
        ui->ch_pers_assig_mt->setChecked(false);
        ui->spin_pers_assig_mo->setVisible(false);
        ui->line_pers_assig_snils_mt->setVisible(false);

        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);

        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);

        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);

        ui->ch_pers_point->setChecked(false);
        ui->combo_pers_point->setVisible(false);
        ui->ch_pers_operator->setChecked(false);
        ui->combo_pers_operator->setVisible(false);
        ui->ch_pers_category->setChecked(false);
        ui->combo_pers_category->setVisible(false);
        ui->ch_pers_status_f->setChecked(false);
        ui->combo_pers_status_f->setVisible(false);
        ui->ch_pers_tfoms_ok->setChecked(false);
        ui->ch_pers_tfoms_no->setChecked(false);

        // обновим таблицу персон
        refresh_persons_tab();
    }
}

void persons_wnd::on_bn_pers_new_clicked() {
    data_pers.id = -1;
    data_pers.date_ins = QDate::currentDate();
    data_pers.id_first_operator = data_app.id_operator;
    data_pers._id_last_operator = data_app.id_operator;

    filter_pers.has_fam = ui->ch_pers_fam->isChecked();
    filter_pers.has_im = ui->ch_pers_im->isChecked();
    filter_pers.has_ot = ui->ch_pers_ot->isChecked();
    filter_pers.has_sex = ui->ch_pers_sex->isChecked();
    filter_pers.has_birth = ui->ch_pers_birth->isChecked();
    filter_pers.has_snils = ui->ch_pers_snils->isChecked();
    filter_pers.fam = ui->line_pers_fam->text();
    filter_pers.im = ui->line_pers_im->text();
    filter_pers.ot = ui->line_pers_ot->text();
    filter_pers.sex = ui->combo_pers_sex->currentIndex();
    filter_pers.date_birth = ui->date_pers_birth->date();
    filter_pers.snils = ui->line_pers_snils->text();

    data_pers.has_ot = ui->ch_pers_ot->isChecked();
    data_pers.has_snils = ui->ch_pers_snils->isChecked();
    data_pers.fam = ui->line_pers_fam->text();
    data_pers.im = ui->line_pers_im->text();
    data_pers.ot = ui->line_pers_ot->text();
    data_pers.sex = ui->combo_pers_sex->currentIndex();
    data_pers.date_birth = ui->date_pers_birth->date();
    data_pers.snils = ui->line_pers_snils->text();

    data_pers.date_ins = QDate::currentDate();

    data_pers.has_fam_old = false;
    data_pers.has_im_old = false;
    data_pers.has_ot_old = false;
    data_pers.has_death_old = false;
    data_pers.has_snils_old = false;
    data_pers.has_enp_old = false;
    data_pers.fam_old = "";
    data_pers.im_old = "";
    data_pers.ot_old = "";
    data_pers.snils_old = "";
    data_pers.plc_birth_old = "";
    data_pers.enp_old = "";
    data_pers.has_sex_old = false;
    data_pers.has_date_birth_old = false;
    data_pers.has_plc_birth_old = false;
    data_pers.has_date_death_old = false;
    data_pers.sex_old = 0;
    data_pers.date_birth_old = QDate(1900,1,1);
    data_pers.date_death_old = QDate(1900,1,1);
    data_pers.id_udl = -1;      // assig_date,
    data_pers.id_drp = -1;      // assig_date,
    data_pers.id_polis = -1;      // assig_date,
    data_pers.id_assig = -1;      // assig_date,

    // скроем таблицу персон, покажем панель свойств персоны и панель документов
    ui->show_pers_tabl->setChecked(false);
    ui->show_pers_data->setChecked(true);
    ui->show_pers_docs->setChecked(false);
    on_show_pers_tabl_clicked(false);
    on_show_pers_data_clicked(true);
    on_show_pers_docs_clicked(false);
    ui->show_pers_tabl->setEnabled(false);
    ui->show_pers_data->setEnabled(true);
    ui->show_pers_docs->setEnabled(true);

    refresh_pers_docs();
    refresh_pers_data();
    refresh_pers_photo();
    refresh_pers_sign();

    QRect screen = QApplication::desktop()->screenGeometry();
    if (screen.width()==1024 && screen.height()==768) {
        //this->setWindowState( polices_w->windowState() | Qt::WindowFullScreen);

        on_ch_docs_clicked(ui->ch_docs->isChecked());
        on_ch_photo_clicked(ui->ch_photo->isChecked());
        //on_ch_address_clicked(ui->ch_address->isChecked());
        on_ch_phones_clicked(ui->ch_phones->isChecked());
        on_ch_country_clicked(ui->ch_country->isChecked());
        on_ch_rep_clicked(ui->ch_rep->isChecked());
        on_ch_person_clicked(ui->ch_person->isChecked());
        on_ch_person_old_clicked(ui->ch_person_old->isChecked());
        on_ch_pers_pan_reg_clicked(ui->ch_pers_pan_reg->isChecked());
        on_ch_pers_pan_liv_clicked(ui->ch_pers_pan_liv->isChecked());

    } else {
        //this->setWindowState( polices_w->windowState() | Qt::WindowFullScreen);
        //this->resize(screen.width()-15, screen.height()-40);
        //this->move(3,3);

        ui->ch_person->setChecked(true);
        on_ch_person_clicked(true);
        ui->ch_person_old->setChecked(false);
        on_ch_person_old_clicked(false);
        ui->ch_rep->setChecked(true);
        on_ch_rep_clicked(true);
        ui->ch_phones->setChecked(true);
        on_ch_phones_clicked(true);

        ui->ch_country->setChecked(true);
        on_ch_country_clicked(true);
        //ui->ch_address->setChecked(true);
        //on_ch_address_clicked(true);
        ui->ch_pers_pan_reg->setChecked(true);
        on_ch_pers_pan_reg_clicked(true);
        ui->ch_pers_pan_liv->setChecked(true);
        on_ch_pers_pan_liv_clicked(true);

        ui->ch_docs->setChecked(true);
        on_ch_docs_clicked(true);
        ui->ch_photo->setChecked(true);
        on_ch_photo_clicked(true);
        ui->ch_assig->setChecked(true);
        on_ch_assig_clicked(true);
    }

    ui->group_person_data->setChecked(true);
    on_group_person_data_clicked(true);
    ui->group_person_docs->setChecked(false);
    on_group_person_docs_clicked(false);
    b_need_save(true);
    on_bn_docs_cansel_clicked();

    on_split_main_splitterMoved(0,1);

    //ui->ch_pers_pan_reg_hous->setChecked(false);
    //ui->ch_pers_pan_liv_hous->setChecked(false);
}

void persons_wnd::on_bn_pers_select_clicked() {
    if (ui->ch_retro->isChecked())  // в ретро-режиме не доступно
        return;

    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Нажмите кнопку [Поиск] и выберите человека из списка.");
        return;
    }

    // проверим выделенную строку
    QModelIndexList indexes = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes.size()>0) {
        this->setCursor(Qt::WaitCursor);
        QModelIndex index = indexes.front();

        // данные застрахованного
        data_pers.id         = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();       // e.id
        data_pers.guid       = model_persons.data(model_persons.index(index.row(), 1), Qt::EditRole).toString();    // e.guid
        data_pers.note       = model_persons.data(model_persons.index(index.row(), 2), Qt::EditRole).toString();    // e.note
        data_pers.date_ins   = model_persons.data(model_persons.index(index.row(),74), Qt::EditRole).toDate();      // e.dt_ins
        data_pers.fam        = model_persons.data(model_persons.index(index.row(), 3), Qt::EditRole).toString();    // e.fam
        data_pers.im         = model_persons.data(model_persons.index(index.row(), 4), Qt::EditRole).toString();    // e.im
        data_pers.ot         = model_persons.data(model_persons.index(index.row(), 5), Qt::EditRole).toString();    // e.ot
        data_pers.sex        =(model_persons.data(model_persons.index(index.row(), 6), Qt::EditRole).isNull() ? 1 : model_persons.data(model_persons.index(index.row(), 6), Qt::EditRole).toInt());    // e.sex
        data_pers.date_birth = model_persons.data(model_persons.index(index.row(), 7), Qt::EditRole).toDate();      // e.date_birth
        data_pers.date_death = model_persons.data(model_persons.index(index.row(), 8), Qt::EditRole).toDate();      // e.date_death
        data_pers.snils      = model_persons.data(model_persons.index(index.row(), 9), Qt::EditRole).toString();    // e.snils
        data_pers.plc_birth  = model_persons.data(model_persons.index(index.row(),23), Qt::EditRole).toString();    // e.plc_birth
        data_pers.category   = model_persons.data(model_persons.index(index.row(),10), Qt::EditRole).toInt();       // e.category
        data_pers.bomj       =(model_persons.data(model_persons.index(index.row(),12), Qt::EditRole).isNull() ? 0 : model_persons.data(model_persons.index(index.row(),12), Qt::EditRole).toInt());    // e.bomj
        data_pers.phone_cell = model_persons.data(model_persons.index(index.row(),13), Qt::EditRole).toString();    // e.phone_cell
        data_pers.phone_code = model_persons.data(model_persons.index(index.row(),14), Qt::EditRole).toString();    // e.phone_code
        data_pers.phone_home = model_persons.data(model_persons.index(index.row(),15), Qt::EditRole).toString();    // e.phone_home
        data_pers.phone_work = model_persons.data(model_persons.index(index.row(),16), Qt::EditRole).toString();    // e.phone_work
        data_pers.email      = model_persons.data(model_persons.index(index.row(),17), Qt::EditRole).toString();    // e.email
        data_pers.polis_post_way= model_persons.data(model_persons.index(index.row(), 64), Qt::EditRole).toInt();   // e.polis_post_way
        if (data_pers.polis_post_way<0 || data_pers.polis_post_way>5)  data_pers.polis_post_way = 0;
        data_pers.oksm_birth = model_persons.data(model_persons.index(index.row(),18), Qt::EditRole).toInt();       // oksm_b
        // oksm_b_name
        data_pers.oksm_c     = model_persons.data(model_persons.index(index.row(),20), Qt::EditRole).toInt();       // oksm_c
        // oksm_c_name
        // firm.firm_name
        data_pers.id_reg_addr=(model_persons.data(model_persons.index(index.row(),25), Qt::EditRole).isNull() ? -1 : model_persons.data(model_persons.index(index.row(),25), Qt::EditRole).toInt());    // id_addr_reg
        data_pers.has_reg_addr= (data_pers.id_reg_addr>0);
        data_pers.reg_date   = model_persons.data(model_persons.index(index.row(),26), Qt::EditRole).toDate();      // date_reg
        data_pers.reg_text   = model_persons.data(model_persons.index(index.row(),81), Qt::EditRole).toString();    // date_reg
        data_pers.id_liv_addr=(model_persons.data(model_persons.index(index.row(),27), Qt::EditRole).isNull() ? -1 : model_persons.data(model_persons.index(index.row(),27), Qt::EditRole).toInt());    // id_addr_liv
        data_pers.has_liv_addr= (data_pers.id_liv_addr>0);
        data_pers.liv_text   = model_persons.data(model_persons.index(index.row(),82), Qt::EditRole).toString();    // date_reg
        data_pers.rep_id     =(model_persons.data(model_persons.index(index.row(),28), Qt::EditRole).isNull() ? -1 : model_persons.data(model_persons.index(index.row(),28), Qt::EditRole).toInt());    // rep_id
        data_pers.rep_fio    = model_persons.data(model_persons.index(index.row(),29), Qt::EditRole).toString();    // rep_fio
        data_pers.rep_relation=model_persons.data(model_persons.index(index.row(),30), Qt::EditRole).toInt();       // rep_relation
        QString dost         = model_persons.data(model_persons.index(index.row(),31), Qt::EditRole).toString() + "_______";
        data_pers.dost       = dost.left(6) ;
        data_pers.id_old     = model_persons.data(model_persons.index(index.row(),34), Qt::EditRole).toInt();       // po.id as id_old,
        data_pers.fam_old    = model_persons.data(model_persons.index(index.row(),35), Qt::EditRole).toString();    // old_fam,
        data_pers.has_fam_old= !(data_pers.fam_old.isEmpty());
        data_pers.im_old     = model_persons.data(model_persons.index(index.row(),36), Qt::EditRole).toString();    // old_im,
        data_pers.has_im_old= !(data_pers.im_old.isEmpty());
        data_pers.ot_old     = model_persons.data(model_persons.index(index.row(),37), Qt::EditRole).toString();    // old_ot,
        data_pers.has_ot_old= !(data_pers.ot_old.isEmpty());
        data_pers.date_birth_old= model_persons.data(model_persons.index(index.row(),38), Qt::EditRole).toDate();   // old_date_birth,
        data_pers.has_date_birth_old= data_pers.date_birth_old>QDate(1920,1,1);
        data_pers.plc_birth_old= model_persons.data(model_persons.index(index.row(),39), Qt::EditRole).toString();  // old_plc_birth,
        data_pers.has_plc_birth_old= !(data_pers.plc_birth_old.isEmpty());
        data_pers.enp_old    = model_persons.data(model_persons.index(index.row(),40), Qt::EditRole).toString();    // old_enp,
        data_pers.has_enp_old= !(data_pers.enp_old.isEmpty());
        data_pers.snils_old  = model_persons.data(model_persons.index(index.row(),41), Qt::EditRole).toString();    // old_snils,
        data_pers.has_snils_old= !(data_pers.snils_old.isEmpty());
        data_pers.sex_old    = model_persons.data(model_persons.index(index.row(),42), Qt::EditRole).toInt();       // old_sex,
        data_pers.has_sex_old= (data_pers.sex_old>0 && data_pers.sex_old<3);
        data_pers.dt_ins_old = model_persons.data(model_persons.index(index.row(),43), Qt::EditRole).toDateTime();  // old_dt_ins,
        data_pers.dt_upd_old = model_persons.data(model_persons.index(index.row(),44), Qt::EditRole).toDateTime();  // old_dt_upd,

        data_pers.assig_code_mo = model_persons.data(model_persons.index(index.row(),45), Qt::EditRole).toString(); // code_mo,
        data_pers.assig_code_mp = model_persons.data(model_persons.index(index.row(),46), Qt::EditRole).toString(); // code_mp,
        data_pers.assig_code_ms = model_persons.data(model_persons.index(index.row(),47), Qt::EditRole).toString(); // code_ms,
        data_pers.assig_snils_mt = model_persons.data(model_persons.index(index.row(),48), Qt::EditRole).toString();// snils_mt,
        data_pers.assig_type = model_persons.data(model_persons.index(index.row(),49), Qt::EditRole).toInt();       // assig_type,
        data_pers.assig_date = model_persons.data(model_persons.index(index.row(),50), Qt::EditRole).toDate();      // assig_date,
        data_pers.assig_status = model_persons.data(model_persons.index(index.row(),51), Qt::EditRole).toInt();    // assig_status,

        data_pers.id_udl = model_persons.data(model_persons.index(index.row(),63), Qt::EditRole).toInt();      // assig_date,
        data_pers.id_drp = model_persons.data(model_persons.index(index.row(),64), Qt::EditRole).toInt();      // assig_date,
        data_pers.id_polis = model_persons.data(model_persons.index(index.row(),65), Qt::EditRole).toInt();      // assig_date,
        data_pers.id_assig = model_persons.data(model_persons.index(index.row(),66), Qt::EditRole).toInt();      // assig_date,

        data_pers.date_ins = model_persons.data(model_persons.index(index.row(),76), Qt::EditRole).toDate();      // assig_date,

        //ui->combo_pers_assig_mo->setCurrentIndex(0);
        //ui->combo_pers_assig_mp->setCurrentIndex(0);
        //ui->combo_pers_assig_ms->setCurrentIndex(0);
        //ui->combo_pers_assig_mt->setCurrentIndex(0);
        ui->combo_pers_assig_type->setCurrentIndex(data_pers.assig_type);
        ui->date_pers_assig_date->setDate(data_pers.assig_date);

        // -----------------------
        // получим адресные данные
        // -----------------------

        // адрес регистрации
        QString sql_adr_reg = "select subj_name, dstr_name, city_name, nasp_name, strt_name, house, corp, quart "
                              " from addresses "
                              " where id=" + QString::number(data_pers.id_reg_addr) + "; ";
        QSqlQuery *query_adr_reg = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_adr_reg, "Чтение адреса регистрации", *query_adr_reg, true, db, data_app))
            QMessageBox::critical(this, "Непредвиденная ошибка", "При попытке прочитать адрес регистрации произошла непредвиденная ошибка.\n\nОперация отменена.");
        if (query_adr_reg->next()) {
            data_pers.reg_subj_text = query_adr_reg->value(0).toString();
            data_pers.reg_dstr_text = query_adr_reg->value(1).toString();
            data_pers.reg_city_text = query_adr_reg->value(2).toString();
            data_pers.reg_nasp_text = query_adr_reg->value(3).toString();
            data_pers.reg_strt_text = query_adr_reg->value(4).toString();
            data_pers.reg_hous      = query_adr_reg->value(5).toInt();
            data_pers.reg_corp      = query_adr_reg->value(6).toString();
            data_pers.reg_qart      = query_adr_reg->value(7).toString();
            if (data_pers.reg_city_text==data_pers.reg_nasp_text) {
                data_pers.reg_nasp_text="";
            }
        } else {
            data_pers.reg_subj_text = "";
            data_pers.reg_dstr_text = "";
            data_pers.reg_city_text = "";
            data_pers.reg_nasp_text = "";
            data_pers.reg_strt_text = "";
            data_pers.reg_hous      = 0;
            data_pers.reg_corp      = "";
            data_pers.reg_qart      = "";
        }
        delete query_adr_reg;

        // адрес проживания
        QString sql_adr_liv = "select subj_name, dstr_name, city_name, nasp_name, strt_name, house, corp, quart "
                              " from addresses "
                              " where id=" + QString::number(data_pers.id_liv_addr) + "; ";
        QSqlQuery *query_adr_liv = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_adr_liv, "Чтение адреса проживания", *query_adr_liv, true, db, data_app))
            QMessageBox::critical(this, "Непредвиденная ошибка", "При попытке прочитать адрес проживания произошла непредвиденная ошибка.\n\nОперация отменена.");
        if (query_adr_liv->next()) {
            data_pers.liv_subj_text = query_adr_liv->value(0).toString();
            data_pers.liv_dstr_text = query_adr_liv->value(1).toString();
            data_pers.liv_city_text = query_adr_liv->value(2).toString();
            data_pers.liv_nasp_text = query_adr_liv->value(3).toString();
            data_pers.liv_strt_text = query_adr_liv->value(4).toString();
            data_pers.liv_hous      = query_adr_liv->value(5).toInt();
            data_pers.liv_corp      = query_adr_liv->value(6).toString();
            data_pers.liv_qart      = query_adr_liv->value(7).toString();
            if (data_pers.liv_city_text==data_pers.liv_nasp_text) {
                data_pers.liv_nasp_text="";
            }
        } else {
            data_pers.liv_subj_text = "";
            data_pers.liv_dstr_text = "";
            data_pers.liv_city_text = "";
            data_pers.liv_nasp_text = "";
            data_pers.liv_strt_text = "";
            data_pers.liv_hous      = 0;
            data_pers.liv_corp      = "";
            data_pers.liv_qart      = "";
        }
        delete query_adr_liv;

        on_ch_pers_pan_reg_toggled(true);

        // скроем таблицу персон, покажем панель свойств персоны и панель документов
        ui->show_pers_tabl->setChecked(false);
        ui->show_pers_data->setChecked(true);
        ui->show_pers_docs->setChecked(true);
        on_show_pers_tabl_clicked(false);
        on_show_pers_data_clicked(true);
        on_show_pers_docs_clicked(true);
        ui->show_pers_tabl->setEnabled(false);
        ui->show_pers_data->setEnabled(true);
        ui->show_pers_docs->setEnabled(true);
        // поначалу не активно
        ui->group_person_data->setChecked(false);
        on_group_person_data_clicked(false);
        ui->group_person_docs->setChecked(false);
        on_group_person_docs_clicked(false);

        refresh_pers_docs();
        refresh_pers_data();
        refresh_pers_photo();
        refresh_pers_sign();
        this->setCursor(Qt::ArrowCursor);

        ui->ln_pers_pan_fam->setFocus();

        on_ch_person_clicked(ui->ch_person->isChecked());
        ui->ch_person_old->setChecked( !(data_pers.fam_old.isEmpty() &&
                                         data_pers.im_old.isEmpty() &&
                                         data_pers.ot_old.isEmpty() &&
                                         data_pers.sex_old!=1 && data_pers.sex_old!=2 &&
                                         data_pers.date_birth_old<QDate(1920,1,1) &&
                                         data_pers.snils_old.isEmpty() &&
                                         data_pers.plc_birth_old.isEmpty()) );
        on_ch_person_old_clicked(ui->ch_person_old->isChecked());
        ui->ch_rep->setChecked( !(data_pers.rep_fio.isEmpty()) );
        ui->combo_pers_pan_rep_rel->setCurrentIndex(data_pers.rep_relation);
        ui->line_pers_pan_rep->setText(data_pers.rep_fio);
        on_ch_rep_clicked(ui->ch_rep->isChecked());
        ui->ch_country->setChecked(true);
        on_ch_country_clicked(ui->ch_country->isChecked());
        ui->ch_pers_pan_reg->setChecked( data_pers.has_reg_addr );
        on_ch_pers_pan_reg_clicked(ui->ch_pers_pan_reg->isChecked());
        ui->ch_pers_pan_liv->setChecked( data_pers.has_liv_addr );
        on_ch_pers_pan_liv_clicked(ui->ch_pers_pan_liv->isChecked());
        ui->ch_phones->setChecked(true);
        on_ch_phones_clicked(ui->ch_phones->isChecked());
        ui->ch_docs->setChecked(true);
        on_ch_docs_clicked(ui->ch_docs->isChecked());
        ui->ch_photo->setChecked(true);
        on_ch_photo_clicked(ui->ch_photo->isChecked());
        ui->ch_assig->setChecked(true);
        on_ch_assig_clicked(ui->ch_assig->isChecked());

        ui->group_person_data->setChecked(false);
        on_group_person_data_clicked(false);
        ui->group_person_docs->setChecked(false);
        on_group_person_docs_clicked(false);

        b_need_save(false);
        on_bn_docs_cansel_clicked();

        on_split_main_splitterMoved(0,1);

        ui->bn_pers_pan_old_data->setText(data_pers.id_old>0 ? "Удалить старые данные" : "Добавить старые данные");
        ui->bn_pers_pan_old_data->setChecked(data_pers.id_old>0);

        refresh_pers_eaes();

    } else {
        QMessageBox::warning(this, "Ничего не выбрано!", "Ничего не выбрано!");
    }
}

void persons_wnd::on_tab_persons_activated(const QModelIndex &index) {
    on_bn_pers_select_clicked();
}

// активация/отключение поля отчества
void persons_wnd::on_ch_pers_pan_ot_stateChanged ( int state ) {
    ui->ln_pers_pan_ot->setEnabled(state>0);
    if (state==0)
        ui->ln_pers_pan_ot->clear();
}

// активация/отключение поля ФИО представителя
void persons_wnd::on_pan_rep_toggled(bool arg1) {
    ui->line_pers_pan_rep->setEnabled(arg1);
    ui->bn_pers_pan_rep->setEnabled(arg1);
    if (!arg1)
        ui->line_pers_pan_rep->clear();
}

// активация/отключение поля СНИЛС
void persons_wnd::on_ch_pers_pan_snils_stateChanged ( int state ) {
    ui->line_pers_pan_snils->setEnabled(state>0);
    if (state==0)
        ui->line_pers_pan_snils->clear();
}

// активация/отключение поля даты смерти
void persons_wnd::on_ch_pers_pan_death_stateChanged ( int state ) {
    ui->date_pers_pan_death->setVisible(state>0);
    ui->date_pers_pan_death->setEnabled(state>0);
    if (state==0)
        ui->date_pers_pan_death->setDate(QDate(1900,1,1));
}

// активация полей КЛАДР адреса регистрации
void persons_wnd::on_ch_pers_pan_reg_stateChanged ( int state ) {
    ui->lab_pers_pan_bomj->setVisible(state==0);
    ui->pan_address_reg->setEnabled(state>0);
    if (state==0) {
        ui->date_pers_pan_reg->setDate(QDate(1900,1,1));
        ui->ln_pers_pan_reg_subj->clear();
        ui->ln_pers_pan_reg_dstr->clear();
        ui->ln_pers_pan_reg_city->clear();
        ui->ln_pers_pan_reg_nasp->clear();
        ui->ln_pers_pan_reg_strt->clear();
        ui->ln_pers_pan_reg_hous->clear();
        ui->ln_pers_pan_reg_corp->clear();
        ui->ln_pers_pan_reg_qart->clear();
        ui->combo_pers_pan_reg_subj->setCurrentIndex(0);
        ui->combo_pers_pan_reg_dstr->setCurrentIndex(0);
        ui->combo_pers_pan_reg_city->setCurrentIndex(0);
        ui->combo_pers_pan_reg_nasp->setCurrentIndex(0);
        ui->combo_pers_pan_reg_strt->setCurrentIndex(0);
        ui->combo_pers_pan_reg_hous->setCurrentIndex(0);
    }    
    /*ui->lab_pers_pan_reg->setEnabled(state>0);
    ui->date_pers_pan_reg->setEnabled(state>0);
    ui->ln_pers_pan_reg_subj->setEnabled(state>0);
    ui->ln_pers_pan_reg_dstr->setEnabled(state>0);
    ui->ln_pers_pan_reg_city->setEnabled(state>0);
    ui->ln_pers_pan_reg_nasp->setEnabled(state>0);
    ui->ln_pers_pan_reg_strt->setEnabled(state>0);
    ui->ln_pers_pan_reg_subj->setEnabled(state>0);
    ui->ln_pers_pan_reg_hous->setEnabled(state>0);
    ui->ln_pers_pan_reg_corp->setEnabled(state>0);
    ui->ln_pers_pan_reg_qart->setEnabled(state>0);
    ui->lab_pers_pan_reg_header1->setEnabled(state>0);
    ui->lab_pers_pan_reg_header2->setEnabled(state>0);
    ui->lab_pers_pan_reg_side1->setEnabled(state>0);
    ui->lab_pers_pan_reg_side2->setEnabled(state>0);
    ui->lab_pers_pan_reg_side3->setEnabled(state>0);
    ui->lab_pers_pan_reg_side4->setEnabled(state>0);
    ui->lab_pers_pan_reg_side5->setEnabled(state>0);
    ui->lab_pers_pan_reg_side6->setEnabled(state>0);
    ui->lab_pers_pan_reg_side7->setEnabled(state>0);
    ui->lab_pers_pan_reg_side8->setEnabled(state>0);
    ui->ln_pers_pan_reg_subj->setEnabled(state>0);
    ui->ln_pers_pan_reg_dstr->setEnabled(state>0);
    ui->ln_pers_pan_reg_city->setEnabled(state>0);
    ui->ln_pers_pan_reg_nasp->setEnabled(state>0);
    ui->ln_pers_pan_reg_strt->setEnabled(state>0);
    ui->ln_pers_pan_reg_hous->setEnabled(state>0);
    ui->ln_pers_pan_reg_corp->setEnabled(state>0);
    ui->ln_pers_pan_reg_qart->setEnabled(state>0);
    ui->combo_pers_pan_reg_subj->setEnabled(state>0);
    ui->combo_pers_pan_reg_dstr->setEnabled(state>0);
    ui->combo_pers_pan_reg_city->setEnabled(state>0);
    ui->combo_pers_pan_reg_nasp->setEnabled(state>0);
    ui->combo_pers_pan_reg_strt->setEnabled(state>0);
    ui->ln_pers_pan_reg_index->setEnabled(state>0);*/
}

// активация полей КЛАДР адреса проживания
void persons_wnd::on_ch_pers_pan_liv_stateChanged ( int state ) {
    ui->pan_address_liv->setEnabled(state>0);
    if (state==0) {
        ui->ln_pers_pan_liv_subj->clear();
        ui->ln_pers_pan_liv_dstr->clear();
        ui->ln_pers_pan_liv_city->clear();
        ui->ln_pers_pan_liv_nasp->clear();
        ui->ln_pers_pan_liv_strt->clear();
        ui->ln_pers_pan_liv_hous->clear();
        ui->ln_pers_pan_liv_corp->clear();
        ui->ln_pers_pan_liv_qart->clear();
        ui->combo_pers_pan_liv_subj->setCurrentIndex(0);
        ui->combo_pers_pan_liv_dstr->setCurrentIndex(0);
        ui->combo_pers_pan_liv_city->setCurrentIndex(0);
        ui->combo_pers_pan_liv_nasp->setCurrentIndex(0);
        ui->combo_pers_pan_liv_strt->setCurrentIndex(0);
        ui->combo_pers_pan_liv_hous->setCurrentIndex(0);
    }
    /*ui->ln_pers_pan_liv_subj->setEnabled(state>0);
    ui->ln_pers_pan_liv_dstr->setEnabled(state>0);
    ui->ln_pers_pan_liv_city->setEnabled(state>0);
    ui->ln_pers_pan_liv_nasp->setEnabled(state>0);
    ui->ln_pers_pan_liv_strt->setEnabled(state>0);
    ui->ln_pers_pan_liv_subj->setEnabled(state>0);
    ui->ln_pers_pan_liv_hous->setEnabled(state>0);
    ui->ln_pers_pan_liv_corp->setEnabled(state>0);
    ui->ln_pers_pan_liv_qart->setEnabled(state>0);
    ui->lab_pers_pan_liv_header1->setEnabled(state>0);
    ui->lab_pers_pan_liv_header2->setEnabled(state>0);
    ui->lab_pers_pan_liv_side1->setEnabled(state>0);
    ui->lab_pers_pan_liv_side2->setEnabled(state>0);
    ui->lab_pers_pan_liv_side3->setEnabled(state>0);
    ui->lab_pers_pan_liv_side4->setEnabled(state>0);
    ui->lab_pers_pan_liv_side5->setEnabled(state>0);
    ui->lab_pers_pan_liv_side6->setEnabled(state>0);
    ui->lab_pers_pan_liv_side7->setEnabled(state>0);
    ui->lab_pers_pan_liv_side8->setEnabled(state>0);
    ui->ln_pers_pan_liv_subj->setEnabled(state>0);
    ui->ln_pers_pan_liv_dstr->setEnabled(state>0);
    ui->ln_pers_pan_liv_city->setEnabled(state>0);
    ui->ln_pers_pan_liv_nasp->setEnabled(state>0);
    ui->ln_pers_pan_liv_strt->setEnabled(state>0);
    ui->ln_pers_pan_liv_hous->setEnabled(state>0);
    ui->ln_pers_pan_liv_corp->setEnabled(state>0);
    ui->ln_pers_pan_liv_qart->setEnabled(state>0);
    ui->combo_pers_pan_liv_subj->setEnabled(state>0);
    ui->combo_pers_pan_liv_dstr->setEnabled(state>0);
    ui->combo_pers_pan_liv_city->setEnabled(state>0);
    ui->combo_pers_pan_liv_nasp->setEnabled(state>0);
    ui->combo_pers_pan_liv_strt->setEnabled(state>0);
    ui->ln_pers_pan_liv_index->setEnabled(state>0);*/
}

// синхронизация полей ОКСМ
void persons_wnd::on_spin_pers_pan_oksm_r_valueChanged(int arg1) {
    ui->combo_pers_pan_oksm_rname->setCurrentIndex( ui->combo_pers_pan_oksm_rname->findData(arg1));
    ui->lab_pers_pan_oksm->setText(ui->combo_pers_pan_oksm_rname->currentText() + "; " + ui->combo_pers_pan_oksm_cname->currentText());
    //data_pers.oksm_birth = arg1;
}
void persons_wnd::on_spin_pers_pan_oksm_c_valueChanged(int arg1) {
    ui->combo_pers_pan_oksm_cname->setCurrentIndex( ui->combo_pers_pan_oksm_cname->findData(arg1));
    ui->lab_pers_pan_oksm->setText(ui->combo_pers_pan_oksm_rname->currentText() + "; " + ui->combo_pers_pan_oksm_cname->currentText());
    ui->ch_stateless->setChecked(arg1<=0);
    //data_pers.oksm_c = arg1;
}
void persons_wnd::on_combo_pers_pan_oksm_rname_currentIndexChanged(int index) {
    ui->spin_pers_pan_oksm_r->setValue(ui->combo_pers_pan_oksm_rname->currentData().toInt());
}
void persons_wnd::on_combo_pers_pan_oksm_cname_currentIndexChanged(int index) {
    ui->spin_pers_pan_oksm_c->setValue(ui->combo_pers_pan_oksm_cname->currentData().toInt());
    ui->ch_stateless->setChecked(index<0);
}


// синхронизация полей КЛАДР адреса регистрации
/*void persons_wnd::on_ln_pers_pan_reg_subj_textChanged(const QString &arg1) {
    int i = ui->combo_pers_pan_reg_subj->findData(arg1.toInt());
    ui->combo_pers_pan_reg_subj->setCurrentIndex( i );
}
void persons_wnd::on_ln_pers_pan_reg_dstr_textChanged(const QString &arg1) {
    int i = ui->combo_pers_pan_reg_dstr->findData(arg1.toInt());
    ui->combo_pers_pan_reg_dstr->setCurrentIndex( i );
}
void persons_wnd::on_ln_pers_pan_reg_city_textChanged(const QString &arg1) {
    int i = ui->combo_pers_pan_reg_city->findData(arg1.toInt());
    ui->combo_pers_pan_reg_city->setCurrentIndex( i );
}
void persons_wnd::on_ln_pers_pan_reg_nasp_textChanged(const QString &arg1) {
    int i = ui->combo_pers_pan_reg_nasp->findData(arg1.toInt());
    ui->combo_pers_pan_reg_nasp->setCurrentIndex( i );
}
void persons_wnd::on_ln_pers_pan_reg_strt_textChanged(const QString &arg1) {
    int i = ui->combo_pers_pan_reg_strt->findData(arg1.toInt());
    ui->combo_pers_pan_reg_strt->setCurrentIndex( i );
}*/
void persons_wnd::on_combo_pers_pan_reg_subj_currentIndexChanged(int index) {
    if (index>=0) {
        ui->ln_pers_pan_reg_subj->setText(QString::number(ui->combo_pers_pan_reg_subj->itemData(index).toInt()));
        // код ОКАТО
        QString ocato = okato_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex()));
        ocato = ("00000000000" + ocato);
        ocato = ocato.right(11);
        ocato = ocato.left(5);
        ui->lab_pers_pan_reg_ocato->setText(ocato);
        // полный код ОКАТО
        QString ocato_full = QString("00000000000") + okato_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex()));
        ocato_full = ocato_full.right(11);
        ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
        // индекс
        ui->ln_pers_pan_reg_index->setText(index_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex())));
    }
}
void persons_wnd::on_combo_pers_pan_reg_dstr_currentIndexChanged(int index) {
    if (index>=0) {
        ui->ln_pers_pan_reg_dstr->setText(QString::number(ui->combo_pers_pan_reg_dstr->itemData(index).toInt()));
        // полный код ОКАТО
        if (!okato_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty()) {
            QString ocato_full = QString("00000000000") + okato_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex()));
            ocato_full = ocato_full.right(11);
            ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
        } else {
            QString ocato_full = QString("00000000000") + okato_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex()));
            ocato_full = ocato_full.right(11);
            ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
        }
        // индекс
        if (!index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty()) {
            if (!index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())));
        } else {
            if (!index_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex())).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex())));
        }
    }
}
void persons_wnd::on_combo_pers_pan_reg_city_currentIndexChanged(int index) {
    if (index>=0) {
        ui->ln_pers_pan_reg_city->setText(QString::number(ui->combo_pers_pan_reg_city->itemData(index).toInt()));
        // полный код ОКАТО
        if (!okato_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())).isEmpty()) {
            QString ocato_full = QString("00000000000") + okato_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex()));
            ocato_full = ocato_full.right(11);
            ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
        } else if (!okato_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty()) {
            QString ocato_full = QString("00000000000") + okato_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex()));
            ocato_full = ocato_full.right(11);
            ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
        } else {
            QString ocato_full = QString("00000000000") + okato_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex()));
            ocato_full = ocato_full.right(11);
            ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
        }
        // индекс
        if (!index_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())).isEmpty()) {
            if (!index_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())));
        } else if (!index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty()) {
            if (!index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())));
        } else {
            if (!index_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex())).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex())));
        }
    }
}
void persons_wnd::on_combo_pers_pan_reg_nasp_currentIndexChanged(int index) {
    if (index>=0) {
        ui->ln_pers_pan_reg_nasp->setText(QString::number(ui->combo_pers_pan_reg_nasp->itemData(index).toInt()));
        // полный код ОКАТО
        if (!okato_reg_nasp.at(max(ui->combo_pers_pan_reg_nasp->currentIndex(),0)).isEmpty()) {
            QString ocato_full = QString("00000000000") + okato_reg_nasp.at(max(ui->combo_pers_pan_reg_nasp->currentIndex(),0));
            ocato_full = ocato_full.right(11);
            ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
        } else if (!okato_reg_city.at(max(ui->combo_pers_pan_reg_city->currentIndex(),0)).isEmpty()) {
            QString ocato_full = QString("00000000000") + okato_reg_city.at(max(ui->combo_pers_pan_reg_city->currentIndex(),0));
            ocato_full = ocato_full.right(11);
            ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
        } else if (!okato_reg_dstr.at(max(ui->combo_pers_pan_reg_dstr->currentIndex(),0)).isEmpty()) {
            QString ocato_full = QString("00000000000") + okato_reg_dstr.at(max(ui->combo_pers_pan_reg_dstr->currentIndex(),0));
            ocato_full = ocato_full.right(11);
            ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
        } else {
            QString ocato_full = QString("00000000000") + okato_reg_subj.at(max(ui->combo_pers_pan_reg_subj->currentIndex(),0));
            ocato_full = ocato_full.right(11);
            ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
        }
        // индекс
        if (!index_reg_nasp.at(max(ui->combo_pers_pan_reg_nasp->currentIndex(),0)).isEmpty()) {
            if (!index_reg_nasp.at(max(ui->combo_pers_pan_reg_nasp->currentIndex(),0)).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_nasp.at(max(ui->combo_pers_pan_reg_nasp->currentIndex(),0)));
        } else if (!index_reg_city.at(max(ui->combo_pers_pan_reg_city->currentIndex(),0)).isEmpty()) {
            if (!index_reg_city.at(max(ui->combo_pers_pan_reg_city->currentIndex(),0)).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_city.at(max(ui->combo_pers_pan_reg_city->currentIndex(),0)));
        } else if (!index_reg_dstr.at(max(ui->combo_pers_pan_reg_dstr->currentIndex(),0)).isEmpty()) {
            if (!index_reg_dstr.at(max(ui->combo_pers_pan_reg_dstr->currentIndex(),0)).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_dstr.at(max(ui->combo_pers_pan_reg_dstr->currentIndex(),0)));
        } else {
            if (!index_reg_subj.at(max(ui->combo_pers_pan_reg_subj->currentIndex(),0)).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_subj.at(max(ui->combo_pers_pan_reg_subj->currentIndex(),0)));
        }
    }
}
void persons_wnd::on_combo_pers_pan_reg_strt_currentIndexChanged(int index) {
    if (index>=0) {
        ui->ln_pers_pan_reg_strt->setText(QString::number(ui->combo_pers_pan_reg_strt->itemData(index).toInt()));
        int i = ui->combo_pers_pan_reg_strt->currentIndex();
        QString s = ui->combo_pers_pan_reg_strt->currentText();
        if (i!=index)
            ui->combo_pers_pan_reg_strt->setCurrentIndex(index);
        // индекс
        if (!index_reg_strt.at(max(ui->combo_pers_pan_reg_strt->currentIndex(),0)).isEmpty()) {
            if (!index_reg_strt.at(max(ui->combo_pers_pan_reg_strt->currentIndex(),0)).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_strt.at(max(ui->combo_pers_pan_reg_strt->currentIndex(),0)));
        } if (!index_reg_nasp.at(max(ui->combo_pers_pan_reg_nasp->currentIndex(),0)).isEmpty()) {
            if (!index_reg_nasp.at(max(ui->combo_pers_pan_reg_nasp->currentIndex(),0)).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_nasp.at(max(ui->combo_pers_pan_reg_nasp->currentIndex(),0)));
        } else if (!index_reg_city.at(max(ui->combo_pers_pan_reg_city->currentIndex(),0)).isEmpty()) {
            if (!index_reg_city.at(max(ui->combo_pers_pan_reg_city->currentIndex(),0)).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_city.at(max(ui->combo_pers_pan_reg_city->currentIndex(),0)));
        } else if (!index_reg_dstr.at(max(ui->combo_pers_pan_reg_dstr->currentIndex(),0)).isEmpty()) {
            if (!index_reg_dstr.at(max(ui->combo_pers_pan_reg_dstr->currentIndex(),0)).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_dstr.at(max(ui->combo_pers_pan_reg_dstr->currentIndex(),0)));
        } else {
            if (!index_reg_subj.at(max(ui->combo_pers_pan_reg_subj->currentIndex(),0)).isEmpty())
                ui->ln_pers_pan_reg_index->setText(index_reg_subj.at(max(ui->combo_pers_pan_reg_subj->currentIndex(),0)));
        }
    }
}
void persons_wnd::on_combo_pers_pan_reg_subj_activated(int index) {
    refresh_pers_pan_fiass_reg(-1,0,0,0,0,"");
/*    // код ОКАТО
    //ui->lab_pers_pan_reg_ocato->setText(QString(("00000000000") + okato_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex()))).right(11).left(5));
    QString ocato = okato_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex()));
    ocato = ("00000000000" + ocato);
    ocato = ocato.right(11);
    ocato = ocato.left(5);
    ui->lab_pers_pan_reg_ocato->setText(ocato);
    // полный код ОКАТО
    QString ocato_full = QString("00000000000") + okato_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex()));
    ocato_full = ocato_full.right(11);
    ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
    // индекс
    ui->ln_pers_pan_reg_index->setText(index_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex())));
    b_need_save();*/
}
void persons_wnd::on_combo_pers_pan_reg_dstr_activated(int index) {
    refresh_pers_pan_fiass_reg(-1,-1,0,0,0,"");
/*    // полный код ОКАТО
    if (!okato_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty()) {
        QString ocato_full = QString("00000000000") + okato_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex()));
        ocato_full = ocato_full.right(11);
        ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
    } else {
        QString ocato_full = QString("00000000000") + okato_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex()));
        ocato_full = ocato_full.right(11);
        ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
    }
    // индекс
    if (!index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty()) {
        if (!index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())));
    } else {
        if (!index_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex())).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex())));
    }
    b_need_save();*/
}
void persons_wnd::on_combo_pers_pan_reg_city_activated(int index) {
    refresh_pers_pan_fiass_reg(-1,-1,-1,0,0,"");
/*    // полный код ОКАТО
    if (!okato_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())).isEmpty()) {
        QString ocato_full = QString("00000000000") + okato_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex()));
        ocato_full = ocato_full.right(11);
        ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
    } else if (!okato_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty()) {
        QString ocato_full = QString("00000000000") + okato_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex()));
        ocato_full = ocato_full.right(11);
        ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
    } else {
        QString ocato_full = QString("00000000000") + okato_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex()));
        ocato_full = ocato_full.right(11);
        ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
    }
    // индекс
    if (!index_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())).isEmpty()) {
        if (!index_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())));
    } else if (!index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty()) {
        if (!index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())));
    } else {
        if (!index_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex())).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex())));
    }
    b_need_save();*/
}
void persons_wnd::on_combo_pers_pan_reg_nasp_activated(int index) {
    refresh_pers_pan_fiass_reg(-1,-1,-1,-1,0,"");
/*    // полный код ОКАТО
    if (!okato_reg_nasp.at(max(0,ui->combo_pers_pan_reg_nasp->currentIndex())).isEmpty()) {
        QString ocato_full = QString("00000000000") + okato_reg_nasp.at(max(0,ui->combo_pers_pan_reg_nasp->currentIndex()));
        ocato_full = ocato_full.right(11);
        ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
    } else if (!okato_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())).isEmpty()) {
        QString ocato_full = QString("00000000000") + okato_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex()));
        ocato_full = ocato_full.right(11);
        ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
    } else if (!okato_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty()) {
        QString ocato_full = QString("00000000000") + okato_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex()));
        ocato_full = ocato_full.right(11);
        ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
    } else {
        QString ocato_full = QString("00000000000") + okato_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex()));
        ocato_full = ocato_full.right(11);
        ui->lab_pers_pan_reg_ocato_full->setText(ocato_full);
    }
    // индекс
    if (!index_reg_nasp.at(max(0,ui->combo_pers_pan_reg_nasp->currentIndex())).isEmpty()) {
        if (!index_reg_nasp.at(max(0,ui->combo_pers_pan_reg_nasp->currentIndex())).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_nasp.at(max(0,ui->combo_pers_pan_reg_nasp->currentIndex())));
    } else if (!index_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())).isEmpty()) {
        if (!index_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())));
    } else if (!index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty()) {
        if (!index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())));
    } else {
        if (!index_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex())).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex())));
    }
    b_need_save();*/
}
void persons_wnd::on_combo_pers_pan_reg_strt_activated(int index) {
    refresh_pers_pan_fiass_reg(-1,-1,-1,-1,-1,"");
/*    // индекс
    if (!index_reg_strt.at(max(ui->combo_pers_pan_reg_strt->currentIndex(),0)).trimmed().isEmpty()) {
        if (!index_reg_strt.at(max(ui->combo_pers_pan_reg_strt->currentIndex(),0)).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_strt.at(max(ui->combo_pers_pan_reg_strt->currentIndex(),0)));
    } else if (!index_reg_nasp.at(max(ui->combo_pers_pan_reg_nasp->currentIndex(),0)).trimmed().isEmpty()) {
        if (!index_reg_nasp.at(max(ui->combo_pers_pan_reg_nasp->currentIndex(),0)).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_nasp.at(max(ui->combo_pers_pan_reg_nasp->currentIndex(),0)));
    } else if (!index_reg_city.at(max(ui->combo_pers_pan_reg_city->currentIndex(),0)).trimmed().isEmpty()) {
        if (!index_reg_city.at(max(ui->combo_pers_pan_reg_city->currentIndex(),0)).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_city.at(max(ui->combo_pers_pan_reg_city->currentIndex(),0)));
    } else if (!index_reg_dstr.at(max(ui->combo_pers_pan_reg_dstr->currentIndex(),0)).trimmed().isEmpty()) {
        if (!index_reg_dstr.at(max(ui->combo_pers_pan_reg_dstr->currentIndex(),0)).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_dstr.at(max(ui->combo_pers_pan_reg_dstr->currentIndex(),0)));
    } else {
        if (!index_reg_subj.at(max(ui->combo_pers_pan_reg_subj->currentIndex(),0)).isEmpty())
            ui->ln_pers_pan_reg_index->setText(index_reg_subj.at(max(ui->combo_pers_pan_reg_subj->currentIndex(),0)));
    }
    b_need_save();*/
}


// синхронизация полей КЛАДР адреса проживания
/*void persons_wnd::on_ln_pers_pan_liv_subj_textChanged(const QString &arg1) {
    int i = ui->combo_pers_pan_liv_subj->findData(arg1.toInt());
    ui->combo_pers_pan_liv_subj->setCurrentIndex( i );
}
void persons_wnd::on_ln_pers_pan_liv_dstr_textChanged(const QString &arg1) {
    int i = ui->combo_pers_pan_liv_dstr->findData(arg1.toInt());
    ui->combo_pers_pan_liv_dstr->setCurrentIndex( i );
}
void persons_wnd::on_ln_pers_pan_liv_city_textChanged(const QString &arg1) {
    int i = ui->combo_pers_pan_liv_city->findData(arg1.toInt());
    ui->combo_pers_pan_liv_city->setCurrentIndex( i );
}
void persons_wnd::on_ln_pers_pan_liv_nasp_textChanged(const QString &arg1) {
    int i = ui->combo_pers_pan_liv_nasp->findData(arg1.toInt());
    ui->combo_pers_pan_liv_nasp->setCurrentIndex( i );
}
void persons_wnd::on_ln_pers_pan_liv_strt_textChanged(const QString &arg1) {
    int i = ui->combo_pers_pan_liv_strt->findData(arg1.toInt());
    ui->combo_pers_pan_liv_strt->setCurrentIndex( i );
}*/
void persons_wnd::on_combo_pers_pan_liv_subj_currentIndexChanged(int index) {
    if (index>=0) {
        ui->ln_pers_pan_liv_subj->setText(QString::number(ui->combo_pers_pan_liv_subj->itemData(index).toInt()));
        // код ОКАТО
        ui->lab_pers_pan_liv_ocato->setText(QString(("00000000000") + okato_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex())).right(11).left(5));
        // полный код ОКАТО
        ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex())).right(11));
        // индекс
        ui->ln_pers_pan_liv_index->setText(index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()));
    }
}
void persons_wnd::on_combo_pers_pan_liv_dstr_currentIndexChanged(int index) {
    if (index>=0) {
        ui->ln_pers_pan_liv_dstr->setText(QString::number(ui->combo_pers_pan_liv_dstr->itemData(index).toInt()));
        // полный код ОКАТО
        if (!okato_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
            ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex()))).right(11));
        } else {
            ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex())).right(11));
        }
        // индекс
        if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
            if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())));
        } else {
            if (!index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()));
        }
    }
}
void persons_wnd::on_combo_pers_pan_liv_city_currentIndexChanged(int index) {
    if (index>=0) {
        ui->ln_pers_pan_liv_city->setText(QString::number(ui->combo_pers_pan_liv_city->itemData(index).toInt()));
        // полный код ОКАТО
        if (!okato_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty()) {
            ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex()))).right(11));
        } else if (!okato_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
            ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex()))).right(11));
        } else {
            ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex())).right(11));
        }
        // индекс
        if (!index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty()) {
            if (!index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())));
        } else if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
            if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())));
        } else {
            if (!index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()));
        }
    }
}
void persons_wnd::on_combo_pers_pan_liv_nasp_currentIndexChanged(int index) {
    if (index>=0) {
        ui->ln_pers_pan_liv_nasp->setText(QString::number(ui->combo_pers_pan_liv_nasp->itemData(index).toInt()));
        // полный код ОКАТО
        if (!okato_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())).isEmpty()) {
            ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex()))).right(11));
        } else if (!okato_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty()) {
            ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex()))).right(11));
        } else if (!okato_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
            ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex()))).right(11));
        } else {
            ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex())).right(11));
        }
        // индекс
        if (!index_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())).isEmpty()) {
            if (!index_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())));
        } else if (!index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty()) {
            if (!index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())));
        } else if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
            if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())));
        } else {
            if (!index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()));
        }
    }
}
void persons_wnd::on_combo_pers_pan_liv_strt_currentIndexChanged(int index) {
    if (index>=0) {
        ui->ln_pers_pan_liv_strt->setText(QString::number(ui->combo_pers_pan_liv_strt->itemData(index).toInt()));
        // индекс
        if (!index_liv_strt.at(ui->combo_pers_pan_liv_strt->currentIndex()).isEmpty()) {
            if (!index_liv_strt.at(ui->combo_pers_pan_liv_strt->currentIndex()).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_strt.at(ui->combo_pers_pan_liv_strt->currentIndex()));
        } else if (!index_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())).isEmpty()) {
            if (!index_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())));
        } else if (!index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty()) {
            if (!index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())));
        } else if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
            if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())));
        } else {
            if (!index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()).isEmpty())
                ui->ln_pers_pan_liv_index->setText(index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()));
        }
    }
}
void persons_wnd::on_combo_pers_pan_liv_subj_activated(int index) {
    refresh_pers_pan_fiass_liv(-1,0,0,0,0,"");
    // код ОКАТО
    ui->lab_pers_pan_liv_ocato->setText(QString(("00000000000") + okato_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex())).right(11).left(5));
    // полный код ОКАТО
    ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex())).right(11));
    // индекс
    ui->ln_pers_pan_liv_index->setText(index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()));
    b_need_save();
}
void persons_wnd::on_combo_pers_pan_liv_dstr_activated(int index) {
    refresh_pers_pan_fiass_liv(-1,-1,0,0,0,"");
    // полный код ОКАТО
    if (!okato_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
        ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex()))).right(11));
    } else {
        ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex())).right(11));
    }
    // индекс
    if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
        if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())));
    } else {
        if (!index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()));
    }
    b_need_save();
}
void persons_wnd::on_combo_pers_pan_liv_city_activated(int index) {
    refresh_pers_pan_fiass_liv(-1,-1,-1,0,0,"");
    // полный код ОКАТО
    if (!okato_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty()) {
        ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex()))).right(11));
    } else if (!okato_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
        ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex()))).right(11));
    } else {
        ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex())).right(11));
    }
    // индекс
    if (!index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty()) {
        if (!index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())));
    } else if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
        if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())));
    } else {
        if (!index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()));
    }
    b_need_save();
}
void persons_wnd::on_combo_pers_pan_liv_nasp_activated(int index) {
    refresh_pers_pan_fiass_liv(-1,-1,-1,-1,0,"");
    // полный код ОКАТО
    if (!okato_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())).isEmpty()) {
        ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex()))).right(11));
    } else if (!okato_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty()) {
        ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex()))).right(11));
    } else if (!okato_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
        ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex()))).right(11));
    } else {
        ui->lab_pers_pan_liv_ocato_full->setText(QString(("00000000000") + okato_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex())).right(11));
    }
    // индекс
    if (!index_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())).isEmpty()) {
        if (!index_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())));
    } else if (!index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty()) {
        if (!index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())));
    } else if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
        if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())));
    } else {
        if (!index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()));
    }
    b_need_save();
}
void persons_wnd::on_combo_pers_pan_liv_strt_activated(int index) {
    refresh_pers_pan_fiass_liv(-1,-1,-1,-1,-1,"");
    // индекс
    if (!index_liv_strt.at(ui->combo_pers_pan_liv_strt->currentIndex()).isEmpty()) {
        if (!index_liv_strt.at(ui->combo_pers_pan_liv_strt->currentIndex()).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_strt.at(ui->combo_pers_pan_liv_strt->currentIndex()));
    } else if (!index_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())).isEmpty()) {
        if (!index_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())));
    } else if (!index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty()) {
        if (!index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())));
    } else if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
        if (!index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())));
    } else {
        if (!index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()).isEmpty())
            ui->ln_pers_pan_liv_index->setText(index_liv_subj.at(ui->combo_pers_pan_liv_subj->currentIndex()));
    }
    b_need_save();
}




void persons_wnd::on_bn_pers_save_clicked() {
    save_pers_data();
}

bool persons_wnd::save_pers_data() {
    //if ( !(ui->pan_pers_save->isVisible()) )

        //ui->bn_pers_polices->setEnabled(test_for_UDL(false, false));
        //return true;
    ui->bn_pers_polices->setEnabled(true);
    ui->bn_pers_document->setEnabled(false);

    try {
        QDate dd_min = QDate(1920,1,1);
        QDate dd_max = QDate::currentDate();

        // проверка заполнения полей
        if (ui->combo_pers_pan_category->currentIndex()==0) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Выберите категорию застрахованного.");
            return false;
        }
        if ( ui->ln_pers_pan_fam->text().isEmpty()
             && ui->ch_dost_fam->isChecked() ) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Поле \"Фамилия\" не может быть пустым.\nДобавьте недостающие данные.");
            return false;
        }
        if ( ui->ln_pers_pan_im->text().isEmpty()
             && ui->ch_dost_im->isChecked() ) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Поле \"Имя\" не может быть пустым.\nДобавьте недостающие данные.");
            return false;
        }
        if ( ui->ch_pers_pan_ot->isChecked()
             && ui->ln_pers_pan_ot->text().isEmpty() ) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Введите отчество застрахованного лица \nили, если отчества нет, снимите флажок \"Отчество\".");
            return false;
        }
        if (ui->combo_pers_pan_sex->currentIndex()==0) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Выберите пол застрахованного (М/Ж).");
            return false;
        }
        if (ui->date_pers_pan_birth->date()<dd_min) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Дата рождения застрахованного не может быть раньше 1 января 1900 г.");
            return false;
        }
        if (ui->date_pers_pan_birth->date()>dd_max) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Дата, указанная в качестве даты рождения застрахованного ещё не наступила.");
            return false;
        }
        QString snils_s = ui->line_pers_pan_snils->text().trimmed().replace(" ","").replace("-","");
        if (ui->ch_pers_pan_snils->isChecked() && snils_s.length()!=11) {
            QMessageBox::warning(this, "Ошибка в данных!",
                                 "СНИЛС должен быть указан в формате ХХХ-ХХХ-ХХХ ХХ (11 цифр).\n\n"
                                 "Укажите СНИЛС застрахованного или снимите флажок \"СНИЛС\".");
            return false;
        }
        if (ui->pan_rep->isChecked() && ui->line_pers_pan_rep->text().isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Введите ФИО представителя застрахованного \nили снимите флажок \"ФИО представителя\".");
            return false;
        }
        if (ui->ch_pers_pan_death->isChecked() && ui->date_pers_pan_death->date()<=dd_min) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите дату смерти застрахованного позже 1 января 1920 г. или снимите флажок \"Дата смерти\".");
            return false;
        }
        if (ui->ch_pers_pan_death->isChecked() && ui->date_pers_pan_death->date()>dd_max) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Дата, указанная в качестве даты смерти застрахованного, ещё не наступила.");
            return false;
        }
        if (ui->ln_pers_pan_plc_birth->text().isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Поле \"Место рождения\" не может быть пустым. \nУкажите место рождения застрахованного "
                                 "полностью так же как это написано в паспорте.");
            return false;
        }
        if (ui->ch_pers_pan_reg->isChecked() && ui->date_pers_pan_reg->date()<=dd_min) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите дату регистрации застрахованного позже 1 января 1920 г. \n"
                                 "или снимите флажок \"Адрес регистрации\" если БОМЖ.");
            return false;
        }
        if (ui->ch_pers_pan_reg->isChecked() && ui->date_pers_pan_reg->date()>dd_max) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Дата, указанная в качестве даты регистрации застрахованного по месту жительства, ещё не наступила.");
            return false;
        }
        if (ui->ch_pers_pan_reg->isChecked() && ui->combo_pers_pan_reg_subj->currentIndex()==0) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Выберите регион по ФИАС в составе адреса регистрации застрахованного или снимите флажок "
                                 "\"Адрес регистрации\" если БОМЖ.");
            return false;
        }
        if ( ui->ch_pers_pan_reg->isChecked() &&
            !ui->ch_pers_pan_reg_text->isChecked() &&
             ui->combo_pers_pan_reg_strt->currentIndex()>0 &&
             ui->combo_pers_pan_reg_hous->currentIndex()==0 ) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите дом или интервал домов по ФИАС в составе адреса регистрации застрахованного или снимите флажок "
                                 "\"Адрес регистрации\" если БОМЖ.");
            return false;
        }
        if ( ui->ch_pers_pan_reg->isChecked() &&
             ( !ui->ch_pers_pan_reg_text->isChecked() &&
               ui->combo_pers_pan_reg_hous->currentIndex()==0 ) ) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите номер дома в составе адреса регистрации застрахованного \n"
                                 "или снимите флажок \"Адрес регистрации\" если БОМЖ.");
            return false;
        }
        if ( ui->ch_pers_pan_reg->isChecked() &&
             ( ui->ch_pers_pan_reg_text->isChecked() &&
               ui->combo_pers_pan_reg_hous->count()>1 ) ) {
            QMessageBox::warning(this, "Недопустимое ограничение целостности данных!!",
                                 "Выбран вариант ручного ввода адреса регистрации текстом. \n"
                                 "Однако для выбранного в составе адреса регистрации города, нас.пункта или улицы номер дома может быть выбран по ФИАС. \n\n"
                                 "Снимите флажок ввода адреса проживания вручную. \n"
                                 "Выберите адрес регистрации застрахованного по ФИАС и повторите попытку.");
            return false;
        }
        if ( ui->ch_pers_pan_reg->isChecked() &&
             ( ui->ch_pers_pan_reg_text->isChecked() &&
               ui->ln_pers_pan_reg_text->text().isEmpty() ) ) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Выбран текстовый ввод адреса регистрации, но поле ввода адреса пустое. \n\n"
                                 "Введите адрес регистрации текстои или выберите его по базе ФИАС и повторите попытку.");
            return false;
        }
        if (ui->ch_pers_pan_reg->isChecked() && (ui->ln_pers_pan_reg_index->text().isEmpty() || ui->ln_pers_pan_reg_index->text().length()<6)) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите почтовый индекс адреса регистрации застрахованного в формате 999999 \n"
                                 "или снимите флажок \"Адрес регистрации\" если БОМЖ.");
            return false;
        }
        if (ui->ch_pers_pan_reg_text->isChecked() && (ui->ln_pers_pan_reg_text->text().isEmpty() || ui->ln_pers_pan_reg_text->text().length()<6)) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите адрес регистрации застрахованного текстом или снимите флажок \"Адрес текстом\"\n"
                                 "Адрес не может быть короче 6 символов.");
            return false;
        }
        if ( ui->ch_pers_pan_liv->isChecked() &&
            !ui->ch_pers_pan_liv_text->isChecked() &&
             ui->combo_pers_pan_liv_strt->currentIndex()>0 &&
             ui->combo_pers_pan_liv_hous->currentIndex()==0 ) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите дом или интервал домов по ФИАС в составе адреса проживания застрахованного или снимите флажок "
                                 "\"Адрес проживания\" если адрес фактического проживания совпадает с адресом регистрации.");
            return false;
        }
        if ( ui->ch_pers_pan_liv->isChecked() &&
             ( !ui->ch_pers_pan_liv_text->isChecked() &&
               ui->combo_pers_pan_liv_hous->currentIndex()==0 ) ) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите номер дома в составе адреса фактического проживания застрахованного \n"
                                 "или снимите флажок \"Адрес проживания\".");
            return false;
        }
        if ( ui->ch_pers_pan_liv->isChecked() &&
             ( ui->ch_pers_pan_liv_text->isChecked() &&
               ui->combo_pers_pan_liv_hous->count()>1 ) ) {
            QMessageBox::warning(this, "Недопустимое ограничение целостности данных!!",
                                 "Выбран вариант ручного ввода адреса фактического проживания текстом. \n"
                                 "Однако для выбранного в составе адреса фактического проживания застрахованного города, нас.пункта или улицы номер дома может быть выбран по ФИАС. \n\n"
                                 "Снимите флажок ввода адреса проживания вручную. \n"
                                 "Выберите адрес фактического проживания застрахованного по ФИАС и повторите попытку.");
            return false;
        }
        if ( ui->ch_pers_pan_liv->isChecked() &&
             ( ui->ch_pers_pan_liv_text->isChecked() &&
               ui->ln_pers_pan_liv_text->text().isEmpty() ) ) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Выбран текстовый ввод адреса фактического проживания застрахованного, но поле ввода адреса пустое. \n\n"
                                 "Введите адрес фактического проживания текстои или выберите его по базе ФИАС и повторите попытку.");
            return false;
        }


        if (ui->ch_pers_pan_liv->isChecked() && ui->combo_pers_pan_liv_subj->currentIndex()==0) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Выберите регион по ФИАС в составе адреса проживания застрахованного или снимите флажок \"Адрес проживания\" "
                                 "если адрес проживания совпадает с адресом регистрации или БОМЖ.");
            return false;
        }
        if (ui->ch_pers_pan_liv->isChecked() && (ui->ln_pers_pan_liv_index->text().isEmpty() || ui->ln_pers_pan_liv_index->text().length()<6)) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите почтовый индекс адреса фактического проживания застрахованного в формате 999999 \n"
                                 "или снимите флажок \"Адрес проживания\" если адрес проживания совпадает с адресом регистрации или БОМЖ.");
            return false;
        }
        if (ui->ch_pers_pan_liv_text->isChecked() && (ui->ln_pers_pan_liv_text->text().isEmpty() || ui->ln_pers_pan_liv_text->text().length()<6)) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите адрес проживания застрахованного текстом или снимите флажок \"Адрес текстом\"\n"
                                 "Адрес не может быть короче 6 символов.");
            return false;
        }
        if (!ui->ch_pers_pan_reg->isChecked() && !ui->ch_pers_pan_liv->isChecked()) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите адрес регистрации застрахованного. \n"
                                 "Если адрес регистрации не известен, то укажите адрес фактического проживания застрахованного.");
            return false;
        }
        if (ui->ch_pers_pan_reg->isChecked() && ui->date_pers_pan_birth->date()>ui->date_pers_pan_reg->date()) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Указанная дата регистрации застрахованного раньше его даты рождения! \n"
                                 "Человек не может быть зарегистрирован по месту проживания до своего рождения.");
            return false;
        }
        if (ui->ch_pers_pan_death->isChecked() && ui->date_pers_pan_birth->date()>ui->date_pers_pan_death->date()) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Указанная дата смерти застрахованного раньше его даты рождения! \n"
                                 "Человек не может быть умереть до того как он родится.");
            return false;
        }
        if (ui->ch_pers_pan_death->isChecked() && ui->ch_pers_pan_reg->isChecked() && ui->date_pers_pan_reg->date()>ui->date_pers_pan_death->date()) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Указанная дата регистрации застрахованного позже его даты смерти! \n"
                                 "Человек не может быть зарегистрирован по месту проживания после своей смерти.");
            return false;
        }
        QString cell_s = ui->ln_pers_pan_phone_cell->text().replace("+7 (","").replace("8 (","").replace("8(","").replace(" ","").replace(")","").replace("-","");
        if (cell_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите номер личного (сотового) телефона для обратной связи.");
            return false;
        }
        if (cell_s.length()<10) {
            QMessageBox::warning(this, "Не хватает данных!",
                                 "Укажите номер личного (сотового) телефона для обратной связи.\n\n"
                                 "Номер сотового телефона не может быть короче 11 цифр.");
            return false;
        }
        if (cell_s.length()>10) {
            if (QMessageBox::question(this, "Нужно подтверждение!",
                                      "Введённый номер личного (сотового) телефона длиннее 11 цифр.\n"
                                      "Возможно, это ошибка.\n\nВсё равно сохранить?",
                                      QMessageBox::Yes|QMessageBox::Cancel)==QMessageBox::Cancel)
                return false;
        }
        // для граждан ЕАЭС
        int categ = ui->combo_pers_pan_category->currentIndex();
        if (categ>10 && categ<15) {
            if (!ui->ch_eaes->isChecked()) {
                QMessageBox::warning(this, "Не хватает данных!",
                                     "Для граждан стран ЕАЭС надо указать данные о месте пребывания с указанием срока пребывания в РФ.\n\n"
                                     "Это обязательные поля.");
                return false;
            }
            if ( ui->line_eaes_residence->text().trimmed().isEmpty() ) {
                QMessageBox::warning(this, "Не хватает данных!",
                                     "Заполните данные о месте пребывания гражданина страны ЕАЭС на территории Российской Федерации "
                                     "на период действия трудового договора/документа сотрудника ЕАЭС.\n\n"
                                     "Это обязательное поле.");
                return false;
            }
            if ( !ui->ch_eaes_reside_exp->isChecked() ) {
                QMessageBox::warning(this, "Не хватает данных!",
                                     "Не заполнен срок пребывания гражданина страны ЕАЭС в России.\n\n"
                                     "Это обязательное поле.");
                return false;
            }
            if ( ui->date_eaes_reside_exp->date()<QDate::currentDate() ) {
                QMessageBox::warning(this, "Не хватает данных!",
                                     "Срок пребывания гражданина страны ЕАЭС в России уже истёк?\n\n"
                                     "Это обязательное поле.");
                return false;
            }
            if ( ui->date_eaes_reside_exp->date()<QDate::currentDate().addDays(2) ) {
                QMessageBox::warning(this, "Ошибка в данных!",
                                     "До окончания срока пребывания гражданина страны ЕАЭС в России осталось меньше двух дней?\n\n"
                                     "В этом случае страхование не возможно.");
                return false;
            }
        }

        // применение настроек DOST
        data_pers.dost = QString(data_pers.dost + "______").left(6);
        if (data_pers.dost!="______") {
            QString dost_str = "В соответствии с настройками надёжности идентификации застрахованного \n(код DOST)\n\n";
            if (data_pers.dost.indexOf("1")>=0)
                dost_str += "  -  ОТЧЕСТВО не известно\n";
            if (data_pers.dost.indexOf("2")>=0)
                dost_str += "  -  ФАМИЛИЯ не известна\n";
            if (data_pers.dost.indexOf("3")>=0)
                dost_str += "  -  ИМЯ не известно\n";
            if (data_pers.dost.indexOf("4")>=0)
                dost_str += "  -  ДЕНЬ ДАТЫ РОЖДЕНИЯ не известен\n";
            if (data_pers.dost.indexOf("5")>=0)
                dost_str += "  -  МЕСЯЦ ДАТЫ РОЖДЕНИЯ не известен\n";
            if (data_pers.dost.indexOf("6")>=0)
                dost_str += "  -  дата рождения не соответствует календарю \n    (надо ввести ближайшую корректную дату)\n";
            dost_str += "\nПрименить соответствующие изменения к полям данных?\n";

            if (QMessageBox::question(this, "Нужно подтверждение ограничения надёжности данных", dost_str, QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Cancel) {
                QMessageBox::information(this, "Действие отменено", "Сохранение отменено пользователем.");
                return false;
            }
            if (data_pers.dost.indexOf("1")>=0) {
                data_pers.ot = "";
                ui->ln_pers_pan_ot->clear();
            }
            if (data_pers.dost.indexOf("2")>=0) {
                data_pers.fam = "";
                ui->ln_pers_pan_fam->clear();
            }
            if (data_pers.dost.indexOf("3")>=0) {
                data_pers.im = "";
                ui->ln_pers_pan_im->clear();
            }
            if (data_pers.dost.indexOf("4")>=0) {
                data_pers.date_birth.setDate(data_pers.date_birth.year(), data_pers.date_birth.month(), 1);
                ui->date_pers_pan_birth->setDate(data_pers.date_birth);
            }
            if (data_pers.dost.indexOf("5")>=0) {
                data_pers.date_birth.setDate(data_pers.date_birth.year(), 1, data_pers.date_birth.day());
                ui->date_pers_pan_birth->setDate(data_pers.date_birth);
            }
        }

        // проверка корректности ввода адреса регистрации
        QString subj_r_s = ui->combo_pers_pan_reg_subj->currentText();
        if (subj_r_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Выберите корректный субъект РФ в составе адреса регистрации.");
            return false;
        }
        QString dstr_r_s = ui->combo_pers_pan_reg_dstr->currentText();
        if (dstr_r_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Выберите корректный район субьекта РФ в составе адреса регистрации.\n"
                                                             "Если район не определён - выберите вариант \" - нет - \"");
            return false;
        }
        QString city_r_s = ui->combo_pers_pan_reg_city->currentText();
        if (city_r_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Выберите корректный город в составе адреса регистрации.\n"
                                                             "Если город не определён - выберите вариант \" - нет - \"");
            return false;
        }
        QString nasp_r_s = ui->combo_pers_pan_reg_nasp->currentText();
        if (nasp_r_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Выберите корректный населённый пункт в составе адреса регистрации.\n"
                                                             "Если нас.пункт не определён - выберите вариант \" - нет - \"");
            return false;
        }
        QString strt_r_s = ui->combo_pers_pan_reg_strt->currentText();
        if (strt_r_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Выберите корректную улицу в составе адреса регистрации.\n"
                                                             "Если улица не определена - выберите вариант \" - нет - \"");
            return false;
        }


        // проверка корректности ввода адреса проживания
        QString subj_l_s = ui->combo_pers_pan_liv_subj->currentText();
        if (subj_l_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Выберите корректный субъект РФ в составе адреса проживания.");
            return false;
        }
        QString dstr_l_s = ui->combo_pers_pan_liv_dstr->currentText();
        if (dstr_l_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Выберите корректный район субьекта РФ в составе адреса проживания.\n"
                                                             "Если район не определён - выберите вариант \" - нет - \"");
            return false;
        }
        QString city_l_s = ui->combo_pers_pan_liv_city->currentText();
        if (city_l_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Выберите корректный город в составе адреса проживания.\n"
                                                             "Если город не определён - выберите вариант \" - нет - \"");
            return false;
        }
        QString nasp_l_s = ui->combo_pers_pan_liv_nasp->currentText();
        if (nasp_l_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Выберите корректный населённый пункт в составе адреса проживания.\n"
                                                             "Если нас.пункт не определён - выберите вариант \" - нет - \"");
            return false;
        }
        QString strt_l_s = ui->combo_pers_pan_liv_strt->currentText();
        if (strt_l_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Выберите корректную улицу в составе адреса проживания.\n"
                                                             "Если улица не определена - выберите вариант \" - нет - \"");
            return false;
        }


        QString fam_old_s = ui->ln_pers_pan_fam_old->text().trimmed();
        if (ui->ch_pers_pan_fam_old->isChecked() && fam_old_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Укажите старую фамилию застрахованного или снимите флажок \"старая фамилия\".");
            return false;
        }
        QString im_old_s = ui->ln_pers_pan_im_old->text().trimmed();
        if (ui->ch_pers_pan_im_old->isChecked() && im_old_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Укажите старое имя застрахованного или снимите флажок \"старое имя\".");
            return false;
        }
        QString ot_old_s = ui->ln_pers_pan_ot_old->text().trimmed();
        if (ui->ch_pers_pan_ot_old->isChecked() && ot_old_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Укажите старое отчество застрахованного или снимите флажок \"старое отчество\".");
            return false;
        }
        int sex_old_i = ui->combo_pers_pan_sex_old->currentIndex();
        if (ui->ch_pers_pan_sex_old->isChecked() && (sex_old_i>2 || sex_old_i<1) ) {
            QMessageBox::warning(this, "Не хватает данных!", "Укажите старый пол застрахованного или снимите флажок \"старый пол\".");
            return false;
        }
        QDate birth_d = ui->date_pers_pan_birth_old->date();
        if (ui->ch_pers_pan_date_birth_old->isChecked() && (birth_d>QDate::currentDate() || birth_d<QDate(1900,1,1)) ) {
            QMessageBox::warning(this, "Не хватает данных!", "Укажите старую дату рождения застрахованного или снимите флажок \"старая дата рождения\".");
            return false;
        }
        QString snils_old_s = ui->line_pers_pan_snils_old->text().trimmed().replace(" ","").replace("-","");
        if (ui->ch_pers_pan_snils_old->isChecked() && snils_old_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Укажите старый СНИЛС застрахованного или снимите флажок \"старый СНИЛС\".");
            return false;
        }
        if (ui->ch_pers_pan_snils_old->isChecked() && snils_old_s.length()!=11) {
            QMessageBox::warning(this, "Ошибка в данных!", "СНИЛС должен быть указан в формате ХХХ-ХХХ-ХХХ ХХ (11 цифр).\n\nУкажите старый СНИЛС застрахованного или снимите флажок \"старый СНИЛС\".");
            return false;
        }
        QString enp_old_s = ui->line_pers_pan_enp_old->text().trimmed().replace(" ","").replace("-","");
        if (ui->ch_pers_pan_enp_old->isChecked() && enp_old_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Укажите старый ЕНП застрахованного или снимите флажок \"старый ЕНП\".");
            return false;
        }
        QString plc_birth_s = ui->ln_pers_pan_plc_birth_old->text().trimmed();
        if (ui->ch_pers_pan_plc_birth_old->isChecked() && plc_birth_s.isEmpty()) {
            QMessageBox::warning(this, "Не хватает данных!", "Укажите старое место рождения застрахованного или снимите флажок \"старое место рождения\".");
            return false;
        }

        /*
        // проверим заполнение СНИЛС для граждан России
        QString snils_t = ui->line_pers_pan_snils->text();
        snils_t = snils_t.replace("-", "").replace(" ", "").trimmed();
        if ( ( ui->combo_pers_pan_oksm_cname->currentData()==643 ||
               ui->combo_pers_pan_category->currentData()==1 ||
               ui->combo_pers_pan_category->currentData()==6 ) &&
             ( ui->date_pers_pan_birth->date().daysTo(QDate::currentDate())>(365*14+4)  ) &&  //больше 14 лет
             ( ui->combo_pers_pan_category->currentIndex()==1 ||
               ui->combo_pers_pan_category->currentIndex()==6 ) &&
             (!ui->ch_pers_pan_snils->isChecked() || snils_t.isEmpty() ) ) {
            QString pss;

            do {
                pss = QInputDialog::getText(this,"Нужен СНИЛС !!!",
                                            QString("Для гражданина Российской Федерации старше 14 лет необходимо указать СНИЛС.\n"
                                                    " (норма вступила в силу с 01.06.2016г, изменена 01.07.2016)\n\n"
                                                    "Для того чтобы сохранить данные застрахованного без СНИЛС\n - введите пароль - ") +
                                            QString(data_app.is_head||data_app.is_tech ? "ДОВЕРЯЙ" : "***") +
                                            "\n\nПустая строка - отмена сохранения.").toUpper();
                if (pss.isEmpty())
                    return false;
            } while (pss!="ДОВЕРЯЙ" && pss!="LJDTHZQ");
        }
        */


        // проверим контрольную сумму СНИЛС
        QString SNILS = QString("00000000000" + ui->line_pers_pan_snils->text().replace("-", "").replace(" ", "").trimmed());
        SNILS = SNILS.right(11);


        if ( !test_for_sex(true)                // проверим пол и имя персоны
             || !test_for_doubles(true)         // проверим запись персоны на дубли
             //|| !test_for_UDL(false, false)     // проверим категорию и докумерты персоны  -  все нужные действия выполняются в процедуре
             || !test_for_SNILS(SNILS, ui->combo_pers_pan_oksm_cname->currentData().toInt(), ui->combo_pers_pan_category->currentIndex(), ui->date_pers_pan_birth->date()) ) {

            ui->bn_pers_save->setEnabled(false);
            return false;
        } else {
            ui->bn_pers_save->setEnabled(true);
        }

        db.transaction();

        // проверим наличие и если надо добавим адреса в таблицу адресов
        int id_address_reg=-1, id_address_liv=-1;

        // для адреса регистрации
        if (ui->ch_pers_pan_reg->isChecked()) {
            QString sql = "select id  from addresses  where ";
            if (!ui->lab_pers_pan_reg_ocato->text().trimmed().isEmpty()) {
                 sql += " (ocato='" + ui->lab_pers_pan_reg_ocato->text() + "') ";
            } else { sql += " (ocato is NULL or ocato='') "; }
            if (!ui->lab_pers_pan_reg_ocato_full->text().trimmed().isEmpty()) {
                 sql += " and (ocato_full='" + ui->lab_pers_pan_reg_ocato_full->text() + "') ";
            } else { sql += " and (ocato_full is NULL or ocato_full='') "; }
            //if (ui->combo_pers_pan_reg_dstr->currentIndex()!=0) {
            //     sql += " and (dstr_name='" + ui->combo_pers_pan_reg_dstr->currentText().trimmed() + "') ";
            //} else { sql += " and (dstr_name is NULL or dstr_name='') "; }
            //if (ui->combo_pers_pan_reg_strt->currentIndex()!=0) {
            //     sql += " and (strt_name='" + ui->combo_pers_pan_reg_strt->currentText().trimmed() + "') ";
            //} else { sql += " and (strt_name is NULL or strt_name='') "; }

            if (!ui->ln_pers_pan_reg_subj->text().trimmed().isEmpty()) {
                 sql += " and (subj=" + ui->ln_pers_pan_reg_subj->text().trimmed() + ") ";
            } else { sql += " and (subj is NULL or subj=0) "; }
            if (!ui->ln_pers_pan_reg_dstr->text().trimmed().isEmpty()) {
                 sql += " and (dstr=" + ui->ln_pers_pan_reg_dstr->text().trimmed() + ") ";
            } else { sql += " and (dstr is NULL or dstr=0) "; }
            if (!ui->ln_pers_pan_reg_city->text().trimmed().isEmpty()) {
                 sql += " and (city=" + ui->ln_pers_pan_reg_city->text().trimmed() + ") ";
            } else { sql += " and (city is NULL or city=0) "; }
            if (!ui->ln_pers_pan_reg_nasp->text().trimmed().isEmpty()) {
                 sql += " and (nasp=" + ui->ln_pers_pan_reg_nasp->text().trimmed() + ") ";
            } else { sql += " and (nasp is NULL or nasp=0) "; }
            if (!ui->ln_pers_pan_reg_strt->text().trimmed().isEmpty()) {
                 sql += " and (strt=" + ui->ln_pers_pan_reg_strt->text().trimmed() + ") ";
            } else { sql += " and (strt is NULL or strt=0) "; }

            // reg_AOID
            QString reg_AOID = "";
            if ( ui->combo_pers_pan_reg_strt->currentIndex()>0
                 && fiass_reg_strt.size()>ui->combo_pers_pan_reg_strt->currentIndex() )
                reg_AOID = fiass_reg_strt.at( ui->combo_pers_pan_reg_strt->currentIndex());
            else if ( ui->combo_pers_pan_reg_nasp->currentIndex()>0
                      && fiass_reg_nasp.size()>ui->combo_pers_pan_reg_nasp->currentIndex() )
                reg_AOID = fiass_reg_nasp.at( ui->combo_pers_pan_reg_nasp->currentIndex());
            else if ( ui->combo_pers_pan_reg_city->currentIndex()>0
                      && fiass_reg_city.size()>ui->combo_pers_pan_reg_city->currentIndex())
                reg_AOID = fiass_reg_city.at( ui->combo_pers_pan_reg_city->currentIndex());
            else if ( ui->combo_pers_pan_reg_dstr->currentIndex()>0
                      && fiass_reg_dstr.size()>ui->combo_pers_pan_reg_dstr->currentIndex() )
                reg_AOID = fiass_reg_dstr.at( ui->combo_pers_pan_reg_dstr->currentIndex());
            else if ( ui->combo_pers_pan_reg_subj->currentIndex()>0
                      && fiass_reg_subj.size()>ui->combo_pers_pan_reg_subj->currentIndex() )
                reg_AOID = fiass_reg_subj.at( ui->combo_pers_pan_reg_subj->currentIndex());
            else reg_AOID = "";
            // собственно проверка
            if (!reg_AOID.isEmpty()) {
                 sql += " and (FIAS_aoid='" + reg_AOID + "') ";
            } else { sql += " and (FIAS_aoid is NULL) "; }

            // reg_HOUSEID
            /*if (ui->ch_pers_pan_reg_hous->isChecked()) {
                ui->combo_pers_pan_reg_hous->setCurrentIndex(0);
                ui->ln_pers_pan_reg_hous->clear();
                ui->ln_pers_pan_reg_corp->clear();
            } else {
                ui->combo_pers_pan_reg_hous->setCurrentIndex(0);
                ui->ln_pers_pan_reg_hous->clear();
                ui->ln_pers_pan_reg_corp->clear();
            }*/
            QString reg_HOUSEID = ui->combo_pers_pan_reg_hous->currentData().toString();
            // собственно проверка
            if (!reg_HOUSEID.isEmpty()) {
                 sql += " and (FIAS_houseid='" + reg_HOUSEID + "') ";
            } else { sql += " and (FIAS_houseid is NULL) "; }


            if (!ui->ln_pers_pan_reg_hous->text().trimmed().isEmpty()) {
                 sql += " and (house=" + ui->ln_pers_pan_reg_hous->text().trimmed() + ") ";
            } else { sql += " and (house is NULL or house=0) "; }
            if (!ui->ln_pers_pan_reg_corp->text().trimmed().isEmpty()) {
                 sql += " and (corp='" + ui->ln_pers_pan_reg_corp->text().trimmed().toUpper() + "') ";
            } else { sql += " and (corp is NULL or corp='') "; }
            if (!ui->ln_pers_pan_reg_qart->text().trimmed().isEmpty()) {
                 sql += " and (quart='" + ui->ln_pers_pan_reg_qart->text().trimmed().toUpper() + "') ";
            } else { sql += " and (quart is NULL or quart='') "; }

            QSqlQuery *query = new QSqlQuery(db);
            if (!mySQL.exec(this, sql, "Проверка наличия адреса в базе", *query, true, db, data_app)) {
                delete query;
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка",
                                      "Произошла ошибка при попытке проверить запись адреса регистации в базе данных.\n\n"
                                      "Сохранение отменено.");
                return false;
            }
            if (query->size()>0) {
                query->next();
                id_address_reg = query->value(0).toInt();
            }
            delete query;

            if (id_address_reg<0) {
                // адрес ещё не добавлен - добавим его
                // получим КЛАДР
                QString s_KLADR = "";
                if (!kladr_reg_nasp.at(max(0,ui->combo_pers_pan_reg_nasp->currentIndex())).isEmpty()) {
                    s_KLADR = QString("0000000000000" + kladr_reg_nasp.at(max(0,ui->combo_pers_pan_reg_nasp->currentIndex()))).right(13);
                } else if (!kladr_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex())).isEmpty()) {
                    s_KLADR = QString("0000000000000" + kladr_reg_city.at(max(0,ui->combo_pers_pan_reg_city->currentIndex()))).right(13);
                } else if (!kladr_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex())).isEmpty()) {
                    s_KLADR = QString("0000000000000" + kladr_reg_dstr.at(max(0,ui->combo_pers_pan_reg_dstr->currentIndex()))).right(13);
                } else {
                    s_KLADR = QString("0000000000000" + kladr_reg_subj.at(max(0,ui->combo_pers_pan_reg_subj->currentIndex()))).right(13);
                }
                QString s_KLADR_strt = "";
                s_KLADR_strt = QString("00000000000000000" + kladr_reg_strt.at(max(0,ui->combo_pers_pan_reg_strt->currentIndex()))).right(17);

                // действующий КЛАДР
                s_KLADR      = s_KLADR.left(11) + "00";
                s_KLADR_strt = s_KLADR_strt.left(15) + "00";

                // запрос
                QString sql_add = "";
                sql_add += "insert into addresses(post_index,ocato,ocato_full,kladr,kladr_street,subj_name,dstr_name,city_name,nasp_name,strt_name,house,corp,quart, FIAS_aoid, FIAS_houseid) ";
                sql_add += " values (";
                sql_add += " '" + ui->ln_pers_pan_reg_index->text() + "', ";
                sql_add += " '" + ui->lab_pers_pan_reg_ocato->text() + "', ";
                sql_add += " '" + ui->lab_pers_pan_reg_ocato_full->text() + "', ";
                sql_add += " '" + s_KLADR + "', ";
                sql_add += " '" + s_KLADR_strt + "', ";
                QString rg = (ui->combo_pers_pan_reg_subj->currentIndex()==0 ? "" : ui->combo_pers_pan_reg_subj->currentText().toUpper());
                sql_add += " '" + rg + "', ";
                QString ds = (ui->combo_pers_pan_reg_dstr->currentIndex()==0 ? "" : ui->combo_pers_pan_reg_dstr->currentText().toUpper());
                sql_add += " '" + ds + "', ";
                QString ct = (ui->combo_pers_pan_reg_city->currentIndex()==0 ? "" : ui->combo_pers_pan_reg_city->currentText().toUpper());
                sql_add += " '" + ct + "', ";
                QString np = (ui->combo_pers_pan_reg_nasp->currentIndex()==0 ? "" : ui->combo_pers_pan_reg_nasp->currentText().toUpper());
                sql_add += " '" + np + "', ";
                QString st = (ui->combo_pers_pan_reg_strt->currentIndex()==0 ? "" : ui->combo_pers_pan_reg_strt->currentText().toUpper());
                sql_add += " '" + st + "', ";
                sql_add += " " + (ui->ln_pers_pan_reg_hous->text().trimmed().isEmpty() ? "NULL" : "'" + ui->ln_pers_pan_reg_hous->text().trimmed() + "'") + ", ";
                sql_add += " '" + ui->ln_pers_pan_reg_corp->text().trimmed().toUpper() + "', ";
                sql_add += " '" + ui->ln_pers_pan_reg_qart->text().trimmed().toUpper() + "', ";
                sql_add += " " + (reg_AOID.isEmpty() ? "NULL" : "'" + reg_AOID + "'") + ", ";
                sql_add += " " + (reg_HOUSEID.isEmpty() ? "NULL" : "'" + reg_HOUSEID + "'") + ") ";
                sql_add += " returning id ; ";

                QSqlQuery *query_add = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_add, "Добавление адреса регистрации в базу данных", *query_add, true, db, data_app)) {
                    delete query_add;
                    db.rollback();
                    QMessageBox::critical(this, "Непредвиденная ошибка",
                                          "Произошла ошибка при попытке добавить запись адреса регистации в базу данных.\n\n"
                                          "Сохранение отменено.");
                    return false;
                } else if (query_add->size()>0) {
                    query_add->next();
                    id_address_reg = query_add->value(0).toInt();
                }
                delete query_add;
            }

            // запишем адрес регистрации во внутренние переменные
            data_pers.reg_subj_text = ui->combo_pers_pan_reg_subj->currentText();
            data_pers.reg_dstr_text = ui->combo_pers_pan_reg_dstr->currentText();
            data_pers.reg_city_text = ui->combo_pers_pan_reg_city->currentText();
            data_pers.reg_nasp_text = ui->combo_pers_pan_reg_nasp->currentText();
            data_pers.reg_strt_text = ui->combo_pers_pan_reg_strt->currentText();
            data_pers.reg_hous = ui->ln_pers_pan_reg_hous->text().toInt();
            data_pers.reg_corp = ui->ln_pers_pan_reg_corp->text();
            data_pers.reg_qart = ui->ln_pers_pan_reg_qart->text();
            data_pers.reg_AOID = reg_AOID;
            data_pers.reg_HOUSEID = reg_HOUSEID;
        }

        // для адреса проживания
        if (ui->ch_pers_pan_liv->isChecked()) {
            QString sql = "select id  from addresses  where ";
            if (!ui->lab_pers_pan_liv_ocato->text().trimmed().isEmpty()) {
                 sql += " (ocato='" + ui->lab_pers_pan_liv_ocato->text() + "') ";
            } else { sql += " (ocato is NULL or ocato='') "; }
            if (!ui->lab_pers_pan_liv_ocato_full->text().trimmed().isEmpty()) {
                 sql += " and (ocato_full='" + ui->lab_pers_pan_liv_ocato_full->text() + "') ";
            } else { sql += " and (ocato_full is NULL or ocato_full='') "; }
            //if (ui->combo_pers_pan_liv_dstr->currentIndex()!=0) {
            //     sql += " and (dstr_name='" + ui->combo_pers_pan_liv_dstr->currentText().trimmed() + "') ";
            //} else { sql += " and (dstr_name is NULL or dstr_name='') "; }
            //if (ui->combo_pers_pan_liv_strt->currentIndex()!=0) {
            //     sql += " and (strt_name='" + ui->combo_pers_pan_liv_strt->currentText().trimmed() + "') ";
            //} else { sql += " and (strt_name is NULL or strt_name='') "; }

            if (!ui->ln_pers_pan_liv_subj->text().trimmed().isEmpty()) {
                 sql += " and (subj=" + ui->ln_pers_pan_liv_subj->text().trimmed() + ") ";
            } else { sql += " and (subj is NULL or subj=0) "; }
            if (!ui->ln_pers_pan_liv_dstr->text().trimmed().isEmpty()) {
                 sql += " and (dstr=" + ui->ln_pers_pan_liv_dstr->text().trimmed() + ") ";
            } else { sql += " and (dstr is NULL or dstr=0) "; }
            if (!ui->ln_pers_pan_liv_city->text().trimmed().isEmpty()) {
                 sql += " and (city=" + ui->ln_pers_pan_liv_city->text().trimmed() + ") ";
            } else { sql += " and (city is NULL or city=0) "; }
            if (!ui->ln_pers_pan_liv_nasp->text().trimmed().isEmpty()) {
                 sql += " and (nasp=" + ui->ln_pers_pan_liv_nasp->text().trimmed() + ") ";
            } else { sql += " and (nasp is NULL or nasp=0) "; }
            if (!ui->ln_pers_pan_liv_strt->text().trimmed().isEmpty()) {
                 sql += " and (strt=" + ui->ln_pers_pan_liv_strt->text().trimmed() + ") ";
            } else { sql += " and (strt is NULL or strt=0) "; }

            // liv_AOID
            QString liv_AOID = "";
            if ( ui->combo_pers_pan_liv_strt->currentIndex()>0
                 && fiass_liv_strt.size()>ui->combo_pers_pan_liv_strt->currentIndex() )
                liv_AOID = fiass_liv_strt.at( ui->combo_pers_pan_liv_strt->currentIndex());
            else if ( ui->combo_pers_pan_liv_nasp->currentIndex()>0
                      && fiass_liv_nasp.size()>ui->combo_pers_pan_liv_nasp->currentIndex() )
                liv_AOID = fiass_liv_nasp.at( ui->combo_pers_pan_liv_nasp->currentIndex());
            else if ( ui->combo_pers_pan_liv_city->currentIndex()>0
                      && fiass_liv_city.size()>ui->combo_pers_pan_liv_city->currentIndex())
                liv_AOID = fiass_liv_city.at( ui->combo_pers_pan_liv_city->currentIndex());
            else if ( ui->combo_pers_pan_liv_dstr->currentIndex()>0
                      && fiass_liv_dstr.size()>ui->combo_pers_pan_liv_dstr->currentIndex() )
                liv_AOID = fiass_liv_dstr.at( ui->combo_pers_pan_liv_dstr->currentIndex());
            else if ( ui->combo_pers_pan_liv_subj->currentIndex()>0
                      && fiass_liv_subj.size()>ui->combo_pers_pan_liv_subj->currentIndex() )
                liv_AOID = fiass_liv_subj.at( ui->combo_pers_pan_liv_subj->currentIndex());
            else liv_AOID = "";
            // собственно проверка
            if (!liv_AOID.isEmpty()) {
                 sql += " and (FIAS_aoid='" + liv_AOID + "') ";
            } else { sql += " and (FIAS_aoid is NULL) "; }

            // liv_HOUSEID
            /*if (ui->ch_pers_pan_liv_hous->isChecked()) {
                ui->combo_pers_pan_liv_hous->setCurrentIndex(0);
                ui->ln_pers_pan_liv_hous->clear();
                ui->ln_pers_pan_liv_corp->clear();
            } else {
                ui->combo_pers_pan_liv_hous->setCurrentIndex(0);
                ui->ln_pers_pan_liv_hous->clear();
                ui->ln_pers_pan_liv_corp->clear();
            }*/
            QString liv_HOUSEID = ui->combo_pers_pan_liv_hous->currentData().toString();
            // собственно проверка
            if (!liv_HOUSEID.isEmpty()) {
                 sql += " and (FIAS_houseid='" + liv_HOUSEID + "') ";
            } else { sql += " and (FIAS_houseid is NULL) "; }

            if (!ui->ln_pers_pan_liv_hous->text().trimmed().isEmpty()) {
                 sql += " and (house=" + ui->ln_pers_pan_liv_hous->text().trimmed() + ") ";
            } else { sql += " and (house is NULL or house=0) "; }
            if (!ui->ln_pers_pan_liv_corp->text().trimmed().isEmpty()) {
                 sql += " and (corp='" + ui->ln_pers_pan_liv_corp->text().trimmed().toUpper() + "') ";
            } else { sql += " and (corp is NULL or corp='') "; }
            if (!ui->ln_pers_pan_liv_qart->text().trimmed().isEmpty()) {
                 sql += " and (quart='" + ui->ln_pers_pan_liv_qart->text().trimmed().toUpper() + "') ";
            } else { sql += " and (quart is NULL or quart='') "; }

            QSqlQuery *query = new QSqlQuery(db);
            if (!mySQL.exec(this, sql, "Проверка наличия адреса в базе", *query, true, db, data_app)) {
                delete query;
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка", "Произошла ошибка при попытке проверить запись адреса проживания в базе данных.\n\nСохранение отменено.");
                return false;
            }
            if (query->size()>0) {
                query->next();
                id_address_liv = query->value(0).toInt();
            }
            delete query;

            if (id_address_liv<0) {
                // адрес ещё не добавлен - добавим его
                // получим КЛАДР
                QString s_KLADR = "";
                if (!kladr_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex())).isEmpty()) {
                    s_KLADR = QString("0000000000000" + kladr_liv_nasp.at(max(0,ui->combo_pers_pan_liv_nasp->currentIndex()))).right(13);
                } else if (!kladr_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex())).isEmpty()) {
                    s_KLADR = QString("0000000000000" + kladr_liv_city.at(max(0,ui->combo_pers_pan_liv_city->currentIndex()))).right(13);
                } else if (!kladr_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex())).isEmpty()) {
                    s_KLADR = QString("0000000000000" + kladr_liv_dstr.at(max(0,ui->combo_pers_pan_liv_dstr->currentIndex()))).right(13);
                } else {
                    s_KLADR = QString("0000000000000" + kladr_liv_subj.at(max(0,ui->combo_pers_pan_liv_subj->currentIndex()))).right(13);
                }
                QString s_KLADR_strt = "";
                s_KLADR_strt = QString("00000000000000000" + kladr_liv_strt.at(max(0,ui->combo_pers_pan_liv_strt->currentIndex()))).right(17);

                // действующий КЛАДР
                s_KLADR      = s_KLADR.left(11) + "00";
                s_KLADR_strt = s_KLADR_strt.left(15) + "00";

                // запрос
                QString sql_add = "";
                sql_add += "insert into addresses(post_index,ocato,ocato_full,kladr,kladr_street,subj_name,dstr_name,city_name,nasp_name,strt_name,house,corp,quart, FIAS_aoid, FIAS_houseid) ";
                sql_add += "values (";
                sql_add += " '" + ui->ln_pers_pan_liv_index->text() + "', ";
                sql_add += " '" + ui->lab_pers_pan_liv_ocato->text() + "', ";
                sql_add += " '" + ui->lab_pers_pan_liv_ocato_full->text() + "', ";
                sql_add += " '" + s_KLADR + "', ";
                sql_add += " '" + s_KLADR_strt + "', ";
                QString rg = (ui->combo_pers_pan_reg_subj->currentIndex()==0 ? "" : ui->combo_pers_pan_reg_subj->currentText().toUpper());
                sql_add += " '" + rg + "', ";
                QString ds = (ui->combo_pers_pan_liv_dstr->currentIndex()==0 ? "" : ui->combo_pers_pan_liv_dstr->currentText().toUpper());
                sql_add += " '" + ds + "', ";
                QString ct = (ui->combo_pers_pan_liv_city->currentIndex()==0 ? "" : ui->combo_pers_pan_liv_city->currentText().toUpper());
                sql_add += " '" + ct + "', ";
                QString np = (ui->combo_pers_pan_liv_nasp->currentIndex()==0 ? "" : ui->combo_pers_pan_liv_nasp->currentText().toUpper());
                sql_add += " '" + np + "', ";
                QString st = (ui->combo_pers_pan_liv_strt->currentIndex()==0 ? "" : ui->combo_pers_pan_liv_strt->currentText().toUpper());
                sql_add += " '" + st + "', ";
                sql_add += " " + (ui->ln_pers_pan_liv_hous->text().trimmed().isEmpty() ? "NULL" : "'" + ui->ln_pers_pan_liv_hous->text().trimmed() + "'") + ", ";
                //sql_add += " " + ui->ln_pers_pan_liv_hous->text().trimmed() + ", ";
                sql_add += " '" + ui->ln_pers_pan_liv_corp->text().trimmed().toUpper() + "', ";
                sql_add += " '" + ui->ln_pers_pan_liv_qart->text().trimmed().toUpper() + "', ";
                sql_add += " " + (liv_AOID.isEmpty() ? "NULL" : "'" + liv_AOID + "'") + ", ";
                sql_add += " " + (liv_HOUSEID.isEmpty() ? "NULL" : "'" + liv_HOUSEID + "'") + ") ";
                sql_add += " returning id ; ";


                QSqlQuery *query_add = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_add, "Добавление адреса проживания в базу данных", *query_add, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this, "Непредвиденная ошибка",
                                          "Произошла ошибка при попытке добавить запись адреса проживания в базу данных.\n\n"
                                          "Сохранение отменено.");
                    return false;
                } else if (query_add->size()>0) {
                    query_add->next();
                    id_address_liv = query_add->value(0).toInt();
                }
                delete query_add;
            }
            // запишем адрес проживания во внутренние переменные
            data_pers.liv_subj_text = ui->combo_pers_pan_liv_subj->currentText();
            data_pers.liv_dstr_text = ui->combo_pers_pan_liv_dstr->currentText();
            data_pers.liv_city_text = ui->combo_pers_pan_liv_city->currentText();
            data_pers.liv_nasp_text = ui->combo_pers_pan_liv_nasp->currentText();
            data_pers.liv_strt_text = ui->combo_pers_pan_liv_strt->currentText();
            data_pers.liv_hous = ui->ln_pers_pan_liv_hous->text().toInt();
            data_pers.liv_corp = ui->ln_pers_pan_liv_corp->text();
            data_pers.liv_qart = ui->ln_pers_pan_liv_qart->text();
            data_pers.liv_AOID = liv_AOID;
            data_pers.liv_HOUSEID = liv_HOUSEID;
        }

        // сохранение/правка персоны
        QString snils = ui->line_pers_pan_snils->text().replace("-","").replace(" ","").trimmed();
        QString fam_norm = ui->ln_pers_pan_fam->text().trimmed().toUpper().replace("Ё", "Е");
        QString im_norm  = ui->ln_pers_pan_im->text().trimmed().toUpper().replace("Ё", "Е");
        QString ot_norm  = ui->ln_pers_pan_ot->text().trimmed().toUpper().replace("Ё", "Е");
        if (data_pers.id==-1) {
            // сохраним запись в базу
            QString sql2 = "insert into persons(fam,im,ot,fam_norm,im_norm,ot_norm,sex,category,date_birth,plc_birth,date_death,snils,bomj,id_addr_reg,date_reg,addr_reg_text,id_addr_liv,addr_liv_text,oksm_birth,oksm_c,rep_id,rep_fio,rep_relation,dost, phone_code, phone_work, phone_home, phone_cell, email, status, polis_post_way, id_folder, _id_first_point, _id_first_operator, _id_last_point, _id_last_operator) ";
            sql2 += " values (";
            sql2 += " '" + ui->ln_pers_pan_fam->text().trimmed().toUpper() + "', ";
            sql2 += " '" + ui->ln_pers_pan_im->text().trimmed().toUpper() + "', ";
            sql2 += " "  + QString(ui->ch_pers_pan_ot->isChecked() ? QString("'" + ui->ln_pers_pan_ot->text().trimmed().toUpper() + "', ") : "NULL, ");
            sql2 += " '" + fam_norm + "', ";
            sql2 += " '" + im_norm + "', ";
            sql2 += " "  + QString(ui->ch_pers_pan_ot->isChecked() ? QString("'" + ot_norm + "', ") : "NULL, ");
            sql2 += " "  + QString::number(ui->combo_pers_pan_sex->currentIndex()) + ", ";
            sql2 += " "  + QString::number(ui->combo_pers_pan_category->currentData().toInt()) + ", ";
            sql2 += " '" + ui->date_pers_pan_birth->date().toString("yyyy-MM-dd") + "', ";
            sql2 += " '" + ui->ln_pers_pan_plc_birth->text().trimmed().toUpper() + "', ";
            sql2 += " "  + QString(ui->ch_pers_pan_death->isChecked() ? ("'" + ui->date_pers_pan_death->date().toString("yyyy-MM-dd") + "', ") : "NULL, ");
            sql2 += " "  + QString(ui->ch_pers_pan_snils->isChecked() ? ("'" + snils + "', ") : "NULL, ");
            sql2 += " "  + QString(ui->ch_pers_pan_reg->isChecked() ? "0, " : "1, ");
            sql2 += " "  + QString(ui->ch_pers_pan_reg->isChecked() ? (QString::number(id_address_reg) + ", ") : "NULL, ");
            sql2 += " "  + QString(ui->ch_pers_pan_reg->isChecked() ? ("'" + ui->date_pers_pan_reg->date().toString("yyyy-MM-dd") + "', ") : "NULL, ");
            sql2 += " '" + ui->ln_pers_pan_reg_text->text() + "', ";
            sql2 += " "  + QString(ui->ch_pers_pan_liv->isChecked() ? (QString::number(id_address_liv) + ", ") : "NULL, ");
            sql2 += " '" + ui->ln_pers_pan_liv_text->text() + "', ";
            sql2 += " '" + QString::number(ui->spin_pers_pan_oksm_r->value()) + "', ";
            sql2 += " '" + QString::number(ui->spin_pers_pan_oksm_c->value()) + "', ";
            sql2 += " "  + QString(ui->pan_rep->isChecked() ? QString::number(data_pers.rep_id) : "NULL") + ", ";
            sql2 += " "  + QString(ui->pan_rep->isChecked() ? ("'"+data_pers.rep_fio+"'") : "NULL") + ", ";
            sql2 += " "  + QString(ui->pan_rep->isChecked() ? QString::number(data_pers.rep_relation) : "NULL") + ", ";
            sql2 += " "  + (data_pers.dost=="______" ? QString(" NULL, ") : " '" + QString(data_pers.dost + "______").left(6) + "', ");
            QString phone_code = ui->ln_pers_pan_phone_code->text().trimmed();
            QString phone_work = ui->ln_pers_pan_phone_work->text().trimmed().replace(" ","").replace("-","").replace("(","").replace(")","").replace("+","");
            QString phone_home = ui->ln_pers_pan_phone_home->text().trimmed().replace(" ","").replace("-","").replace("(","").replace(")","").replace("+","");
            QString phone_cell = ui->ln_pers_pan_phone_cell->text().trimmed().replace(" ","").replace("-","").replace("(","").replace(")","").replace("+","");
            QString email = ui->ln_pers_pan_email->text().trimmed();
            sql2 += " " + (phone_code.isEmpty()?"NULL": ("'"+phone_code+"'")) + ", ";
            sql2 += " " + (phone_work.length()<5 ?"NULL": ("'"+phone_work+"'")) + ", ";
            sql2 += " " + (phone_home.length()<5 ?"NULL": ("'"+phone_home+"'")) + ", ";
            sql2 += " " + (phone_cell.length()<5 ?"NULL": ("'"+phone_cell+"'")) + ", ";
            sql2 += " " + (email.isEmpty()?"NULL": ("'"+email+"'")) + ", ";
            sql2 += " " + QString::number(ui->combo_polis_post_way->currentIndex()) + ", ";
            sql2 += " 0, ";
            sql2 += " " + ( (ui->ch_folder->isChecked()&&ui->combo_folder->currentIndex()>0) ? QString::number(ui->combo_folder->currentData().toInt()) : "NULL") + ", ";
            sql2 += " " + QString::number(data_app.id_point)    + ", ";
            sql2 += " " + QString::number(data_app.id_operator) + ", ";
            sql2 += " " + QString::number(data_app.id_point)    + ", ";
            sql2 += " " + QString::number(data_app.id_operator) + ") ";
            sql2 += " returning id ; ";

            QSqlQuery *query2 = new QSqlQuery(db);
            if (!mySQL.exec(this, sql2, "Добавление новой персоны", *query2, true, db, data_app)) {
                delete query2;
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка",
                                      "Произошла ошибка при добавлении персоны в базу данных.\n\n"
                                      "Сохранение отменено.");
                return false;
            } else if (query2->size()>0) {
                query2->next();
                data_pers.id = query2->value(0).toInt();
                QMessageBox::information(this,"Запись добавлена",
                                         "Запись добавлена");
            }
        } else {
            // изменим текущую запись
            QString phone_code = ui->ln_pers_pan_phone_code->text().trimmed();
            QString phone_work = ui->ln_pers_pan_phone_work->text().trimmed().replace(" ","").replace("-","").replace("(","").replace(")","").replace("+","");
            QString phone_home = ui->ln_pers_pan_phone_home->text().trimmed().replace(" ","").replace("-","").replace("(","").replace(")","").replace("+","");
            QString phone_cell = ui->ln_pers_pan_phone_cell->text().trimmed().replace(" ","").replace("-","").replace("(","").replace(")","").replace("+","");
            QString email = ui->ln_pers_pan_email->text().trimmed();

            if (ui->pan_rep->isChecked())
                data_pers.rep_relation = ui->combo_pers_pan_rep_rel->currentIndex();
            else
                data_pers.rep_relation = 0;

            QString sql2;
            sql2 = "update persons "
                   "   set status= 500 - status "
                   " where id=" + QString::number(data_pers.id) + " "
                   "   and (status>=500) ; "

                   "update persons "
                   "   set status= status + 500 "
                   " where id=" + QString::number(data_pers.id) + " "
                   "   and (status<=-500) ; "

                   "update persons "
                   "   set _id_last_point=" + QString::number(data_app.id_point) + ", "
                   "       _id_last_operator=" + QString::number(data_app.id_operator) + ", "
                   "       fam='" + ui->ln_pers_pan_fam->text().trimmed().toUpper() + "', "
                   "       im='" + ui->ln_pers_pan_im->text().trimmed().toUpper() + "', "
                   "       ot=" + (ui->ch_pers_pan_ot->isChecked() ? (QString(" '") + ui->ln_pers_pan_ot->text().trimmed().toUpper() + "' ") : " NULL ") + ", "
                   "       fam_norm='" + fam_norm + "', "
                   "       im_norm='" + im_norm + "', "
                   "       ot_norm=" + (ui->ch_pers_pan_ot->isChecked() ? (QString(" '") + ot_norm + "' ") : " NULL ") + ", "
                   "       sex="  + QString::number(ui->combo_pers_pan_sex->currentIndex()) + ", "
                   "       category="  + QString::number(ui->combo_pers_pan_category->currentData().toInt()) + ", "
                   "       date_birth='" + ui->date_pers_pan_birth->date().toString("yyyy-MM-dd") + "', "
                   "       plc_birth='" + ui->ln_pers_pan_plc_birth->text().trimmed().toUpper() + "', "
                   "       date_death=" + (ui->ch_pers_pan_death->isChecked() ? QString(" '" + ui->date_pers_pan_death->date().toString("dd.MM.yyyy") + "' ") : " NULL ") + ", "
                   "       snils=" + (ui->ch_pers_pan_snils->isChecked() ? (QString(" '") + snils + "' ") : " NULL ") + ", "
                   "       bomj=" + (ui->ch_pers_pan_reg->isChecked() ? QString(" 0 ") : " 1 ") + ", "
                   "       id_addr_reg=" + (ui->ch_pers_pan_reg->isChecked() ? (QString(" ") + QString::number(id_address_reg) + " ") : " NULL ") + ", "
                   "       date_reg=" + (ui->ch_pers_pan_reg->isChecked() ? QString(" '" + ui->date_pers_pan_reg->date().toString("yyyy-MM-dd") + "' ") : " NULL ") + ", "
                   "       addr_reg_text='" + ui->ln_pers_pan_reg_text->text() + "', "
                   "       id_addr_liv=" + (ui->ch_pers_pan_liv->isChecked() ? (QString(" ") + QString::number(id_address_liv) + " ") : " NULL ") + ", "
                   "       addr_liv_text='" + ui->ln_pers_pan_liv_text->text() + "', "
                   "       oksm_birth='" + QString::number(ui->spin_pers_pan_oksm_r->value()) + "', "
                   "       oksm_c='" + QString::number(ui->spin_pers_pan_oksm_c->value()) + "', "
                   "       rep_id=" + (ui->pan_rep->isChecked() ? (QString(" ") + QString::number(data_pers.rep_id) + " ") : " NULL ") + ", "
                   "       rep_fio=" + (ui->pan_rep->isChecked() ? (QString(" '")+ data_pers.rep_fio + "' "):" NULL ") + ", "
                   "       rep_relation=" + (ui->pan_rep->isChecked() ? (QString(" ") + QString::number(data_pers.rep_relation) + " ") : " NULL ") + ", "
                   "       dost=" + (data_pers.dost=="______" ? QString(" NULL ") : (" '" + QString(data_pers.dost + "______").left(6) + "' ")) + ", "
                   "       phone_code=" + (phone_code.isEmpty()?"NULL":("'"+phone_code+"'")) + ", "
                   "       phone_work=" + (phone_work.length()<5 ?"NULL":("'"+phone_work+"'")) + ", "
                   "       phone_home=" + (phone_home.length()<5 ?"NULL":("'"+phone_home+"'")) + ", "
                   "       phone_cell=" + (phone_cell.length()<5 ?"NULL":("'"+phone_cell+"'")) + ", "
                   "       email=" + (email.isEmpty()?"NULL":("'"+email+"'")) + ", "
                   "       " + (ui->ch_folder->isChecked() ? (ui->combo_folder->currentIndex()>0 ? (" id_folder=" + QString::number(ui->combo_folder->currentData().toInt()) + ", ") : " id_folder=NULL, ") : " ") + " "
                   "       polis_post_way=" + QString::number(ui->combo_polis_post_way->currentIndex()) + " "
                   " where id=" + QString::number(data_pers.id) + " ; ";

            QSqlQuery *query2 = new QSqlQuery(db);
            if (!mySQL.exec(this, sql2, "Изменение персоны", *query2, true, db, data_app)) {
                delete query2;
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка",
                                      "Произошла ошибка при изменении данных персоны в базе данных.\n\n"
                                      "Сохранение отменено.");
                return false;
            } else {
                query2->next();
                QMessageBox::information(this,"Запись изменена",
                                         "Запись изменена");
            }
            delete query2;

            // Генерация события П040
            // получим действующий полис единого образца, связанный с отправленным в фонд событием
            QString sql_get_pol = "";
            sql_get_pol += "select p.id "
                           "  from persons e "
                           "       left join polises p on ( p.id in (select * from get_pers_polis(" + QString::number(data_pers.id) + ", NULL))) "
                           "       left join events a on(a.id_polis=p.id and left(a.event_code,3) not in ('П02', 'П04')) "
                           " where e.id=" + QString::number(data_pers.id) + " "     // полис заданной персоны
                           "   and st_person(e.id, NULL)>-100 "                     // для текущего значения нет смысла лезть в историю
                           "   and e.status>-100 "
                           "   and a.status<>0 "    // только для полисов отправленных в фонд
                           " limit 1 ; ";

            QSqlQuery *query_get_pol = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_get_pol, "Получим полис изменяемой персоны", *query_get_pol, true, db, data_app)) {
                delete query_get_pol;
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка",
                                      "Произошла ошибка при запросе действующего полиса персоны для генерации события П040.\n\n"
                                      "Сохранение отменено.");
                return false;
            }
            // контроль повторных полисов
            if (query_get_pol->size()>1) {
                delete query_get_pol;
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка",
                                      "При запросе действующего полиса персоны для генерации события П040 оказалось что у застрахованного более 1-го действующего полиса.\n\n"
                                      "Сохранение отменено.");
                return false;
            }
            if (query_get_pol->size()==1) {
                if (ui->ch_p040->isChecked()) {
                    // добавим событие П040
                    query_get_pol->next();
                    int id_polis = query_get_pol->value(0).toInt();
                    QString sql_p040 = "";
                    sql_p040 += "insert into events (id_point,id_operator,id_polis,id_vizit,event_code,event_dt,event_time,comment, status, id_person, id_person_old, id_udl, id_drp) "
                                "values (" + QString::number(data_app.id_point) + ", "
                                "        " + QString::number(data_app.id_operator) + ", "
                                "        " + QString::number(id_polis) + ", "
                                "        -1, "
                                "        'П040', "
                                "        '" + QDate::currentDate().toString("yyyy-MM-dd") + "', "
                                "        '" + QTime::currentTime().toString("hh:mm:ss") + "', "
                                "        'П040 - Изменение идентифицирующих данных застрахованного лица', "
                                "        -1, "
                                "        " + QString::number(data_pers.id) + ", "
                                "        " + (data_pers.id_old>0 ? QString::number(data_pers.id_old) : "NULL") + ", "
                                "        " + (data_pers.id_udl>0 ? QString::number(data_pers.id_udl) : "NULL") + ", "
                                "        " + (data_pers.id_drp>0 ? QString::number(data_pers.id_drp) : "NULL") + ") ; ";
                    QSqlQuery *query_p040 = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_p040, "Добавим событие П040", *query_p040, true, db, data_app)) {
                        db.rollback();
                        QMessageBox::critical(this, "Непредвиденная ошибка",
                                              "Произошла ошибка при генерации события П040.\n\n"
                                              "Сохранение данных персоны отменено.");
                        return false;
                    }
                    //QMessageBox::information(this, "Сформировано событие П040", "Информация об этом застрахованном ранее уже направлялась в ТФОМС. \nДля обновления сведений в ЦС сформировано событие П040.\n");
                }
            }
            delete query_get_pol;
        }

        if ( ui->ch_pers_pan_fam_old->isChecked()        ||
             ui->ch_pers_pan_im_old->isChecked()         ||
             ui->ch_pers_pan_ot_old->isChecked()         ||
             ui->ch_pers_pan_sex_old->isChecked()        ||
             ui->ch_pers_pan_date_birth_old->isChecked() ||
             ui->ch_pers_pan_snils_old->isChecked()      ||
             ui->ch_pers_pan_plc_birth_old->isChecked() ) {

            // удалим старую запись PERSONS_OLD
            QString sql_del = "delete from persons_old where id_person=" + QString::number(data_pers.id) + " ; ";
            QSqlQuery *query_del = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_del, "Удаление старой записи PERSONS_OLD", *query_del, true, db, data_app)) {
                delete query_del;
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка", "При удалении старой записи PERSONS_OLD произошла непредвиденная ошибка.\n\nСохранение данных персоны отменено.");
                return false;
            }
            delete query_del;

            if ( ui->ch_pers_pan_date_birth_old->isChecked()
                 && data_pers.date_birth_old<=QDate(1920,1,1) ) {
                ui->ch_pers_pan_date_birth_old->setChecked(false);
                data_pers.date_birth_old = data_pers.date_birth;
            }

            // добавим новую запись PERSONS_OLD
            QString sql_ins = "insert into persons_old (id_person, old_fam, old_im, old_ot, old_sex, old_date_birth, old_enp, old_snils, old_plc_birth) "
                              "values (" + QString::number(data_pers.id) + ", "
                                         + "'" + ( data_pers.fam_old.trimmed().toUpper().isEmpty() ? data_pers.fam.trimmed().toUpper() : data_pers.fam_old.trimmed().toUpper() ) + "', "
                                         + "'" + ( data_pers.im_old.trimmed().toUpper().isEmpty() ? data_pers.im.trimmed().toUpper() : data_pers.im_old.trimmed().toUpper() ) + "', "
                                         + ( ui->ch_pers_pan_ot_old->isChecked() ? (data_pers.ot_old.trimmed().toUpper().isEmpty() ? ("'" + data_pers.ot.trimmed().toUpper() + "'") : ("'" + data_pers.ot_old.trimmed().toUpper() + "'")) : "NULL") + ", "
                                         + ( (data_pers.sex_old!=1 && data_pers.sex_old!=2) ? QString::number(data_pers.sex) : QString::number(data_pers.sex_old) ) + ", "
                                         + ( ui->ch_pers_pan_date_birth_old->isChecked() ? ("'" + data_pers.date_birth_old.toString("yyyy-MM-dd") + "'") : ("'" + data_pers.date_birth.toString("yyyy-MM-dd") + "'") ) + ", "
                                         + ( QString(data_pers.enp_old.replace("-","").replace(" ","")).isEmpty() ? "NULL" : QString("'" + data_pers.enp_old.replace("-","").replace(" ","") + "'") ) + ", "
                                         + ( ui->ch_pers_pan_snils_old->isChecked() ? ("'" + ( data_pers.snils_old.replace("-","").replace(" ","").isEmpty() ? data_pers.snils.replace("-","").replace(" ","") : data_pers.snils_old.replace("-","").replace(" ","") ) + "' ") : "NULL") + ", "
                                         + "'" + data_pers.plc_birth_old.toUpper() + "') "
                              "returning id ; ";
            QSqlQuery *query_ins = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_ins, "Вставка новой записи PERSONS_OLD", *query_ins, true, db, data_app)) {
                delete query_ins;
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка", "При добавлении новой записи PERSONS_OLD произошла непредвиденная ошибка.\n\nСохранение данных персоны отменено.");
                return false;
            }
            query_ins->next();
            data_pers.id_old = query_ins->value(0).toInt();
            delete query_ins;
        }



        if ( ui->combo_pers_pan_category->currentIndex()>10
             && ui->combo_pers_pan_category->currentIndex()<15 ) {
            // удалим старую запись PERSONS_EAES
            QString sql_del = "delete from persons_eaes "
                              " where id_person=" + QString::number(data_pers.id) + " "
                              "   and status=1 ; ";
            QSqlQuery *query_del = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_del, "Удаление старой записи PERSONS_EAES", *query_del, true, db, data_app)) {
                delete query_del;
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка", "При закрытии старой записи PERSONS_EAES произошла непредвиденная ошибка.\n\nСохранение данных персоны отменено.");
                return false;
            }
            delete query_del;

            // добавим новую запись PERSONS_EAES
            QString sql_ins = "insert into persons_eaes (id_person, category, category_text, residence, residence_exp, status) "
                              "values (" + QString::number(data_pers.id) + ", "
                                         + QString::number(data_pers.category) + ", "
                                         + QString("'" + ui->combo_pers_pan_category->currentText() + "' ") + ", "
                                         + QString("'" + ui->line_eaes_residence->text().trimmed().simplified() + "' ") + ", "
                                         + QString("'" + ui->date_eaes_reside_exp->date().toString("yyyy-MM-dd") + "' ") + ", "
                                         + "1 ) "
                              "returning id ; ";
            QSqlQuery *query_ins = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_ins, "Вставка новой записи PERSONS_EAES", *query_ins, true, db, data_app)) {
                delete query_ins;
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка", "При добавлении новой записи PERSONS_EAES произошла непредвиденная ошибка.\n\nСохранение данных персоны отменено.");
                return false;
            }
            query_ins->next();
            delete query_ins;

        } else {
            // закроем старую запись PERSONS_EAES
            QString sql_close = "update persons_eaes "
                              "   set status=0 "
                              " where id_person=" + QString::number(data_pers.id) + " "
                              "   and status=1 ; ";
            QSqlQuery *query_close = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_close, "Удаление старой записи PERSONS_EAES", *query_close, true, db, data_app)) {
                delete query_close;
                db.rollback();
                QMessageBox::critical(this, "Непредвиденная ошибка", "При закрытии старой записи PERSONS_EAES произошла непредвиденная ошибка.\n\nСохранение данных персоны отменено.");
                return false;
            }
            delete query_close;
        }

        refresh_pers_eaes();


        // обновим связки персоны с документом, полисом и прикреплением
        QString sql_links = "select * from update_pers_links(" + QString::number(data_pers.id) + ", CURRENT_DATE) ; ";
        QSqlQuery *query_links = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_links, "обновим связки персоны с документом, полисом и прикреплением", *query_links, true, db, data_app)) {
            QMessageBox::critical(this, "Непредвиденная ошибка", "При попытке обновить связки персоны с документом, полисом и прикреплением, произошла ошибка.\n\nОперация отменена.");
        }
        delete query_links;

        db.commit();
        b_need_save(false);
        ui->bn_pers_document->setEnabled(true);

        ui->bn_pers_pan_old_data->setText(data_pers.id_old>0 ? "Удалить старые данные" : "Добавить старые данные");
        ui->bn_pers_pan_old_data->setChecked(data_pers.id_old>0);

    } catch (...) {
        db.rollback();
        QMessageBox::critical(this, "Непредвиденная ошибка", "Проверьте корректность введённых данных");
        on_split_main_splitterMoved(0,1);
        ui->bn_pers_document->setEnabled(false);
        return false;
    }

    on_split_main_splitterMoved(0,1);
    return true;
}

void persons_wnd::on_bn_pers_document_clicked() {
    // сохраним все изменения на панели
    if (!save_pers_data())
        return;
    // скроем таблицу персон и панель свойств персоны, покажем панель документов
    ui->show_pers_tabl->setChecked(false);
    ui->show_pers_data->setChecked(true);
    ui->show_pers_docs->setChecked(true);
    on_show_pers_tabl_clicked(false);
    on_show_pers_data_clicked(true);
    on_show_pers_docs_clicked(true);
    ui->show_pers_tabl->setEnabled(false);
    ui->show_pers_data->setEnabled(true);
    ui->show_pers_docs->setEnabled(true);

    ui->group_person_docs->setVisible(true);
    ui->group_person_docs->setChecked(true);
    on_group_person_docs_clicked(true);

    ui->pan_docs_tab->setEnabled(true);
    ui->pan_assig->setEnabled(true);
    ui->pan_docs_photo->setEnabled(true);

    refresh_pers_docs();
    on_split_main_splitterMoved(0,1);
    //ui->bn_pers_document->setEnabled(false);
}

void persons_wnd::on_bn_pers_pers_pan_back_clicked() {
    if (ui->pan_pers_save->isVisible() &&
            QMessageBox::warning(this,
                                 "Есть несохранённые изменения",
                                 "На окне есть несохранённые изменения.\nВы действительно хотите закрыть окно без сохранения несохранённых данных?",
                                 QMessageBox::Yes|QMessageBox::Cancel,
                                 QMessageBox::Cancel)==QMessageBox::Cancel) {
        return;
    }
    this->setCursor(Qt::WaitCursor);
    // скроем панель свойств персоны и панель документов, покажем таблицу персон
    ui->show_pers_tabl->setChecked(true);
    ui->show_pers_data->setChecked(false);
    ui->show_pers_docs->setChecked(false);
    on_show_pers_tabl_clicked(true);
    on_show_pers_data_clicked(false);
    on_show_pers_docs_clicked(false);
    ui->show_pers_tabl->setEnabled(true);
    ui->show_pers_data->setEnabled(false);
    ui->show_pers_docs->setEnabled(false);
    ui->ch_tab_limit->setChecked(true);

    refresh_persons_tab();
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_bn_pers_doc_back_clicked() {
    this->setCursor(Qt::WaitCursor);
    // скроем панель документов и таблицу персон, покажем панель свойств персоны
    ui->show_pers_tabl->setChecked(false);
    ui->show_pers_data->setChecked(true);
    ui->show_pers_docs->setChecked(false);
    on_show_pers_tabl_clicked(false);
    on_show_pers_data_clicked(true);
    on_show_pers_docs_clicked(false);
    ui->show_pers_tabl->setEnabled(false);
    ui->show_pers_data->setEnabled(true);
    ui->show_pers_docs->setEnabled(true);

    refresh_persons_tab();
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::refresh_pers_docs() {
    this->setCursor(Qt::WaitCursor);
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    QString pers_docs_sql = "select d.id, d.doc_type, d.doc_ser, d.doc_num, d.doc_date, d.doc_exp, f.id as id_doctype, f.text as type_text, d.status, d.org_code, d.doc_org, "
                            "       f.mask_ser as type_mask_ser, f.mask_num as type_mask_num, f.date_beg as type_date_beg, f.date_end as type_date_end, "
                            "       case when d.doc_exp is null then 1 else 0 end as has_doc_exp "
                            "  from persons_docs d "
                            "  left join spr_f011 f on(d.doc_type=f.code) "
                            " where d.id_person=" + QString::number(data_pers.id);
    if (ui->ch_docs_tab_only_acts->isChecked())
        pers_docs_sql += "  and d.status=1 and d.doc_date<=CURRENT_DATE and ((d.doc_exp is NULL) or (d.doc_exp>CURRENT_DATE)) ";
    pers_docs_sql += " order by status desc ; ";

    model_pers_docs.setQuery(pers_docs_sql,db);
    QString err2 = model_pers_docs.lastError().driverText();

    // подключаем модель из БД
    ui->tab_pers_docs->setModel(&model_pers_docs);

    // обновляем таблицу
    ui->tab_pers_docs->reset();

    // задаём ширину колонок
    ui->tab_pers_docs->setColumnWidth( 0,  2);     // d.id
    ui->tab_pers_docs->setColumnWidth( 1,  2);     // d.doc_type
    ui->tab_pers_docs->setColumnWidth( 2, 50);     // d.doc_ser
    ui->tab_pers_docs->setColumnWidth( 3, 80);     // d.doc_num
    ui->tab_pers_docs->setColumnWidth( 4, 80);     // d.doc_date
    ui->tab_pers_docs->setColumnWidth( 5, 80);     // d.doc_exp
    ui->tab_pers_docs->setColumnWidth( 6,  2);     // f.id as id_doctype
    ui->tab_pers_docs->setColumnWidth( 7,200);     // f.text as type_text
    ui->tab_pers_docs->setColumnWidth( 8, 30);     // d.status
    ui->tab_pers_docs->setColumnWidth( 9, 50);     // d.org_code
    ui->tab_pers_docs->setColumnWidth(10,200);     // d.doc_org
    ui->tab_pers_docs->setColumnWidth(11,  2);     // f.mask_ser as type_mask_ser
    ui->tab_pers_docs->setColumnWidth(12,  2);     // f.mask_num as type_mask_num
    ui->tab_pers_docs->setColumnWidth(13,  2);     // f.date_beg as type_date_beg
    ui->tab_pers_docs->setColumnWidth(14,  2);     // f.date_end as type_date_end
    ui->tab_pers_docs->setColumnWidth(15,  2);     // case when d.doc_exp is null then 1 else 0 end as has_doc_exp

    // правим заголовки
    model_pers_docs.setHeaderData( 2, Qt::Horizontal, ("сер."));
    model_pers_docs.setHeaderData( 3, Qt::Horizontal, ("номер"));
    model_pers_docs.setHeaderData( 4, Qt::Horizontal, ("дата выдачи"));
    model_pers_docs.setHeaderData( 5, Qt::Horizontal, ("срок дейст."));
    model_pers_docs.setHeaderData( 7, Qt::Horizontal, ("тип документа"));
    model_pers_docs.setHeaderData( 8, Qt::Horizontal, ("акт."));
    model_pers_docs.setHeaderData( 9, Qt::Horizontal, ("код"));
    model_pers_docs.setHeaderData(10, Qt::Horizontal, ("выдан подразд."));
    model_pers_docs.setHeaderData(11, Qt::Horizontal, ("маска серии"));
    model_pers_docs.setHeaderData(12, Qt::Horizontal, ("маска номера"));
    model_pers_docs.setHeaderData(13, Qt::Horizontal, ("выдаётся с"));
    model_pers_docs.setHeaderData(14, Qt::Horizontal, ("выдавался до"));
    model_pers_docs.setHeaderData(15, Qt::Horizontal, ("огранич-е?"));
    ui->tab_pers_docs->repaint();

    refresh_docs_pan_type();

    ui->spin_docs_pan_type->setValue(-1);
    ui->combo_docs_pan_type->setCurrentIndex(-1);
    ui->line_docs_pan_ser->setText("");
    ui->line_docs_pan_num->setText("");
    ui->date_docs_pan_start->setDate(QDate(1900,1,1));
    ui->date_docs_pan_exp->setDate(QDate(1900,1,1));
    ui->ch_docs_pan_exp->setChecked(false);
    ui->combo_docs_pan_orgcode->setCurrentIndex(-1);
    ui->line_docs_pan_ogrname->setText("");
    ui->ch_docs_pan_actual->setChecked(true);
    ui->ch_docs_pan_olddoc->setChecked(false);
    ui->ch_docs_pan_olddoc->setEnabled(false);

    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_bn_docs_refresh_clicked() {
    refresh_pers_docs();
    ui->ch_docs_tab_only_acts->setEnabled(true);

    // принудительно активируем таблицу документов
    ui->frame_2->setEnabled(true);
    ui->tab_pers_docs->setEnabled(true);
    ui->frame_3->setEnabled(true);
}

void persons_wnd::on_bn_pers_docs_back_clicked() {
    // скроем таблицу персон и панель свойств персоны, покажем панель документов
    ui->show_pers_tabl->setChecked(false);
    ui->show_pers_data->setChecked(true);
    ui->show_pers_docs->setChecked(false);
    on_show_pers_tabl_clicked(false);
    on_show_pers_data_clicked(true);
    on_show_pers_docs_clicked(false);
    ui->show_pers_tabl->setEnabled(false);
    ui->show_pers_data->setEnabled(true);
    ui->show_pers_docs->setEnabled(true);
}

QString persons_wnd::myMASK(QString text0, QString mask0) {
    QString sss = "019АЯAZ -IVXLCRБЦ";
    QString aRus = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
    QString aLat = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    QString aRom = "IVXLC";
    QString aNum = "0123456789";
    QString aAdd = "- ";
    // очистим строку
    QString text = text0.toUpper().simplified();
    QString mask = mask0.toUpper().simplified();
    QString res_t = "";

    // проверка на пустую серию разрешения на временное убежище
    if ( mask=="ЦЦ" &&
        (text.trimmed().isEmpty() || text.trimmed()=="ВУ")
       ) {
        //res_t = "ВУ";
        res_t = "";
        return res_t;
    }
    if (text.isEmpty())  return "";
    // проверим число 9 и 0
    int n0=0, n9=0;
    for (int i=0; i<mask.size(); i++) {
        if (mask.at(i)==sss.at(0))  n0++;
        if (mask.at(i)==sss.at(2))  n9++;
        if (mask.at(i)==sss.at(16)) n0++;
    }
    // проверим на число
    if (n0+n9==mask.size()) {
        // это число. Проверим, все ли символы строки - цифры и сколько этих цифр
        int n_num=0;
        for (int i=0; i<text.size(); i++) {
            if ( aNum.indexOf(text.at(i))>=0 )
            {
                n_num++;
            }
        }
        if (n_num==text.size() && n_num>=n9 && n_num<=(n0+n9)) {
            res_t = text;
            return res_t;
        }
    }
    // проверка на произвольную строку
    if (mask=="S1") {
        bool f = true;
        for (int i=0; i<text.size(); i++) {
            if ( aRus.indexOf(text.at(i))>=0 ||
                 aLat.indexOf(text.at(i))>=0 ||
                 aAdd.indexOf(text.at(i))>=0 ||
                 aNum.indexOf(text.at(i))>=0 )
            {
                res_t += text.at(i);
                f = true;
            } else  {
                f = false;
                break;
            }
        }
        if (f) {
            return res_t;
        } else {
            return res_t;
            //return "";
        }
    }
    // проверка на произвольную строку в одном алфавите
    if (mask=="S") {
        bool f = true;
        bool fR = false;
        bool fE = false;
        for (int i=0; i<text.size(); i++) {
            if (aRus.indexOf(text.at(i))>=0 && !fE) {
                res_t += text.at(i);
                f = true;
                fR = true;
            } else if (aLat.indexOf(text.at(i))>=0 && !fR) {
                res_t += text.at(i);
                f = true;
                fE = true;
            } else if (aAdd.indexOf(text.at(i))>=0) {
                res_t += text.at(i);
                f = true;
            } else if (aNum.indexOf(text.at(i))>=0) {
                res_t += text.at(i);
                f = true;
            } else  {
                f = false;
                break;
            }
        }
        if (f) {
            return res_t;
        } else {
            return res_t;
            //return "";
        }
    }
    // проверка на маску
    int pos_text = 0;
    int pos_mask = 0;
    int nR = 0;
    for (int i=0; i<text.size(); i++) {
        pos_text = i;
        if (pos_text>=text.length() || pos_mask>=mask.length())
            break;
        QChar c = text.at(pos_text);
        QChar m = mask.at(pos_mask);
        if (m==sss.at(15) && aRus.indexOf(QString(c))>=0 ) {
            res_t += c;
            pos_mask++;
            nR=0;
            continue;
        } else if (m==sss.at(2) && aNum.indexOf(QString(c))>=0 ) {
            res_t +=c;
            pos_mask++;
            nR=0;
            continue;
        } else if (m==sss.at(8) && c==sss.at(8)) {
            res_t += c;
            pos_mask++;
            nR=0;
            continue;
        } else if (m==sss.at(7) && c==sss.at(7)) {
            res_t += c;
            pos_mask++;
            nR=0;
            continue;
        } else if (m==sss.at(14) && aRom.indexOf(QString(c))>=0 ) {
            res_t += c;
            //pos_mask++;
            nR++;
        } else if (m==sss.at(14) && aRom.indexOf(QString(c))<0 ) {
            if (nR==0) {
                break;
                //return res_t;
            } else {
                pos_mask++;
                pos_text--;
                i--;
            }
        }
    }
    // проверим, надо ли добавлять разделитель ' ' или '-'
    //pos_text++;
    //pos_mask++;
    if (pos_mask<mask.length()) {
        if ( mask.at(pos_mask)==sss.at(7) || mask.at(pos_mask)==sss.at(8) ) {
            res_t += mask.at(pos_mask);
        }
    }
    return res_t;
}

void persons_wnd::refresh_docs_pan_orgcodes() {
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающего списка типов документов
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select org_code, org_name "
                  " from public.orgs i "
                  " order by org_code ; ";
    mySQL.exec(this, sql, QString("Справочник подразделений ФМС"), *query, true, db, data_app);
    ui->combo_docs_pan_orgcode->clear();
    doc_org_code.clear();
    ui->combo_docs_pan_orgcode->addItem(" - нет - ", "");
    doc_org_code.append(" - нет - ");
    while (query->next()) {
        QString org_code = query->value(0).toString();
        QString org_name = query->value(1).toString();
        ui->combo_docs_pan_orgcode->addItem(org_code, org_name);
        doc_org_code.append(org_code);
        doc_org_name.append(org_name);
    }
    if (data_doc.has_org_code) {
        int n = doc_org_code.indexOf(data_doc.org_code);
        if (n<0) {
            ui->combo_docs_pan_orgcode->setCurrentText(data_doc.org_code);
        } else {
            ui->combo_docs_pan_orgcode->setCurrentIndex(n);
        }
    } else {
        ui->combo_docs_pan_orgcode->setCurrentIndex(0);
    }
    /*
    if (data_doc.has_org_code) {
        ui->combo_docs_pan_orgcode->setCurrentIndex(doc_org_code.indexOf(data_doc.org_code));
    } else {
        ui->combo_docs_pan_orgcode->setCurrentIndex(0);
    }
    */
    delete query;
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_bn_docs_new_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    if (QMessageBox::question(this,
                              "Новый документ?",
                              "Вы действительно хотите добавить новый документ, удостоверяющий личность выбранного застрахованного лица?",
                              QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes) {
        ui->tab_pers_docs->setEnabled(false);
        ui->bn_docs_refresh->setEnabled(false);
        ui->pan_docs_photo->setEnabled(false);
        ui->frame_bn_docs->setEnabled(false);
        ui->bn_docs_new->setEnabled(false);
        ui->bn_docs_edit->setEnabled(false);
        ui->bn_docs_save->setEnabled(true);
        ui->bn_docs_cansel->setEnabled(true);
        ui->bn_docs_del->setEnabled(false);
        ui->pan_document->setEnabled(true);

        // новый документ
        this->setCursor(Qt::WaitCursor);

        data_doc.id        = -1;
        data_doc.doc_type  = 0;
        data_doc.doc_ser   = "";
        data_doc.doc_num   = "";
        data_doc.doc_date  = QDate(1920,1,1);
        data_doc.doc_exp   = QDate(1920,1,1);
        data_doc.has_doc_exp= 0;
        data_doc.doc_org   = "";
        data_doc.status    = 1;
        data_doc.id_doctype= 0;
        data_doc.doc_name  = "";
        data_doc.mask_ser  = doc_ser_mask.at(0);
        data_doc.mask_num  = doc_num_mask.at(0);
        data_doc.type_begin= QDate(1920,1,1);
        data_doc.type_end  = QDate(1920,1,1);

        ui->spin_docs_pan_type->setValue(-1);
        ui->combo_docs_pan_type->setCurrentIndex(-1);
        ui->line_docs_pan_ser->setText("");
        ui->line_docs_pan_num->setText("");
        ui->date_docs_pan_start->setDate(QDate(1900,1,1));
        ui->date_docs_pan_exp->setDate(QDate(1900,1,1));
        ui->ch_docs_pan_exp->setChecked(false);
        ui->combo_docs_pan_orgcode->setCurrentIndex(-1);
        ui->line_docs_pan_ogrname->setText("");
        ui->ch_docs_pan_actual->setChecked(true);
        ui->ch_docs_pan_olddoc->setChecked(false);
        ui->ch_docs_pan_olddoc->setEnabled(false);

        ui->lab_docs_pan_mask->setText(data_doc.mask_ser + " № " + data_doc.mask_num);

        // для временного убежища серия фиксированная - "ВУ"
        if (ui->combo_docs_pan_type->currentData().toInt()==25) {
            ui->line_docs_pan_ser->setText("ВУ");
            ui->line_docs_pan_ser->setEnabled(false);
        } else {
            ui->line_docs_pan_ser->setText("");
            ui->line_docs_pan_ser->setEnabled(true);
        }
        ui->line_docs_pan_num->setText(""); //myMASK(data_doc.doc_num, data_doc.mask_num));

        refresh_docs_pan_orgcodes();

        this->setCursor(Qt::ArrowCursor);
    }
    refresh_pers_docs();
    on_split_main_splitterMoved(0,1);
}

void persons_wnd::on_bn_docs_edit_clicked() {
    // проверим выделенную строку
    QModelIndexList indexes = ui->tab_pers_docs->selectionModel()->selection().indexes();

    if (indexes.size()==0) {
        QMessageBox::warning(this, "Ничего не выбрано!", "Выберите в списке документ, который хотите исправить.");
        return;
    }

    ui->tab_pers_docs->setEnabled(false);
    ui->bn_docs_refresh->setEnabled(false);
    ui->pan_docs_photo->setEnabled(false);
    ui->frame_bn_docs->setEnabled(false);
    ui->bn_docs_edit->setEnabled(false);
    ui->bn_docs_new->setEnabled(false);
    ui->bn_docs_save->setEnabled(true);
    ui->bn_docs_cansel->setEnabled(true);
    ui->bn_docs_del->setEnabled(false);
    ui->pan_document->setEnabled(true);
    ui->ch_docs_pan_actual->setEnabled(true);
    ui->ch_docs_pan_olddoc->setEnabled(false);
    ui->ch_docs_pan_olddoc->setEnabled(false);

    ui->lab_docs_pan_mask->setText(data_doc.mask_ser + " № " + data_doc.mask_num);

    // для временного убежища серия фиксированная - "ВУ"
    if (ui->combo_docs_pan_type->currentData().toInt()==25) {
        // ВУ - серия ВУ
        ui->line_docs_pan_ser->setText("ВУ");
        ui->line_docs_pan_num->setText(myMASK(data_doc.doc_num, data_doc.mask_num));
        ui->line_docs_pan_ser->setEnabled(false);
    } else if (ui->combo_docs_pan_type->currentData().toInt()==21) {
        // иностранный документ - серия и номер как есть
        ui->line_docs_pan_ser->setText(data_doc.doc_ser);
        ui->line_docs_pan_num->setText(data_doc.doc_num);
        ui->line_docs_pan_ser->setEnabled(true);
    } else if (ui->combo_docs_pan_type->currentData().toInt()==23 && data_app.ocato=="38000") {
        // РВП в Курске - серия и номер как есть
        ui->line_docs_pan_ser->setText(data_doc.doc_ser);
        ui->line_docs_pan_num->setText(data_doc.doc_num);
        ui->line_docs_pan_ser->setEnabled(true);
    } else {
        //остальные документы - проверка серии и номера по маске
        ui->line_docs_pan_ser->setText(myMASK(data_doc.doc_ser, data_doc.mask_ser));
        ui->line_docs_pan_num->setText(myMASK(data_doc.doc_num, data_doc.mask_num));
        ui->line_docs_pan_ser->setEnabled(true);
    }
    ui->date_docs_pan_start->setDate(data_doc.doc_date);
    ui->date_docs_pan_exp->setDate(data_doc.doc_exp);
    ui->line_docs_pan_ogrname->setText(data_doc.doc_org);
    ui->ch_docs_pan_actual->setChecked(data_doc.status==1);
    ui->ch_docs_pan_olddoc->setChecked(data_doc.status==2);
    ui->ch_docs_pan_olddoc->setEnabled(data_doc.status!=1);

    bool has_org_code = data_doc.has_org_code;
    refresh_docs_pan_orgcodes();

    data_doc.has_org_code = has_org_code;
    if (data_doc.has_org_code) {
        int n = doc_org_code.indexOf(data_doc.org_code);
        if (n<0) {
            // такая организация не известна
            ui->combo_docs_pan_orgcode->setCurrentText(data_doc.org_code);
            if ( !data_doc.org_code.isEmpty() &&
                 !data_doc.doc_org.isEmpty() ) {
                // добавим организацию в список известных организаций
                ui->line_docs_pan_ogrname->setText(data_doc.doc_org);
                on_bn_add_orgcode_clicked();
            }
        } else {
            ui->combo_docs_pan_orgcode->setCurrentIndex(n);
        }
    } else {
        ui->combo_docs_pan_orgcode->setCurrentIndex(0);
    }
    on_split_main_splitterMoved(0,1);
}

void persons_wnd::on_bn_docs_save_clicked() {
    //on_combo_docs_pan_orgcode_editTextChanged(ui->combo_docs_pan_orgcode->currentText());
    // Проверим заполнение полей
    if (ui->combo_docs_pan_orgcode->currentText().isEmpty() || ui->combo_docs_pan_orgcode->currentText()=="?") {
        if (QMessageBox::warning(this,
                                 "Не внесён код подразделения",
                                 "Не внесён код подразделения, выдавшего документ.\n\n"
                                 "Продолжить?",
                                 QMessageBox::Yes|QMessageBox::Cancel,
                                 QMessageBox::Cancel)==QMessageBox::Cancel) {
            return;
        }
    }
    if (ui->line_docs_pan_ogrname->toPlainText().isEmpty()) {
        QMessageBox::warning(this, "Не достаточно данных!", "Не внесено название подразделения, выдавшего документ.");
        return;
    }
    if (ui->combo_docs_pan_type->currentIndex()==0) {
        QMessageBox::warning(this, "Не достаточно данных!", "Выберите тип докумера.");
        return;
    }
    if ( ui->date_docs_pan_start->date()<=QDate(1920,1,1) ) {
        QMessageBox::warning(this, "Ошибка в данных!", "Дата выдачи документа должна быть позже 01.01.1920г.");
        return;
    }
    if ( ui->date_docs_pan_start->date()>QDate::currentDate() ) {
        QMessageBox::warning(this, "Ошибка в данных!", "Дата выдачи документа ещё не наступила?");
        return;
    }
    if ( ui->ch_docs_pan_exp->isChecked()==true &&
         ui->date_docs_pan_exp->date()<=QDate(1920,1,1) ) {
        QMessageBox::warning(this, "Ошибка в данных!", "Дата окончания действия документа должна быть позже 01.01.1920г.");
        return;
    }
    // проверим наличие номера документа
    if ( /*ui->combo_docs_pan_type->currentData().toInt()<=26 && */
         ui->line_docs_pan_num->text().isEmpty() ) {
        QMessageBox::warning(this, "Не достаточно данных!", "Не введён номер документа.");
        return;
    }
    // проверим наличие серии документа
    int doc_type = ui->combo_docs_pan_type->currentData().toInt();
    if ( ui->line_docs_pan_ser->text().isEmpty() ) {
        if ( doc_type==1  || doc_type==2  || doc_type==3  || doc_type==4  || doc_type==5  || doc_type==6  || doc_type==7  || doc_type==8 ||
             doc_type==11 || doc_type==14 || doc_type==15 || doc_type==16 || doc_type==17 || doc_type==22 /*|| doc_type==24 || doc_type==23*/ ) {
            QMessageBox::warning(this, "Не достаточно данных!", "Не введена серия документа.");
            return;
        } else {
            if ( QMessageBox::question(this, "Документ без серии?", "Не введена серия документа.\n\nСохранить документ без серии?\n", QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::No ) {
                return;
            }
        }
    }

    int doc_type_ = ui->combo_docs_pan_type->currentData().toInt();
    if ( (doc_type_==10 ||
          doc_type_==11 ||
          doc_type_==12 ||
          doc_type_==13 ||
          doc_type_==23 /*||
          doc_type_==25*/ ||
          doc_type_==29 ) &&
         (ui->ch_docs_pan_exp->isChecked()==false) ) {
        QMessageBox::warning(this, "Не достаточно данных!", "Для выбранного типа документа необходимо указать срок действия.");
        return;
    }
    if ( (doc_type_!=10 &&
          doc_type_!=11 &&
          doc_type_!=12 &&
          doc_type_!=13 &&
          doc_type_!=22 &&
          doc_type_!=23 &&
          doc_type_!=25 &&
          doc_type_!=29) &&
         (ui->ch_docs_pan_exp->isChecked()==true) ) {
        QMessageBox::warning(this, "Ошибка в данных!", "Для выбранного типа документа не надо указывать срок действия документа.");
        return;
    }
    if ( (ui->ch_docs_pan_exp->isChecked()==true ||
          ui->date_docs_pan_exp->date()>QDate(1920,1,1)) &&
         ui->date_docs_pan_start->date()>=ui->date_docs_pan_exp->date() ) {
        QMessageBox::warning(this, "Ошибка в данных!", "Дата окончани действия документа должна быть позже даты его выдачи.");
        return;
    }
    if (QMessageBox::question(this,
                              "Сохранить?",
                              "Сохранить внесённые изменения?",
                              QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes)==QMessageBox::Yes) {
        // собственно сохранение
        ui->tab_pers_docs->setEnabled(true);
        ui->bn_docs_refresh->setEnabled(true);
        ui->pan_docs_photo->setEnabled(true);
        ui->frame_bn_docs->setEnabled(true);
        ui->bn_docs_new->setEnabled(true);
        ui->bn_docs_edit->setEnabled(true);
        ui->bn_docs_save->setEnabled(false);
        ui->bn_docs_cansel->setEnabled(false);
        ui->bn_docs_del->setEnabled(true);
        ui->pan_document->setEnabled(false);
        // сохраним документ
        if (data_doc.id==-1) {
            // сохраним запись в базу
            QString sql = "insert into persons_docs(id_person,doc_type,doc_ser,doc_num,doc_date,doc_exp,org_code,doc_org,status) ";
            sql += " values (";
            sql += " "  + QString::number(data_pers.id) + ", ";
            sql += " "  + QString::number(ui->combo_docs_pan_type->currentData().toInt()) + ", ";
            sql += " '" + ui->line_docs_pan_ser->text() + "', ";
            sql += " '" + ui->line_docs_pan_num->text() + "', ";
            sql += " '" + ui->date_docs_pan_start->date().toString("dd.MM.yyyy") + "', ";
            bool f = ui->ch_docs_pan_exp->isChecked();
            sql += " "  + (f ? QString("'" + ui->date_docs_pan_exp->date().toString("dd.MM.yyyy") + "', ") : "NULL, ");
            sql += ( ui->combo_docs_pan_orgcode->currentIndex()==0 ? (" NULL, ") : (" '" + ui->combo_docs_pan_orgcode->currentText().trimmed().simplified().replace(" ", "") + "', ") );
            sql += " '" + ui->line_docs_pan_ogrname->toPlainText() + "', ";
            sql += " "  + QString::number(ui->ch_docs_pan_actual->isChecked() ? 1 : (ui->ch_docs_pan_olddoc->isChecked() ? 2 : 0) ) + ") ";
            sql += " returning id ; ";

            QSqlQuery *query2 = new QSqlQuery(db);
            if (!mySQL.exec(this, sql, "Добавление нового документа, удостоверяющего личность застрахованного", *query2, true, db, data_app))
                return;
            if (query2->size()>0) {
                query2->next();
                data_doc.id = query2->value(0).toInt();
            }
            delete query2;
        } else {
            // изменим текущую запись
            QString sql = "update persons_docs set";
            sql += " id_person=" + QString::number(data_pers.id) + ", ";
            sql += " doc_type=" + QString::number(ui->combo_docs_pan_type->currentData().toInt()) + ", ";
            sql += " doc_ser='" + ui->line_docs_pan_ser->text() + "', ";
            sql += " doc_num='" + ui->line_docs_pan_num->text() + "', ";
            sql += " doc_date='" + ui->date_docs_pan_start->date().toString("dd.MM.yyyy") + "', ";
            sql += " doc_exp=" + (ui->ch_docs_pan_exp->isChecked() ? QString("'" + ui->date_docs_pan_exp->date().toString("dd.MM.yyyy") + "', ") : "NULL, ");
            sql += " doc_org='" + ui->line_docs_pan_ogrname->toPlainText() + "', ";
            sql += " status="  + QString::number(ui->ch_docs_pan_actual->isChecked() ? 1 : (ui->ch_docs_pan_olddoc->isChecked() ? 2 : 0) ) + " ";
            if (ui->combo_docs_pan_orgcode->currentText().trimmed().isEmpty()) {
            } else {
                sql += ", org_code=" + ( ui->combo_docs_pan_orgcode->currentText().trimmed().isEmpty() ?
                                        (" NULL ") :
                                        (" '" + ui->combo_docs_pan_orgcode->currentText().trimmed().simplified().replace(" ", "") + "' ") );
            }
            sql += " where id=" + QString::number(data_doc.id);
            sql += " ; ";

            QSqlQuery *query2 = new QSqlQuery(db);
            if (!mySQL.exec(this, sql, "Правка документа, удостоверяющего личность застрахованного", *query2, true, db, data_app))
                return;
            if (query2->size()>0) {
                query2->next();
                data_pers.id = query2->value(0).toInt();
            }
            delete query2;
        }

        // обновим связку персоны с документами
        QString sql_link = "select * from update_pers_links(" + QString::number(data_pers.id) + ", NULL) ; ";
        QSqlQuery *query_link = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_link, "Обновление связки с документами застрахованного", *query_link, true, db, data_app))
            return;
        delete query_link;
    }
    refresh_pers_docs();
    this->setCursor(Qt::ArrowCursor);
    on_split_main_splitterMoved(0,1);

    ui->bn_pers_polices->setEnabled(test_for_UDL(false, false));
}

void persons_wnd::on_bn_docs_cansel_clicked() {
    /*if (QMessageBox::question(this,
                              "Отмена?",
                              "Отменить все внесённые изменения?",
                              QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes)==QMessageBox::Yes)*/ {
        ui->tab_pers_docs->setEnabled(true);
        ui->bn_docs_refresh->setEnabled(true);
        ui->pan_docs_photo->setEnabled(true);
        ui->frame_bn_docs->setEnabled(true);
        ui->bn_docs_new->setEnabled(true);
        ui->bn_docs_edit->setEnabled(true);
        ui->bn_docs_save->setEnabled(false);
        ui->bn_docs_cansel->setEnabled(false);
        ui->bn_docs_del->setEnabled(true);
        ui->pan_document->setEnabled(false);
    }
    //refresh_pers_docs();
    on_split_main_splitterMoved(0,1);

    //ui->bn_pers_polices->setEnabled(test_for_UDL(false, false));
}

void persons_wnd::on_bn_docs_del_clicked() {
    if (QMessageBox::warning(this,
                             "Нужно подтверждение!",
                             "Вы действительно хотите удалить из базы данных информацию о документе, подтверждающем личность выбранного застрахованного лца?",
                             QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes) {
        // удалим документ
        QString sql = "delete from persons_docs ";
        sql += " where id=" + QString::number(data_doc.id);

        QSqlQuery *query = new QSqlQuery(db);
        if (!mySQL.exec(this, sql, "Удаление документа, удостоверяющего личность застрахованного", *query, true, db, data_app)) {
            delete query;
            return;
        }
        delete query;

        // обновим связку персоны с документами
        QString sql_link = "select * from update_pers_links(" + QString::number(data_pers.id) + ", NULL) ; ";
        QSqlQuery *query_link = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_link, "Обновление связки с документами застрахованного", *query_link, true, db, data_app))
            return;
        delete query_link;
    }
    refresh_pers_docs();
    on_split_main_splitterMoved(0,1);
}

void persons_wnd::on_tab_pers_docs_clicked(const QModelIndex &index) {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_pers_docs || !ui->tab_pers_docs->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Нажмите кнопку [Обновить] и выберите документ из таблицы.");
        return;
    }
    this->setCursor(Qt::WaitCursor);

    data_doc.id        = model_pers_docs.data(model_pers_docs.index(index.row(), 0), Qt::EditRole).toInt();
    data_doc.doc_type  = model_pers_docs.data(model_pers_docs.index(index.row(), 1), Qt::EditRole).toInt();
    data_doc.doc_ser   = model_pers_docs.data(model_pers_docs.index(index.row(), 2), Qt::EditRole).toString();
    data_doc.doc_num   = model_pers_docs.data(model_pers_docs.index(index.row(), 3), Qt::EditRole).toString();
    data_doc.doc_date  = model_pers_docs.data(model_pers_docs.index(index.row(), 4), Qt::EditRole).toDate();
    data_doc.doc_exp   = model_pers_docs.data(model_pers_docs.index(index.row(), 5), Qt::EditRole).toDate();
    data_doc.id_doctype= model_pers_docs.data(model_pers_docs.index(index.row(), 6), Qt::EditRole).toInt();
    data_doc.doc_name  = model_pers_docs.data(model_pers_docs.index(index.row(), 7), Qt::EditRole).toString();
    data_doc.status    = model_pers_docs.data(model_pers_docs.index(index.row(), 8), Qt::EditRole).toInt();
    data_doc.has_org_code = !model_pers_docs.data(model_pers_docs.index(index.row(), 9), Qt::EditRole).isNull();
    data_doc.org_code  = model_pers_docs.data(model_pers_docs.index(index.row(), 9), Qt::EditRole).toString();
    data_doc.doc_org   = model_pers_docs.data(model_pers_docs.index(index.row(),10), Qt::EditRole).toString();
    data_doc.mask_ser  = model_pers_docs.data(model_pers_docs.index(index.row(),11), Qt::EditRole).toString();
    data_doc.mask_num  = model_pers_docs.data(model_pers_docs.index(index.row(),12), Qt::EditRole).toString();
    data_doc.type_begin= model_pers_docs.data(model_pers_docs.index(index.row(),13), Qt::EditRole).toDate();
    data_doc.type_end  = model_pers_docs.data(model_pers_docs.index(index.row(),14), Qt::EditRole).toDate();

    data_doc.has_doc_exp= !model_pers_docs.data(model_pers_docs.index(index.row(), 5), Qt::EditRole).toString().isEmpty();

    ui->spin_docs_pan_type->setValue(data_doc.doc_type);
    ui->combo_docs_pan_type->setCurrentIndex(ui->combo_docs_pan_type->findData(data_doc.doc_type));

    // для временного убежища серия фиксированная - "ВУ"
    if (ui->combo_docs_pan_type->currentData().toInt()==25) {
        // ВУ - серия "ВУ"
        ui->line_docs_pan_ser->setText("ВУ");
        ui->line_docs_pan_num->setText(myMASK(data_doc.doc_num, data_doc.mask_num));
        ui->line_docs_pan_ser->setEnabled(false);
    } else if (ui->combo_docs_pan_type->currentData().toInt()==21) {
        // иностранный документ - серия и номер как есть
        ui->line_docs_pan_ser->setText(data_doc.doc_ser);
        ui->line_docs_pan_num->setText(data_doc.doc_num);
        ui->line_docs_pan_ser->setEnabled(true);
    } else if (ui->combo_docs_pan_type->currentData().toInt()==23 && data_app.ocato=="38000") {
        // РВП в Курске - серия и номер как есть
        ui->line_docs_pan_ser->setText(data_doc.doc_ser);
        ui->line_docs_pan_num->setText(data_doc.doc_num);
        ui->line_docs_pan_ser->setEnabled(true);
    } else {
        //остальные документы - проверка серии и номера по маске
        ui->line_docs_pan_ser->setText(myMASK(data_doc.doc_ser, data_doc.mask_ser));
        ui->line_docs_pan_num->setText(myMASK(data_doc.doc_num, data_doc.mask_num));
        ui->line_docs_pan_ser->setEnabled(true);
    }
    ui->date_docs_pan_start->setDate(data_doc.doc_date);
    ui->ch_docs_pan_exp->setChecked(data_doc.has_doc_exp);
    ui->date_docs_pan_exp->setEnabled(data_doc.has_doc_exp);
    ui->date_docs_pan_exp->setVisible(data_doc.has_doc_exp);
    ui->date_docs_pan_exp->setDate(data_doc.doc_exp);

    if (data_doc.has_org_code) {
        int n = doc_org_code.indexOf(data_doc.org_code);
        if (n<0) {
            ui->combo_docs_pan_orgcode->setCurrentText(data_doc.org_code);
        } else {
            ui->combo_docs_pan_orgcode->setCurrentIndex(n);
        }
    } else {
        ui->combo_docs_pan_orgcode->setCurrentIndex(0);
    }
    /*
    if (data_doc.has_org_code) {
        int n = doc_org_code.indexOf(data_doc.org_code);
        ui->combo_docs_pan_orgcode->setCurrentIndex(n);
    } else {
        ui->combo_docs_pan_orgcode->setCurrentIndex(0);
    }
    */
    ui->line_docs_pan_ogrname->setText(data_doc.doc_org);
    ui->ch_docs_pan_actual->setChecked(data_doc.status==1);
    ui->ch_docs_pan_olddoc->setChecked(data_doc.status==2);
    ui->ch_docs_pan_olddoc->setEnabled(data_doc.status!=1);

    this->setCursor(Qt::ArrowCursor);
    on_split_main_splitterMoved(0,1);
}

void persons_wnd::on_ch_docs_pan_exp_stateChanged(int arg1) {
    ui->date_docs_pan_exp->setEnabled(arg1>0);
    ui->date_docs_pan_exp->setVisible(arg1>0);
}

void persons_wnd::on_line_docs_pan_ser_textEdited(const QString &arg1) {
    QString s1 = myMASK(arg1, data_doc.mask_ser);
    ui->line_docs_pan_ser->setText(s1);
    ui->line_docs_pan_ser->setCursorPosition(s1.size());
}

void persons_wnd::on_line_docs_pan_num_textEdited(const QString &arg1) {
    /*if ( data_app.ocato=="38000"
         && data_doc.doc_type==23 ) {
        // в Курске для РВП маска не применяется
        ui->line_docs_pan_num->setText(arg1);
        ui->line_docs_pan_num->setCursorPosition(arg1.size());
    } else {
        QString s1 = myMASK(arg1, data_doc.mask_num);
        ui->line_docs_pan_num->setText(s1);
        ui->line_docs_pan_num->setCursorPosition(s1.size());
    }*/

    // для временного убежища серия фиксированная - "ВУ"
    if (ui->combo_docs_pan_type->currentData().toInt()==25) {
        // ВУ - серия ВУ
        //ui->line_docs_pan_ser->setText("ВУ");
        ui->line_docs_pan_num->setText(myMASK(arg1, data_doc.mask_num));
        //ui->line_docs_pan_ser->setEnabled(false);
    } else if (ui->combo_docs_pan_type->currentData().toInt()==21) {
        // иностранный документ - серия и номер как есть
        //ui->line_docs_pan_ser->setText(data_doc.doc_ser);
        ui->line_docs_pan_num->setText(arg1);
        //ui->line_docs_pan_ser->setEnabled(false);
    } else if (ui->combo_docs_pan_type->currentData().toInt()==23 && data_app.ocato=="38000") {
        // РВП в Курске - серия и номер как есть
        //ui->line_docs_pan_ser->setText(data_doc.doc_ser);
        ui->line_docs_pan_num->setText(arg1);
        //ui->line_docs_pan_ser->setEnabled(false);
    } else {
        //остальные документы - проверка серии и номера по маске
        //ui->line_docs_pan_ser->setText(myMASK(data_doc.doc_ser, data_doc.mask_ser));
        ui->line_docs_pan_num->setText(myMASK(arg1, data_doc.mask_num));
        //ui->line_docs_pan_ser->setEnabled(true);
    }
}

void persons_wnd::on_bn_docs_pan_photo_set_clicked() {
    if ( !(ui->lab_docs_pan_photo->isVisible()) || (QMessageBox::question(this, "Нужно подтверждение!", "Вы действительно хотите заменить фотографию застрахованного?", QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes)) {

        if ( (path_to_photo = QFileDialog::getOpenFileName(this, "Выберите фото застрахованного",
                                                           data_app.path_foto, tr("Изображение (*.jpg *.jpeg *.png *.bmp);;PNG (*.png)")))=="")
             return;
        // поправим фото
        QString res_path = "";
        PhotoEditor_wnd *w = new PhotoEditor_wnd(path_to_photo, 2, QSize(320,400), res_path, data_app, this);
        //w->setWindowState(w->windowState() | Qt::WindowFullScreen);
        w->exec();
        delete w;

        QFile f_test(res_path);
        if (f_test.exists()) {
            // удалим старое фото
            QString sql_del = "delete from persons_photo ";
            sql_del += " where id_person=" + QString::number(data_pers.id);
            sql_del += "   and type=2 ; ";
            QSqlQuery *query_del = new QSqlQuery(db);
            /*bool res_del =*/ mySQL.exec(this, sql_del, "Удаление старого фото", *query_del, true, db, data_app);

            // сохраним фото в базу
            QString bin;
            mySQL.myBYTEA(res_path, bin);
            QString sql_ins = "insert into persons_photo (id_person, type, bin)  values(" + QString::number(data_pers.id) + ", 2, '" + bin + "') ; ";
            QSqlQuery *query_ins = new QSqlQuery(db);
            /*bool res_ins =*/ mySQL.exec(this, sql_ins, "Добавление нового фото", *query_ins, true, db, data_app);

            ui->lab_docs_pan_photo->setPixmap(QPixmap(res_path).scaled(ui->lab_docs_pan_photo->size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));
            ui->lab_docs_pan_photo->show();
        } else {
            QMessageBox::warning(this, "Файл не найден", "Файл не найден, операция отменена");
        }
    }
}

void persons_wnd::on_bn_docs_pan_sign_set_clicked() {
    if ( !(ui->lab_docs_pan_sign->isVisible()) || (QMessageBox::question(this, "Нужно подтверждение!", "Вы действительно хотите заменить подпись застрахованного?", QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes)) {
        if ( (path_to_sign = QFileDialog::getOpenFileName(this, "Выберите подпись застрахованного",
                                                          data_app.path_sign, tr("Изображение (*.jpg *.jpeg *.png *.bmp);;PNG (*.png)")))=="" )
            return;
        // поправим подпись
        QString res_path = "";
        PhotoEditor_wnd *w = new PhotoEditor_wnd(path_to_sign, 3, QSize(736,160), res_path, data_app, this);
        //w->setWindowState(w->windowState() | Qt::WindowFullScreen);
        w->exec();
        delete w;

        QFile f_test(res_path);
        if (f_test.exists()) {\
            // удалим старую подпись
            QString sql_del = "delete from persons_photo ";
            sql_del += " where id_person=" + QString::number(data_pers.id);
            sql_del += "   and type=3 ; ";
            QSqlQuery *query_del = new QSqlQuery(db);
            /*bool res_del =*/ mySQL.exec(this, sql_del, "Удаление старой подписи", *query_del, true, db, data_app);

            // сохраним подпись в базу
            QString bin;
            mySQL.myBYTEA(res_path, bin);
            QString sql_ins = "insert into persons_photo (id_person, type, bin)  values(" + QString::number(data_pers.id) + ", 3, '" + bin + "') ; ";
            QSqlQuery *query_ins = new QSqlQuery(db);
            /*bool res_ins =*/ mySQL.exec(this, sql_ins, "Добавление новой подписи", *query_ins, true, db, data_app);

            ui->lab_docs_pan_sign->setPixmap(QPixmap(res_path).scaled(ui->lab_docs_pan_sign->size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));
            ui->lab_docs_pan_sign->show();
        } else {
            QMessageBox::warning(this, "Файл не найден", "Файл не найден, операция отменена");
        }
    }
}

void persons_wnd::on_bn_docs_pan_photo_del_clicked() {
    if (QMessageBox::question(this, "Нужно подтверждение!", "Вы действительно хотите удалить фотографию застрахованного?", QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes) {
        // удалим старое фото
        QString sql_del = "delete from persons_photo ";
        sql_del += " where id_person=" + QString::number(data_pers.id);
        sql_del += "   and type=2 ; ";
        QSqlQuery *query_del = new QSqlQuery(db);
        /*bool res_del =*/ mySQL.exec(this, sql_del, "Удаление старого фото", *query_del, true, db, data_app);
    }
    refresh_pers_photo();
}

void persons_wnd::on_bn_docs_pan_sign_del_clicked() {
    if (QMessageBox::question(this, "Нужно подтверждение!", "Вы действительно хотите удалить подпись застрахованного?", QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes) {
        // удалим старую подпись
        QString sql_del = "delete from persons_photo ";
        sql_del += " where id_person=" + QString::number(data_pers.id);
        sql_del += "   and type=3 ; ";
        QSqlQuery *query_del = new QSqlQuery(db);
        /*bool res_del =*/ mySQL.exec(this, sql_del, "Удаление старой подписи", *query_del, true, db, data_app);
    }
    refresh_pers_sign();
}

bool persons_wnd::test_for_sex(bool can_stop) {
    ui->lab_test_for->setText("Проверка имени и пола");
    ui->lab_test_for->setVisible(true);
    QApplication::processEvents();

    this->setCursor(Qt::WaitCursor);

    data_pers.im = ui->ln_pers_pan_im->text().trimmed().toUpper();
    data_pers.ot = ui->ln_pers_pan_ot->text().trimmed().toUpper();
    data_pers.sex = ui->combo_pers_pan_sex->currentIndex();
    data_pers.oksm_c = ui->spin_pers_pan_oksm_c->value();

    if (data_pers.sex!=0) {

        // проверим соответствие имени и пола персоны
        QSqlQuery *query_sex = new QSqlQuery(db);
        QString sql_sex = "select name, sex "
                          " from public.spr_name_to_sex s "
                          " where name='" + data_pers.im + "' ; ";
        mySQL.exec(this, sql_sex, QString("Проверка соответствия имени и пола персоны"), *query_sex, true, db, data_app);
        QString msg = "Согласно словарю имён, имени " + data_pers.im + " соответствует пол ";

        bool is_ok = false;
        bool is_empty = true;
        while (query_sex->next()) {
            is_empty = false;
            int sex = query_sex->value(1).toInt();
            msg += QString(sex==1 ? "М" : "Ж") + " ";
            if (sex==data_pers.sex)
                is_ok = true;
        }
        if (is_empty) {
            if (QMessageBox::warning(this, "Проверьте имя и пол застрахованного",
                                     "Введённое имя застрахованного  " + data_pers.im + "  отсутстует в справочнике имён.\n\n"
                                     "Вы подтверждаете правильность написания имени и пол застрахованного?\n"
                                     "(новое сочетание имени и пола будет добавлено в справочник имён и направлено в ТФОМС с ближайшей посылкой)",
                                     QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes) {
                // добавление записи в словарь имён
                QString sql_ins = "insert into spr_name_to_sex(name, sex, status, date_add, id_operator) "
                                  " values ('" + data_pers.im + "', "
                                           " " + QString::number(data_pers.sex) + ", "
                                           " 0, "
                                           "'" + QDate::currentDate().toString("yyyy-MM-dd") + "', "
                                           " " + QString::number(data_app.id_operator) + ") ; ";
                QSqlQuery *query_ins = new QSqlQuery(db);
                bool res_ins = mySQL.exec(this, sql_ins, QString("добавим имя в справочник имён"), *query_ins, true, db, data_app);
                if (!res_ins) {
                    delete query_ins;
                    QMessageBox::warning(this, "Ошибка при попытке добавить имя в справочник имён", "При попытке добавить имя в сочетании с полом в справочник имён произошла неожиданная ошибка");
                    this->setCursor(Qt::ArrowCursor);

                    ui->lab_test_for->setText("");
                    ui->lab_test_for->setVisible(false);
                    QApplication::processEvents();

                    return false;
                }
            } else {
                this->setCursor(Qt::ArrowCursor);

                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();

                return false;
            }
        } else if (!is_ok) {
            if (can_stop) {
                if (QMessageBox::warning(this, "Проверьте пол застрахованного",
                                         "Имя застрахованного  " + data_pers.im + "  не соответствует полу\n"
                                         + (query_sex->size()==0 ? " <нет> " : msg) +
                                         ", \nа указан пол " + (data_pers.sex==1 ? "М" : "Ж") + ".\n\n"
                                         "Всё равно сохранить?\n"
                                         "(новое сочетание имени и пола будет добавлено в справочник имён и направлено в ТФОМС с ближайшей посылкой)",
                                         QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes) {
                    // добавление записи в словарь имя
                    QString sql_ins = "insert into spr_name_to_sex(name, sex, status, date_add, id_operator) "
                                      " values ('" + data_pers.im + "', "
                                               " " + QString::number(data_pers.sex) + ", "
                                               " 0, "
                                               "'" + QDate::currentDate().toString("yyyy-MM-dd") + "', "
                                               " " + QString::number(data_app.id_operator) + ") ; ";
                    QSqlQuery *query_ins = new QSqlQuery(db);
                    bool res_ins = mySQL.exec(this, sql_ins, QString("добавим имя в справочник имён"), *query_ins, true, db, data_app);
                    if (!res_ins) {
                        delete query_ins;
                        QMessageBox::warning(this, "Ошибка при попытке добавить имя в справочник имён", "При попытке добавить имя в сочетании с полом в справочник имён произошла неожиданная ошибка");
                        this->setCursor(Qt::ArrowCursor);

                        ui->lab_test_for->setText("");
                        ui->lab_test_for->setVisible(false);
                        QApplication::processEvents();

                        return false;
                    }
                } else {
                    this->setCursor(Qt::ArrowCursor);

                    ui->lab_test_for->setText("");
                    ui->lab_test_for->setVisible(false);
                    QApplication::processEvents();

                    return false;
                }
            } else {
                QMessageBox::warning(this, "Проверьте пол застрахованного",
                                     "имя застрахованного не соответствует полу\n"
                                     + msg +
                                     ", \nа указан пол " + (data_pers.sex==1 ? "М" : "Ж") + ".\n");
            }
        }
        delete query_sex;


        if (!data_pers.ot.isEmpty()) {
            // проверим соответствие отчества и пола персоны
            QSqlQuery *query_sex2 = new QSqlQuery(db);
            QString sql_sex2 = "select name, sex "
                              " from public.spr_namepat_to_sex s "
                              " where name='" + data_pers.ot + "' ; ";
            mySQL.exec(this, sql_sex2, QString("Проверка соответствия отчества и пола персоны"), *query_sex2, true, db, data_app);
            QString msg = "Согласно словарю отчеств, отчеству " + data_pers.ot + " соответствует пол ";

            bool is_ok = false;
            bool is_empty = true;
            while (query_sex->next()) {
                is_empty = false;
                int sex = query_sex->value(1).toInt();
                msg += QString(sex==1 ? "М" : "Ж") + " ";
                if (sex==data_pers.sex)
                    is_ok = true;
            }
            if (is_empty) {
                if (QMessageBox::warning(this, "Проверьте отчество и пол застрахованного",
                                         "Введённое отчество застрахованного  " + data_pers.ot + "  отсутстует в справочнике отчеств.\n\n"
                                         "Вы подтверждаете правильность написания отчества и пол застрахованного?\n"
                                         "(новое сочетание отчества и пола будет добавлено в справочник отчеств и направлено в ТФОМС с ближайшей посылкой)",
                                         QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes) {
                    // добавление записи в словарь отчеств
                    QString sql_ins = "insert into spr_namepat_to_sex(name, sex, status, date_add, id_operator) "
                                      " values ('" + data_pers.ot + "', "
                                               " " + QString::number(data_pers.sex) + ", "
                                               " 0, "
                                               "'" + QDate::currentDate().toString("yyyy-MM-dd") + "', "
                                               " " + QString::number(data_app.id_operator) + ") ; ";
                    QSqlQuery *query_ins = new QSqlQuery(db);
                    bool res_ins = mySQL.exec(this, sql_ins, QString("добавим отчество в справочник отчеств"), *query_ins, true, db, data_app);
                    if (!res_ins) {
                        delete query_ins;
                        QMessageBox::warning(this, "Ошибка при попытке добавить отчество в справочник отчеств", "При попытке добавить отчество в сочетании с полом в справочник отчеств произошла неожиданная ошибка");
                        this->setCursor(Qt::ArrowCursor);

                        ui->lab_test_for->setText("");
                        ui->lab_test_for->setVisible(false);
                        QApplication::processEvents();

                        return false;
                    }
                } else {
                    this->setCursor(Qt::ArrowCursor);

                    ui->lab_test_for->setText("");
                    ui->lab_test_for->setVisible(false);
                    QApplication::processEvents();

                    return false;
                }
            } else if (!is_ok) {
                if (can_stop) {
                    if (QMessageBox::warning(this, "Проверьте пол застрахованного",
                                             "Отчество застрахованного  " + data_pers.ot + "  не соответствует полу\n"
                                             + (query_sex2->size()==0 ? " <нет> " : msg) +
                                             ", \nа указан пол " + (data_pers.sex==1 ? "М" : "Ж") + ".\n\n"
                                             "Всё равно сохранить?\n"
                                             "(новое сочетание имени и пола будет добавлено в справочник имён и направлено в ТФОМС с ближайшей посылкой)",
                                             QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes) {
                        // добавление записи в словарь отчество
                        QString sql_ins = "insert into spr_namepat_to_sex(name, sex, status, date_add, id_operator) "
                                          " values ('" + data_pers.ot + "', "
                                                   " " + QString::number(data_pers.sex) + ", "
                                                   " 0, "
                                                   "'" + QDate::currentDate().toString("yyyy-MM-dd") + "', "
                                                   " " + QString::number(data_app.id_operator) + ") ; ";
                        QSqlQuery *query_ins = new QSqlQuery(db);
                        bool res_ins = mySQL.exec(this, sql_ins, QString("добавим отчество в справочник отчеств"), *query_ins, true, db, data_app);
                        if (!res_ins) {
                            delete query_ins;
                            QMessageBox::warning(this, "Ошибка при попытке добавить отчество в справочник отчеств", "При попытке добавить отчество в сочетании с полом в справочник отчеств произошла неожиданная ошибка");
                            this->setCursor(Qt::ArrowCursor);

                            ui->lab_test_for->setText("");
                            ui->lab_test_for->setVisible(false);
                            QApplication::processEvents();

                            return false;
                        }
                    } else {
                        this->setCursor(Qt::ArrowCursor);

                        ui->lab_test_for->setText("");
                        ui->lab_test_for->setVisible(false);
                        QApplication::processEvents();

                        return false;
                    }
                } else {
                    QMessageBox::warning(this, "Проверьте пол застрахованного",
                                         "отчество застрахованного не соответствует полу\n"
                                         + msg +
                                         ", \nа указан пол " + (data_pers.sex==1 ? "М" : "Ж") + ".\n");
                }
            }
            delete query_sex2;
        }
    } else {
        QMessageBox::warning(this, "Задайте пол застрахованного",
                             "Задайте пол застрахованного.\n\n"
                             "Операция отменена.\n");
        this->setCursor(Qt::ArrowCursor);

        ui->lab_test_for->setText("");
        ui->lab_test_for->setVisible(false);
        QApplication::processEvents();

        return false;
    }

    this->setCursor(Qt::ArrowCursor);

    ui->lab_test_for->setText("");
    ui->lab_test_for->setVisible(false);
    QApplication::processEvents();

    return true;
}


bool persons_wnd::test_for_EAES(bool can_stop) {
    ui->lab_test_for->setText("Проверка документов ЕАЭС");
    ui->lab_test_for->setVisible(true);
    QApplication::processEvents();

    this->setCursor(Qt::WaitCursor);

    if ( data_pers.category==11
         || data_pers.category==12
         || data_pers.category==13
         || data_pers.category==14 ) {

        // проверим соответствие гражданства категрии гражданина ЕАЭС
        if ( data_pers.oksm_c!=51
             && data_pers.oksm_c!=112
             && data_pers.oksm_c!=398
             && data_pers.oksm_c!=417 ) {
            QMessageBox::warning(this, "Ошибка в данных",
                                 "Граждане стран-членов ЕАЭС могут иметь гражданство одной из стран: \n"
                                 "  (51) Армения \n"
                                 "  (112) Беларусь \n"
                                 "  (398) Казахстан \n"
                                 "  (417) Киргизия ");
            return false;
        }

        if ( data_pers.eaes_residence.trimmed().isEmpty()
             || data_pers.eaes_residence_exp<=QDate(1920,1,1) )
            return false;
    }

    this->setCursor(Qt::ArrowCursor);

    ui->lab_test_for->setText("");
    ui->lab_test_for->setVisible(false);
    QApplication::processEvents();

    return true;
}

bool persons_wnd::test_for_FIAS(bool can_stop) {
    if ( ui->ch_pers_pan_reg->isChecked() &&
         ui->combo_pers_pan_reg_strt->currentIndex()>0 &&
         ui->combo_pers_pan_reg_hous->currentIndex()==0 ) {
        QMessageBox::warning(this, "Не хватает данных!", "Укажите дом или интервал домов по ФИАС в составе адреса регистрации застрахованного или снимите флажок \"Адрес регистрации\" если БОМЖ.");
        this->setCursor(Qt::ArrowCursor);
        ui->group_persons_tab->setEnabled(true);
        ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
        ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

        ui->bn_pers_polices->setEnabled(false);

        ui->lab_test_for->setText("");
        ui->lab_test_for->setVisible(false);
        QApplication::processEvents();

        return false;
    }
    if ( ui->ch_pers_pan_liv->isChecked() &&
         ui->combo_pers_pan_liv_strt->currentIndex()>0 &&
         ui->combo_pers_pan_liv_hous->currentIndex()==0 ) {
        QMessageBox::warning(this, "Не хватает данных!", "Укажите дом или интервал домов по ФИАС в составе адреса проживания застрахованного или снимите флажок \"Адрес проживания\" если адрес фактического проживания совпадает с адресом регистрации.");
        this->setCursor(Qt::ArrowCursor);
        ui->group_persons_tab->setEnabled(true);
        ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
        ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

        ui->bn_pers_polices->setEnabled(false);

        ui->lab_test_for->setText("");
        ui->lab_test_for->setVisible(false);
        QApplication::processEvents();

        return false;
    }
    return true;
}

bool persons_wnd::test_for_UDL(bool can_stop, bool f_quick) {
    ui->group_persons_tab->setEnabled(false);
    ui->group_person_data->setEnabled(false);
    ui->group_person_docs->setEnabled(false);
    ui->lab_test_for->setText("Проверка документов");
    ui->lab_test_for->setVisible(true);
    this->setCursor(Qt::WaitCursor);

    QApplication::processEvents();
    ui->bn_pers_polices->setEnabled(true);


    int index = ui->combo_pers_pan_category->currentIndex();
    // документы можно вводить только при выбранной категории
    ui->pan_docs_tab->setEnabled(index>0);
    // если категория не выбрана - фото вводить нельзя
    if (index<0) ui->pan_docs_photo->setEnabled(false);

    if (!f_quick) {
        data_pers.category = ui->combo_pers_pan_category->currentData().toInt();
        data_pers.oksm_c = ui->spin_pers_pan_oksm_c->value();
    }


    // получение списка действующих документов персоны
    this->setCursor(Qt::WaitCursor);
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select doc_type, doc_date, doc_exp, status "
                  " from public.persons_docs d "
                  " where id_person=" + QString::number(data_pers.id) + " and "
                  "       doc_date<=CURRENT_DATE and ((doc_exp is NULL) or (doc_exp>CURRENT_DATE)) and status=1 "
                  " order by doc_type ; ";
    mySQL.exec(this, sql, QString("Проверка действующих документов персоны"), *query, true, db, data_app);
    bool  docs_arry[30];
    QDate docs_date[30];
    bool  docs_fexp[30];
    QDate docs_dexp[30];
    bool  docs_fact[30];
    int   docs_cntr[30];

    QDate date_0 = QDate(1900,1,1);

    for (int i=0; i<30; i++) {
        docs_arry[i] = false;
        docs_date[i]  = date_0;
        docs_fexp[i]  = false;
        docs_dexp[i]  = date_0;
        docs_fact[i]  = true;
        docs_cntr[i]  = 0;
    }
    int cnt_docs = 0;
    while (query->next()) {
        docs_arry[query->value(0).toInt()] = true;
        docs_date[query->value(0).toInt()] = query->value(1).toDate();
        docs_fexp[query->value(0).toInt()] = !(query->value(2).isNull());
        docs_dexp[query->value(0).toInt()] = query->value(2).toDate();
        docs_fact[query->value(0).toInt()] = (query->value(3).toInt()>0);
        docs_cntr[query->value(0).toInt()] += 1;
        cnt_docs++;
    }
    delete query;

    // проверка, соответствуют ли документы застрахованного его категории
    bool docs_ok = false;
    bool allow_ok = false;

    if (cnt_docs>0) {

        // проверим соответствие документов категории персоны
        if ( data_pers.category==1 ||
             data_pers.category==6 ) {
            // проверка количества действующих УДЛ персоны

            int n_udl = 0;
            if (docs_arry[ 1] && docs_date[ 1]<=QDate::currentDate() && (!docs_fexp[ 1] || docs_dexp[ 1]>QDate::currentDate()) && docs_fact[ 1] )   n_udl+=docs_cntr[ 1];
            if (docs_arry[13] && docs_date[13]<=QDate::currentDate() && (!docs_fexp[13] || docs_dexp[13]>QDate::currentDate()) && docs_fact[13] )   n_udl+=docs_cntr[13];
            if (docs_arry[14] && docs_date[14]<=QDate::currentDate() && (!docs_fexp[14] || docs_dexp[14]>QDate::currentDate()) && docs_fact[14] )   n_udl+=docs_cntr[14];
            if (docs_arry[ 3] && docs_date[ 3]<=QDate::currentDate() && (!docs_fexp[ 3] || docs_dexp[ 3]>QDate::currentDate()) && docs_fact[ 3] )   n_udl+=docs_cntr[ 3];
            if (docs_arry[24] && docs_date[24]<=QDate::currentDate() && (!docs_fexp[24] || docs_dexp[24]>QDate::currentDate()) && docs_fact[24] )   n_udl+=docs_cntr[24];
            if (n_udl>1) {
                QMessageBox::warning(this, "Слишком много действующих УДЛ!",
                                     "У застрахованного слишком много действующих УДЛ: " + QString::number(n_udl) + "!\n"
                                     "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();

                return false;
            }

            int n_udl_2 = 0;
            if (docs_arry[ 9] && docs_date[ 9]<=QDate::currentDate() && (!docs_fexp[ 9] || docs_dexp[ 9]>QDate::currentDate()) && docs_fact[ 9] )   n_udl_2+=docs_cntr[ 9];
            if (docs_arry[22] && docs_date[22]<=QDate::currentDate() && (!docs_fexp[22] || docs_dexp[22]>QDate::currentDate()) && docs_fact[22] )   n_udl_2+=docs_cntr[22];
            if (docs_arry[10] && docs_date[10]<=QDate::currentDate() && (!docs_fexp[10] || docs_dexp[10]>QDate::currentDate()) && docs_fact[10] )   n_udl_2+=docs_cntr[10];
            if (docs_arry[12] && docs_date[12]<=QDate::currentDate() && (!docs_fexp[12] || docs_dexp[12]>QDate::currentDate()) && docs_fact[12] )   n_udl_2+=docs_cntr[12];
            if (docs_arry[25] && docs_date[25]<=QDate::currentDate() && (!docs_fexp[25] || docs_dexp[25]>QDate::currentDate()) && docs_fact[25] )   n_udl_2+=docs_cntr[25];
            if (docs_arry[27] && docs_date[27]<=QDate::currentDate() && (!docs_fexp[27] || docs_dexp[27]>QDate::currentDate()) && docs_fact[27] )   n_udl_2+=docs_cntr[27];
            if (docs_arry[28] && docs_date[28]<=QDate::currentDate() && (!docs_fexp[28] || docs_dexp[28]>QDate::currentDate()) && docs_fact[28] )   n_udl_2+=docs_cntr[28];
            if (n_udl_2>0) {
                QMessageBox::warning(this, "УДЛ не соответствует категории персоны",
                                     "У застрахованного указан по крайней мере один действующий УДЛ, \nне соответствующий категории персоны!\n"
                                     "\nДля граждан России разрешены УДЛ типов: 1, 13, 14, 3, 24\n"
                                     "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();

                return false;
            }

            int n_drp_2 = 0;
            if (docs_arry[11] && docs_date[11]<=QDate::currentDate() && (!docs_fexp[11] || docs_dexp[11]>QDate::currentDate()) && docs_fact[11] )   n_drp_2+=docs_cntr[11];
            if (docs_arry[22] && docs_date[22]<=QDate::currentDate() && (!docs_fexp[22] || docs_dexp[22]>QDate::currentDate()) && docs_fact[22] )   n_drp_2+=docs_cntr[22];
            if (docs_arry[23] && docs_date[23]<=QDate::currentDate() && (!docs_fexp[23] || docs_dexp[23]>QDate::currentDate()) && docs_fact[23] )   n_drp_2+=docs_cntr[23];
            if (n_drp_2>0) {
                QMessageBox::warning(this, "ДРП не соответствует категории персоны",
                                     "У застрахованного указан по крайней мере один действующий ДРП, \nне соответствующий категории персоны!\n"
                                     "\nДля граждан России ДРП не нужны.\n"
                                     "\nЗакройте лишние ДРП задав срок действия или просто снимите флажок \"Действует\".\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();

                return false;
            }
            //delete query_drp_2;
        }

        else if ( data_pers.category==2 ||
                  data_pers.category==7 ) {
            int n_udl = 0;
            if (docs_arry[ 9]  && docs_date[ 9]<=QDate::currentDate() && (!docs_fexp[ 9]  || docs_dexp[ 9] >QDate::currentDate()) && docs_fact[ 9] )   n_udl+=docs_cntr[ 9];
            if (n_udl>1) {
                QMessageBox::warning(this, "Слишком много действующих УДЛ!",
                                     "У застрахованного слишком много действующих УДЛ: " + QString::number(n_udl) + "!\n"
                                     "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());
                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();
                return false;
            }

            int n_udl_2 = 0;
            if (docs_arry[ 1] && docs_date[ 1]<=QDate::currentDate() && (!docs_fexp[ 1] || docs_dexp[ 1]>QDate::currentDate()) && docs_fact[ 1] )   n_udl_2+=docs_cntr[ 1];
            if (docs_arry[13] && docs_date[13]<=QDate::currentDate() && (!docs_fexp[13] || docs_dexp[13]>QDate::currentDate()) && docs_fact[13] )   n_udl_2+=docs_cntr[13];
            if (docs_arry[22] && docs_date[22]<=QDate::currentDate() && (!docs_fexp[22] || docs_dexp[22]>QDate::currentDate()) && docs_fact[22] )   n_udl_2+=docs_cntr[22];
            if (docs_arry[10] && docs_date[10]<=QDate::currentDate() && (!docs_fexp[10] || docs_dexp[10]>QDate::currentDate()) && docs_fact[10] )   n_udl_2+=docs_cntr[10];
            if (docs_arry[12] && docs_date[12]<=QDate::currentDate() && (!docs_fexp[12] || docs_dexp[12]>QDate::currentDate()) && docs_fact[12] )   n_udl_2+=docs_cntr[12];
            if (docs_arry[25] && docs_date[25]<=QDate::currentDate() && (!docs_fexp[25] || docs_dexp[25]>QDate::currentDate()) && docs_fact[25] )   n_udl_2+=docs_cntr[25];
            if (docs_arry[27] && docs_date[27]<=QDate::currentDate() && (!docs_fexp[27] || docs_dexp[27]>QDate::currentDate()) && docs_fact[27] )   n_udl_2+=docs_cntr[27];
            if (docs_arry[28] && docs_date[28]<=QDate::currentDate() && (!docs_fexp[28] || docs_dexp[28]>QDate::currentDate()) && docs_fact[28] )   n_udl_2+=docs_cntr[28];
             if (n_udl_2>0) {
                 QMessageBox::warning(this, "УДЛ не соответствует категории персоны",
                                      "У застрахованного указан по крайней мере один действующий УДЛ, \nне соответствующий категории персоны!\n"
                                      "\nДля постоянно проживающих в России иностранцев разрешён тип УДЛ: 9\n"
                                      "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }

             int n_drp = 0;
             if (docs_arry[11] && docs_date[11]<=QDate::currentDate() && (!docs_fexp[11] || docs_dexp[11]>QDate::currentDate()) && docs_fact[11] )   n_drp+=docs_cntr[11];
             if (n_drp>1) {
                 QMessageBox::warning(this, "Слишком много действующих ДРП!",
                                      "У застрахованного слишком много действующих ДРП: " + QString::number(n_drp) + "!\n"
                                      "\nЗакройте лишние ДРП задав срок действия или просто снимите флажок \"Действует\".\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }

             int n_drp_2 = 0;
             if (docs_arry[22] && docs_date[22]<=QDate::currentDate() && (!docs_fexp[22] || docs_dexp[22]>QDate::currentDate()) && docs_fact[22] )   n_drp_2+=docs_cntr[22];
             if (docs_arry[23] && docs_date[23]<=QDate::currentDate() && (!docs_fexp[23] || docs_dexp[23]>QDate::currentDate()) && docs_fact[23] )   n_drp_2+=docs_cntr[23];
             if (n_drp_2>0) {
                 QMessageBox::warning(this, "ДРП не соответствует категории персоны",
                                      "У застрахованного указан по крайней мере один действующий ДРП, \nне соответствующий категории персоны!\n"
                                      "\nДля постоянно проживающих в России иностранцев разрешён тип ДРП: 11\n"
                                      "\nЗакройте лишние ДРП задав срок действия или просто снимите флажок \"Действует\".\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }
        }

        else if ( data_pers.category==3 ||
                  data_pers.category==8 ) {
             // проверка количества действующих УДЛ персоны
             int n_udl = 0;
             if (docs_arry[ 9] && docs_date[ 9]<=QDate::currentDate() && (!docs_fexp[ 9] || docs_dexp[ 9]>QDate::currentDate()) && docs_fact[ 9] )   n_udl+=docs_cntr[ 9];
             if (docs_arry[24] && docs_date[24]<=QDate::currentDate() && (!docs_fexp[24] || docs_dexp[24]>QDate::currentDate()) && docs_fact[24] )   n_udl+=docs_cntr[24];
             if (n_udl>1) {
                 QMessageBox::warning(this, "Слишком много действующих УДЛ!",
                                      "У застрахованного слишком много действующих УДЛ: " + QString::number(n_udl) + "!\n"
                                      "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }

             // проверка числа неправильных УДЛ персоны
             int n_udl_2 = 0;
             if (docs_arry[ 1] && docs_date[ 1]<=QDate::currentDate() && (!docs_fexp[ 1] || docs_dexp[ 1]>QDate::currentDate()) && docs_fact[ 1] )   n_udl_2+=docs_cntr[ 1];
             //if (docs_arry[ 3] && docs_date[ 3]<=QDate::currentDate() && (!docs_fexp[ 3] || docs_dexp[ 3]>QDate::currentDate()) && docs_fact[ 3] )   n_udl_2+=docs_cntr[ 3];
             if (docs_arry[13] && docs_date[13]<=QDate::currentDate() && (!docs_fexp[13] || docs_dexp[13]>QDate::currentDate()) && docs_fact[13] )   n_udl_2+=docs_cntr[13];
             //if (docs_arry[14] && docs_date[14]<=QDate::currentDate() && (!docs_fexp[14] || docs_dexp[14]>QDate::currentDate()) && docs_fact[14] )   n_udl_2+=docs_cntr[14];
             //if (docs_arry[24] && docs_date[24]<=QDate::currentDate() && (!docs_fexp[24] || docs_dexp[24]>QDate::currentDate()) && docs_fact[24] )   n_udl_2+=docs_cntr[24];
             if (docs_arry[22] && docs_date[22]<=QDate::currentDate() && (!docs_fexp[22] || docs_dexp[22]>QDate::currentDate()) && docs_fact[22] )   n_udl_2+=docs_cntr[22];
             if (docs_arry[10] && docs_date[10]<=QDate::currentDate() && (!docs_fexp[10] || docs_dexp[10]>QDate::currentDate()) && docs_fact[10] )   n_udl_2+=docs_cntr[10];
             if (docs_arry[12] && docs_date[12]<=QDate::currentDate() && (!docs_fexp[12] || docs_dexp[12]>QDate::currentDate()) && docs_fact[12] )   n_udl_2+=docs_cntr[12];
             if (docs_arry[25] && docs_date[25]<=QDate::currentDate() && (!docs_fexp[25] || docs_dexp[25]>QDate::currentDate()) && docs_fact[25] )   n_udl_2+=docs_cntr[25];
             if (docs_arry[27] && docs_date[27]<=QDate::currentDate() && (!docs_fexp[27] || docs_dexp[27]>QDate::currentDate()) && docs_fact[27] )   n_udl_2+=docs_cntr[27];
             if (docs_arry[28] && docs_date[28]<=QDate::currentDate() && (!docs_fexp[28] || docs_dexp[28]>QDate::currentDate()) && docs_fact[28] )   n_udl_2+=docs_cntr[28];
             if (n_udl_2>0) {
                 QMessageBox::warning(this, "УДЛ не соответствует категории персоны",
                                      "У застрахованного указан по крайней мере один действующий УДЛ, \nне соответствующий категории персоны!\n"
                                      "\nДля временно проживающих в России иностранцев разрешён тип УДЛ: 9\n"
                                      "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }

             // проверка количества действующих ДРП персоны
             int n_drp = 0;
             if (docs_arry[23] && docs_date[23]<=QDate::currentDate() && (!docs_fexp[23] || docs_dexp[23]>QDate::currentDate()) && docs_fact[23] )   n_drp+=docs_cntr[23];
             if (n_drp>1) {
                 QMessageBox::warning(this, "Слишком много действующих ДРП!",
                                      "У застрахованного слишком много действующих ДРП: " + QString::number(n_drp) + "!\n"
                                      "\nЗакройте лишние ДРП задав срок действия или просто снимите флажок \"Действует\".\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }

             // проверка числа неправильных ДРП персоны
             int n_drp_2 = 0;
             if (docs_arry[11] && docs_date[11]<=QDate::currentDate() && (!docs_fexp[11] || docs_dexp[11]>QDate::currentDate()) && docs_fact[11] )   n_drp_2+=docs_cntr[11];
             if (docs_arry[22] && docs_date[22]<=QDate::currentDate() && (!docs_fexp[22] || docs_dexp[22]>QDate::currentDate()) && docs_fact[22] )   n_drp_2+=docs_cntr[22];
             if (n_drp_2>0) {
                 QMessageBox::warning(this, "ДРП не соответствует категории персоны",
                                      "У застрахованного указан по крайней мере один действующий ДРП, \nне соответствующий категории персоны!\n"
                                      "\nДля временно проживающих в России иностранцев разрешён тип ДРП: 23\n"
                                      "\nЗакройте лишние ДРП задав срок действия или просто снимите флажок \"Действует\".\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }
        }

        else if ( data_pers.category==4 ) {
            int n_udl = 0;
            if (docs_arry[22] && docs_date[22]<=QDate::currentDate() && (!docs_fexp[22] || docs_dexp[22]>QDate::currentDate()) && docs_fact[22] )   n_udl+=docs_cntr[22];
            if (docs_arry[11] && docs_date[11]<=QDate::currentDate() && (!docs_fexp[11] || docs_dexp[11]>QDate::currentDate()) && docs_fact[11] )   n_udl+=docs_cntr[11];
            if (docs_arry[23] && docs_date[23]<=QDate::currentDate() && (!docs_fexp[23] || docs_dexp[23]>QDate::currentDate()) && docs_fact[23] )   n_udl+=docs_cntr[23];
            if (n_udl>1) {
                QMessageBox::warning(this, "Слишком много действующих УДЛ!",
                                     "У застрахованного слишком много действующих УДЛ: " + QString::number(n_udl) + "!\n"
                                     "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());
                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();
                return false;
            }
            //delete query_udl;

            // проверка числа неправильных УДЛ персоны
            int n_udl_2 = 0;
            if (docs_arry[ 1] && docs_date[ 1]<=QDate::currentDate() && (!docs_fexp[ 1] || docs_dexp[ 1]>QDate::currentDate()) && docs_fact[ 1] )   n_udl_2+=docs_cntr[ 1];
            if (docs_arry[ 3] && docs_date[ 3]<=QDate::currentDate() && (!docs_fexp[ 3] || docs_dexp[ 3]>QDate::currentDate()) && docs_fact[ 3] )   n_udl_2+=docs_cntr[ 3];
            if (docs_arry[13] && docs_date[13]<=QDate::currentDate() && (!docs_fexp[13] || docs_dexp[13]>QDate::currentDate()) && docs_fact[13] )   n_udl_2+=docs_cntr[13];
            if (docs_arry[14] && docs_date[14]<=QDate::currentDate() && (!docs_fexp[14] || docs_dexp[14]>QDate::currentDate()) && docs_fact[14] )   n_udl_2+=docs_cntr[14];
            if (docs_arry[24] && docs_date[24]<=QDate::currentDate() && (!docs_fexp[24] || docs_dexp[24]>QDate::currentDate()) && docs_fact[24] )   n_udl_2+=docs_cntr[24];
            if (docs_arry[ 9] && docs_date[ 9]<=QDate::currentDate() && (!docs_fexp[ 9] || docs_dexp[ 9]>QDate::currentDate()) && docs_fact[ 9] )   n_udl_2+=docs_cntr[ 9];
            if (docs_arry[10] && docs_date[10]<=QDate::currentDate() && (!docs_fexp[10] || docs_dexp[10]>QDate::currentDate()) && docs_fact[10] )   n_udl_2+=docs_cntr[10];
            if (docs_arry[12] && docs_date[12]<=QDate::currentDate() && (!docs_fexp[12] || docs_dexp[12]>QDate::currentDate()) && docs_fact[12] )   n_udl_2+=docs_cntr[12];
            if (docs_arry[25] && docs_date[25]<=QDate::currentDate() && (!docs_fexp[25] || docs_dexp[25]>QDate::currentDate()) && docs_fact[25] )   n_udl_2+=docs_cntr[25];
            if (docs_arry[27] && docs_date[27]<=QDate::currentDate() && (!docs_fexp[27] || docs_dexp[27]>QDate::currentDate()) && docs_fact[27] )   n_udl_2+=docs_cntr[27];
            if (docs_arry[28] && docs_date[28]<=QDate::currentDate() && (!docs_fexp[28] || docs_dexp[28]>QDate::currentDate()) && docs_fact[28] )   n_udl_2+=docs_cntr[28];
            if (docs_arry[21] && docs_date[21]<=QDate::currentDate() && (!docs_fexp[21] || docs_dexp[21]>QDate::currentDate()) && docs_fact[21] )   n_udl_2+=docs_cntr[21];
            if (n_udl_2>0) {
                QMessageBox::warning(this, "УДЛ не соответствует категории персоны",
                                     "У застрахованного указан по крайней мере один действующий УДЛ, \nне соответствующий категории персоны!\n"
                                     "\nДля лиц без гражданства разрешён тип УДЛ: 22\n"
                                     "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());
                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();

                return false;
             }
        }

        else if ( data_pers.category==9 ) {
             // проверка количества действующих УДЛ персоны
             int n_udl = 0;
             //if (docs_arry[22] && docs_date[22]<=QDate::currentDate() && (!docs_fexp[22] || docs_dexp[22]>QDate::currentDate()) && docs_fact[22] )   n_udl+=docs_cntr[22];
             if (docs_arry[11] && docs_date[11]<=QDate::currentDate() && (!docs_fexp[11] || docs_dexp[11]>QDate::currentDate()) && docs_fact[11] )   n_udl+=docs_cntr[11];
             if (docs_arry[23] && docs_date[23]<=QDate::currentDate() && (!docs_fexp[23] || docs_dexp[23]>QDate::currentDate()) && docs_fact[23] )   n_udl+=docs_cntr[23];
             if (n_udl>1) {
                 QMessageBox::warning(this, "Слишком много действующих УДЛ!",
                                      "У застрахованного слишком много действующих УДЛ: " + QString::number(n_udl) + "!\n"
                                      "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }
             //delete query_udl;

             // проверка числа неправильных УДЛ персоны
             int n_udl_2 = 0;
             if (docs_arry[ 1] && docs_date[ 1]<=QDate::currentDate() && (!docs_fexp[ 1] || docs_dexp[ 1]>QDate::currentDate()) && docs_fact[ 1] )   n_udl_2+=docs_cntr[ 1];
             if (docs_arry[ 3] && docs_date[ 3]<=QDate::currentDate() && (!docs_fexp[ 3] || docs_dexp[ 3]>QDate::currentDate()) && docs_fact[ 3] )   n_udl_2+=docs_cntr[ 3];
             if (docs_arry[13] && docs_date[13]<=QDate::currentDate() && (!docs_fexp[13] || docs_dexp[13]>QDate::currentDate()) && docs_fact[13] )   n_udl_2+=docs_cntr[13];
             if (docs_arry[14] && docs_date[14]<=QDate::currentDate() && (!docs_fexp[14] || docs_dexp[14]>QDate::currentDate()) && docs_fact[14] )   n_udl_2+=docs_cntr[14];
             if (docs_arry[24] && docs_date[24]<=QDate::currentDate() && (!docs_fexp[24] || docs_dexp[24]>QDate::currentDate()) && docs_fact[24] )   n_udl_2+=docs_cntr[24];
             if (docs_arry[ 9] && docs_date[ 9]<=QDate::currentDate() && (!docs_fexp[ 9] || docs_dexp[ 9]>QDate::currentDate()) && docs_fact[ 9] )   n_udl_2+=docs_cntr[ 9];
             if (docs_arry[10] && docs_date[10]<=QDate::currentDate() && (!docs_fexp[10] || docs_dexp[10]>QDate::currentDate()) && docs_fact[10] )   n_udl_2+=docs_cntr[10];
             if (docs_arry[12] && docs_date[12]<=QDate::currentDate() && (!docs_fexp[12] || docs_dexp[12]>QDate::currentDate()) && docs_fact[12] )   n_udl_2+=docs_cntr[12];
             if (docs_arry[25] && docs_date[25]<=QDate::currentDate() && (!docs_fexp[25] || docs_dexp[25]>QDate::currentDate()) && docs_fact[25] )   n_udl_2+=docs_cntr[25];
             if (docs_arry[27] && docs_date[27]<=QDate::currentDate() && (!docs_fexp[27] || docs_dexp[27]>QDate::currentDate()) && docs_fact[27] )   n_udl_2+=docs_cntr[27];
             if (docs_arry[28] && docs_date[28]<=QDate::currentDate() && (!docs_fexp[28] || docs_dexp[28]>QDate::currentDate()) && docs_fact[28] )   n_udl_2+=docs_cntr[28];
             if (docs_arry[21] && docs_date[21]<=QDate::currentDate() && (!docs_fexp[21] || docs_dexp[21]>QDate::currentDate()) && docs_fact[21] )   n_udl_2+=docs_cntr[21];
             if (n_udl_2>0) {
                 QMessageBox::warning(this, "УДЛ не соответствует категории персоны",
                                      "У застрахованного указан по крайней мере один действующий УДЛ, \nне соответствующий категории персоны!\n"
                                      "\nДля лиц без гражданства разрешён тип УДЛ: 22\n"
                                      "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }
        }

        else if ( data_pers.category==5 ||
                  data_pers.category==10 ) {
             // проверка количества действующих УДЛ персоны
             int n_udl = 0;
             if (docs_arry[10] && docs_date[10]<=QDate::currentDate() && (!docs_fexp[10] || docs_dexp[10]>QDate::currentDate()) && docs_fact[10] )   n_udl+=docs_cntr[10];
             if (docs_arry[12] && docs_date[12]<=QDate::currentDate() && (!docs_fexp[12] || docs_dexp[12]>QDate::currentDate()) && docs_fact[12] )   n_udl+=docs_cntr[12];
             if (docs_arry[25] && docs_date[25]<=QDate::currentDate() && (!docs_fexp[25] || docs_dexp[25]>QDate::currentDate()) && docs_fact[25] )   n_udl+=docs_cntr[25];
             if (docs_arry[27] && docs_date[27]<=QDate::currentDate() && (!docs_fexp[27] || docs_dexp[27]>QDate::currentDate()) && docs_fact[27] )   n_udl+=docs_cntr[27];
             if (docs_arry[28] && docs_date[28]<=QDate::currentDate() && (!docs_fexp[28] || docs_dexp[28]>QDate::currentDate()) && docs_fact[28] )   n_udl+=docs_cntr[28];
             if (n_udl>1) {
                 QMessageBox::warning(this, "Слишком много действующих УДЛ!",
                                      "У застрахованного слишком много действующих УДЛ: " + QString::number(n_udl) + "!\n"
                                      "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }
             //delete query_udl;

             // проверка числа неправильных УДЛ персоны
             int n_udl_2 = 0;
             if (docs_arry[ 1] && docs_date[ 1]<=QDate::currentDate() && (!docs_fexp[ 1] || docs_dexp[ 1]>QDate::currentDate()) && docs_fact[ 1] )   n_udl_2+=docs_cntr[ 1];
             if (docs_arry[ 3] && docs_date[ 3]<=QDate::currentDate() && (!docs_fexp[ 3] || docs_dexp[ 3]>QDate::currentDate()) && docs_fact[ 3] )   n_udl_2+=docs_cntr[ 3];
             if (docs_arry[13] && docs_date[13]<=QDate::currentDate() && (!docs_fexp[13] || docs_dexp[13]>QDate::currentDate()) && docs_fact[13] )   n_udl_2+=docs_cntr[13];
             if (docs_arry[14] && docs_date[14]<=QDate::currentDate() && (!docs_fexp[14] || docs_dexp[14]>QDate::currentDate()) && docs_fact[14] )   n_udl_2+=docs_cntr[14];
             if (docs_arry[24] && docs_date[24]<=QDate::currentDate() && (!docs_fexp[24] || docs_dexp[24]>QDate::currentDate()) && docs_fact[24] )   n_udl_2+=docs_cntr[24];
             if (docs_arry[ 9] && docs_date[ 9]<=QDate::currentDate() && (!docs_fexp[ 9] || docs_dexp[ 9]>QDate::currentDate()) && docs_fact[ 9] )   n_udl_2+=docs_cntr[ 9];
             if (docs_arry[22] && docs_date[22]<=QDate::currentDate() && (!docs_fexp[22] || docs_dexp[22]>QDate::currentDate()) && docs_fact[22] )   n_udl_2+=docs_cntr[22];
             if (n_udl_2>0) {
                 QMessageBox::warning(this, "УДЛ не соответствует категории персоны",
                                      "У застрахованного указан по крайней мере один действующий УДЛ, \nне соответствующий категории персоны!\n"
                                      "\nДля беженцев разрешены УДЛ типов: 10, 12, 25, 27, 28\n"
                                      "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }

             // проверка количества действующих ДРП персоны
             int n_drp_2 = 0;
             if (docs_arry[11] && docs_date[11]<=QDate::currentDate() && (!docs_fexp[11] || docs_dexp[11]>QDate::currentDate()) && docs_fact[11] )   n_drp_2+=docs_cntr[11];
             if (docs_arry[22] && docs_date[22]<=QDate::currentDate() && (!docs_fexp[22] || docs_dexp[22]>QDate::currentDate()) && docs_fact[22] )   n_drp_2+=docs_cntr[22];
             if (docs_arry[23] && docs_date[23]<=QDate::currentDate() && (!docs_fexp[23] || docs_dexp[23]>QDate::currentDate()) && docs_fact[23] )   n_drp_2+=docs_cntr[23];
             if (n_drp_2>0) {
                 QMessageBox::warning(this, "ДРП не соответствует категории персоны",
                                      "У застрахованного указан по крайней мере один действующий ДРП, \nне соответствующий категории персоны!\n"
                                      "\nДля беженцев ДРП не нужны.\n"
                                      "\nЗакройте лишние ДРП задав срок действия или просто снимите флажок \"Действует\".\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }
        }

        else if ( data_pers.category==11 ) {
            // проверка количества действующих УДЛ персоны
            int n_udl = 0;
            if (docs_arry[ 9] && docs_date[9]<=QDate::currentDate() && (!docs_fexp[ 9] || docs_dexp[ 9]>QDate::currentDate()) && docs_fact[ 9])   n_udl+=docs_cntr[ 9];
            if (docs_arry[21] && docs_date[21]<=QDate::currentDate()&& (!docs_fexp[21] || docs_dexp[21]>QDate::currentDate()) && docs_fact[21])   n_udl+=docs_cntr[21];
            if (n_udl>1) {
                QMessageBox::warning(this, "Слишком много действующих УДЛ!",
                                     "У застрахованного слишком много действующих УДЛ: " + QString::number(n_udl) + "!\n"
                                     "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());
                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();
                return false;
            }

            // проверка количества действующих договоров персоны
            int n_drp = 0;
            if (docs_arry[29] && docs_date[29]<=QDate::currentDate() && (!docs_fexp[29] || docs_dexp[29]>QDate::currentDate()) && docs_fact[29] )   n_drp+=docs_cntr[29];
            if (n_drp>1) {
                QMessageBox::warning(this, "Слишком много трудовых договоров!",
                                     "У застрахованного слишком много трудовых договоров: " + QString::number(n_drp) + "!\n"
                                     "\nЗакройте лишние договоры задав срок действия или просто снимите флажок \"Действует\".\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();

                return false;
            }

            // проверка количества ошибочных УДЛ персоны
            int n_udl_2 = 0;
            if (docs_arry[ 1] && docs_date[ 1]<=QDate::currentDate() && (!docs_fexp[ 1] || docs_dexp[ 1]>QDate::currentDate()) && docs_fact[ 1] )   n_udl_2+=docs_cntr[ 1];
            if (docs_arry[ 3] && docs_date[ 3]<=QDate::currentDate() && (!docs_fexp[ 3] || docs_dexp[ 3]>QDate::currentDate()) && docs_fact[ 3] )   n_udl_2+=docs_cntr[ 3];
            //if (docs_arry[ 9] && docs_date[ 9]<=QDate::currentDate() && (!docs_fexp[ 9] || docs_dexp[ 9]>QDate::currentDate()) && docs_fact[ 9] )   n_udl_2+=docs_cntr[ 9];
            if (docs_arry[10] && docs_date[10]<=QDate::currentDate() && (!docs_fexp[10] || docs_dexp[10]>QDate::currentDate()) && docs_fact[10] )   n_udl_2+=docs_cntr[10];
            if (docs_arry[12] && docs_date[12]<=QDate::currentDate() && (!docs_fexp[12] || docs_dexp[12]>QDate::currentDate()) && docs_fact[12] )   n_udl_2+=docs_cntr[12];
            if (docs_arry[13] && docs_date[13]<=QDate::currentDate() && (!docs_fexp[13] || docs_dexp[13]>QDate::currentDate()) && docs_fact[13] )   n_udl_2+=docs_cntr[13];
            if (docs_arry[14] && docs_date[14]<=QDate::currentDate() && (!docs_fexp[14] || docs_dexp[14]>QDate::currentDate()) && docs_fact[14] )   n_udl_2+=docs_cntr[14];
            //if (docs_arry[21] && docs_date[21]<=QDate::currentDate() && (!docs_fexp[21] || docs_dexp[21]>QDate::currentDate()) && docs_fact[21] )   n_udl_2+=docs_cntr[21];
            if (docs_arry[22] && docs_date[22]<=QDate::currentDate() && (!docs_fexp[22] || docs_dexp[22]>QDate::currentDate()) && docs_fact[22] )   n_udl_2+=docs_cntr[22];
            if (docs_arry[24] && docs_date[24]<=QDate::currentDate() && (!docs_fexp[24] || docs_dexp[24]>QDate::currentDate()) && docs_fact[24] )   n_udl_2+=docs_cntr[24];
            if (docs_arry[25] && docs_date[25]<=QDate::currentDate() && (!docs_fexp[25] || docs_dexp[25]>QDate::currentDate()) && docs_fact[25] )   n_udl_2+=docs_cntr[25];
            if (docs_arry[27] && docs_date[27]<=QDate::currentDate() && (!docs_fexp[27] || docs_dexp[27]>QDate::currentDate()) && docs_fact[27] )   n_udl_2+=docs_cntr[27];
            if (docs_arry[28] && docs_date[28]<=QDate::currentDate() && (!docs_fexp[28] || docs_dexp[28]>QDate::currentDate()) && docs_fact[28] )   n_udl_2+=docs_cntr[28];
            if (n_udl_2>0) {
                QMessageBox::warning(this, "УДЛ не соответствует категории персоны",
                                     "У застрахованного указан по крайней мере один действующий УДЛ, \nне соответствующий категории персоны!\n"
                                     "\nДля граждан стран ЕАЭС разрешены типы УДЛ: 9, 21\n"
                                     "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();

                return false;
            }

            // проверка количества ошибочных ДРП персоны
            int n_drp_2 = 0;
            if (docs_arry[11] && docs_date[11]<=QDate::currentDate() && (!docs_fexp[11] || docs_dexp[11]>QDate::currentDate()) && docs_fact[11] )   n_drp_2+=docs_cntr[11];
            if (docs_arry[23] && docs_date[23]<=QDate::currentDate() && (!docs_fexp[23] || docs_dexp[23]>QDate::currentDate()) && docs_fact[23] )   n_drp_2+=docs_cntr[23];
            if (docs_arry[26] && docs_date[26]<=QDate::currentDate() && (!docs_fexp[26] || docs_dexp[26]>QDate::currentDate()) && docs_fact[26] )   n_drp_2+=docs_cntr[26];
            if (n_drp_2>0) {
                 QMessageBox::warning(this, "ДРП не соответствует категории персоны",
                                      "У застрахованного указан по крайней мере один действующий ДРП, не соответствующий категории персоны!\n"
                                      "\nДля трудящихся граждан стран ЕАЭС не надо указывать ДРП или удостоверение сотрудника ЕАЭС. Вместо этого указываются данные трудового договора: 29.\n"
                                      "\nДобавьте недостающие документы.\n"
                                      "Закройте лишние документы задав срок действия или просто снимите флажок \"Действует\"");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }
        }

        else if ( data_pers.category==12 ||
                  data_pers.category==13 ||
                  data_pers.category==14 ) {
            // проверка количества действующих УДЛ персоны
            int n_udl = 0;
            if (docs_arry[ 9] && docs_date[9]<=QDate::currentDate() && (!docs_fexp[ 9] || docs_dexp[ 9]>QDate::currentDate()) && docs_fact[ 9])   n_udl+=docs_cntr[ 9];
            if (docs_arry[21] && docs_date[21]<=QDate::currentDate()&& (!docs_fexp[21] || docs_dexp[21]>QDate::currentDate()) && docs_fact[21])   n_udl+=docs_cntr[21];
            if (n_udl>1) {
                QMessageBox::warning(this, "Слишком много действующих УДЛ!",
                                     "У застрахованного слишком много действующих УДЛ: " + QString::number(n_udl) + "!\n"
                                     "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());
                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();
                return false;
            }

            // проверка количества действующих удостоверений персоны
            int n_drp = 0;
            if (docs_arry[26] && docs_date[26]<=QDate::currentDate() && (!docs_fexp[26] || docs_dexp[26]>QDate::currentDate()) && docs_fact[26] )   n_drp+=docs_cntr[26];
            if (n_drp>1) {
                QMessageBox::warning(this, "Слишком много удостоверений сотрудника ЕАЭС!",
                                     "У застрахованного слишком много удостоверений сотрудника ЕАЭС: " + QString::number(n_drp) + "!\n"
                                     "\nЗакройте лишние удостоверения задав срок действия или просто снимите флажок \"Действует\".\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();

                return false;
            }

            // проверка количества ошибочных УДЛ персоны
            int n_udl_2 = 0;
            if (docs_arry[ 1] && docs_date[ 1]<=QDate::currentDate() && (!docs_fexp[ 1] || docs_dexp[ 1]>QDate::currentDate()) && docs_fact[ 1] )   n_udl_2+=docs_cntr[ 1];
            if (docs_arry[ 3] && docs_date[ 3]<=QDate::currentDate() && (!docs_fexp[ 3] || docs_dexp[ 3]>QDate::currentDate()) && docs_fact[ 3] )   n_udl_2+=docs_cntr[ 3];
            //if (docs_arry[ 9] && docs_date[ 9]<=QDate::currentDate() && (!docs_fexp[ 9] || docs_dexp[ 9]>QDate::currentDate()) && docs_fact[ 9] )   n_udl_2+=docs_cntr[ 9];
            if (docs_arry[10] && docs_date[10]<=QDate::currentDate() && (!docs_fexp[10] || docs_dexp[10]>QDate::currentDate()) && docs_fact[10] )   n_udl_2+=docs_cntr[10];
            if (docs_arry[12] && docs_date[12]<=QDate::currentDate() && (!docs_fexp[12] || docs_dexp[12]>QDate::currentDate()) && docs_fact[12] )   n_udl_2+=docs_cntr[12];
            if (docs_arry[13] && docs_date[13]<=QDate::currentDate() && (!docs_fexp[13] || docs_dexp[13]>QDate::currentDate()) && docs_fact[13] )   n_udl_2+=docs_cntr[13];
            if (docs_arry[14] && docs_date[14]<=QDate::currentDate() && (!docs_fexp[14] || docs_dexp[14]>QDate::currentDate()) && docs_fact[14] )   n_udl_2+=docs_cntr[14];
            //if (docs_arry[21] && docs_date[21]<=QDate::currentDate() && (!docs_fexp[21] || docs_dexp[21]>QDate::currentDate()) && docs_fact[21] )   n_udl_2+=docs_cntr[21];
            if (docs_arry[22] && docs_date[22]<=QDate::currentDate() && (!docs_fexp[22] || docs_dexp[22]>QDate::currentDate()) && docs_fact[22] )   n_udl_2+=docs_cntr[22];
            if (docs_arry[24] && docs_date[24]<=QDate::currentDate() && (!docs_fexp[24] || docs_dexp[24]>QDate::currentDate()) && docs_fact[24] )   n_udl_2+=docs_cntr[24];
            if (docs_arry[25] && docs_date[25]<=QDate::currentDate() && (!docs_fexp[25] || docs_dexp[25]>QDate::currentDate()) && docs_fact[25] )   n_udl_2+=docs_cntr[25];
            if (docs_arry[27] && docs_date[27]<=QDate::currentDate() && (!docs_fexp[27] || docs_dexp[27]>QDate::currentDate()) && docs_fact[27] )   n_udl_2+=docs_cntr[27];
            if (docs_arry[28] && docs_date[28]<=QDate::currentDate() && (!docs_fexp[28] || docs_dexp[28]>QDate::currentDate()) && docs_fact[28] )   n_udl_2+=docs_cntr[28];
            if (n_udl_2>0) {
                QMessageBox::warning(this, "УДЛ не соответствует категории персоны",
                                     "У застрахованного указан по крайней мере один действующий УДЛ, \nне соответствующий категории персоны!\n"
                                     "\nДля граждан стран ЕАЭС разрешены типы УДЛ: 9, 21\n"
                                     "\nЗакройте лишние УДЛ задав срок действия или просто снимите флажок \"Действует\".\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();

                return false;
            }

            // проверка количества ошибочных ДРП персоны
            int n_drp_2 = 0;
            if (docs_arry[11] && docs_date[11]<=QDate::currentDate() && (!docs_fexp[11] || docs_dexp[11]>QDate::currentDate()) && docs_fact[11] )   n_drp_2+=docs_cntr[11];
            if (docs_arry[23] && docs_date[23]<=QDate::currentDate() && (!docs_fexp[23] || docs_dexp[23]>QDate::currentDate()) && docs_fact[23] )   n_drp_2+=docs_cntr[23];
            if (docs_arry[29] && docs_date[29]<=QDate::currentDate() && (!docs_fexp[29] || docs_dexp[29]>QDate::currentDate()) && docs_fact[29] )   n_drp_2+=docs_cntr[29];
            if (n_drp_2>0) {
                QMessageBox::warning(this, "ДРП не соответствует категории персоны",
                                     "У застрахованного указан по крайней мере один действующий ДРП, не соответствующий категории персоны!\n"
                                     "\nДля сотрудников ЕАЭС не надо указывать ДРП или трудовой договор. Вместо этого указываются данные удостоверения сотрудника ЕАЭС: 26\n"
                                     "\nДобавьте недостающие документы.\n"
                                     "Закройте лишние документы задав срок действия или просто снимите флажок \"Действует\"");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();

                return false;
            }
        }


        // проверка соответствия УДЛ гражданству персоны
        QSqlQuery *query_udl = new QSqlQuery(db);
        QString sql_udl = "select d.doc_type, d.doc_date "
                          "  from persons_docs d "
                          " where d.id=(select * from get_pers_udl(" + QString::number(data_pers.id) + ", NULL)) ; ";
        mySQL.exec(this, sql_udl, QString("Проверка соответствия УДЛ гражданству персоны"), *query_udl, true, db, data_app);
        if (query_udl->size()>0) {
            if (!query_udl->next()) {
                QMessageBox::warning(this, "Ошибка при проверке числа УДЛ",
                                     "При проверке числа действующих УДЛ произошла непредвиденная ошибка!\n\n"
                                     "Операция отменена.\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();

                return false;
            }
            int udl_type = query_udl->value(0).toInt();
            QDate udl_date = query_udl->value(1).toDate();
            if ( data_pers.oksm_c==643 &&
                 (udl_type!=1  &&
                  udl_type!=3  &&
                  udl_type!=13 &&
                  udl_type!=14 &&
                  udl_type!=24 ) ) {
                QMessageBox::warning(this, "Тип УДЛ не соответствует гражданству застрахованного!",
                                     "У гражданина России могут быть УДЛ типов: 1, 3, 13, 14, 24!\n"
                                     "Исправьте или добавьте новый действующий УДЛ.\n");
                this->setCursor(Qt::ArrowCursor);
                ui->group_persons_tab->setEnabled(true);
                ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                ui->lab_test_for->setText("");
                ui->lab_test_for->setVisible(false);
                QApplication::processEvents();

                return false;
            }
            else
            if ( data_pers.oksm_c!=643 &&
                 (udl_type==1  ||
                  udl_type==3  ||
                  udl_type==13 ||
                  udl_type==14 ||
                  udl_type==24 ) ) {
                 QMessageBox::warning(this, "Тип УДЛ не соответствует гражданству застрахованного!",
                                      "У иностранца могут быть УДЛ типов: 9, 10, 12, 22, 25, 27, 28!\n"
                                      "Исправьте или добавьте но    вый действующий УДЛ.\n");
                 this->setCursor(Qt::ArrowCursor);
                 ui->group_persons_tab->setEnabled(true);
                 ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                 ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                 ui->lab_test_for->setText("");
                 ui->lab_test_for->setVisible(false);
                 QApplication::processEvents();

                 return false;
             }
            if ( udl_type==14
                 && QDate::currentDate().year() - udl_date.year()<2
                 // только для Белгородской области
                 && data_app.ocato=="14000") {
                // паспорт гражданина России выдан в этом году - проверим, есть ли OLD_DOC

                QSqlQuery *query_old = new QSqlQuery(db);
                QString sql_old = "select d.id "
                                  "  from persons_docs d "
                                  " where d.id_person=" + QString::number(data_pers.id) + " "
                                  "   and d.doc_type in(14, 3, 24, 9, 21, 22)"
                                  "   and d.status=2 ; ";
                mySQL.exec(this, sql_old, QString("Проверка наличия старого УДЛ, еслии паспорт выдан в этом году"), *query_old, true, db, data_app);
                query_old->next();
                int cnt = query_old->size();
                if (cnt<1) {
                    QString pss;
                    do {
                        pss = QInputDialog::getText(this,"Нужен старый УДЛ!",
                                                    QString("Паспорт гражданина Российской Федерации выдан менее года назад.\n") +
                                                    "Для его надёжной идентификации нужно указать старый УДЛ!\n\n"
                                                    "Выберите или добавьте старый УДЛ и поставьте ему пометку\n\"отправлять как старый\".\n\n"
                                                    "Для сохранения без старого документа - введите пароль \n" +
                                                    (data_app.is_head||data_app.is_tech ? "ЧУЖОЙ" : "***")).toUpper();
                    } while (pss!="ЧУЖОЙ" && !pss.isEmpty());

                    if (pss!="ЧУЖОЙ") {
                        this->setCursor(Qt::ArrowCursor);
                        ui->group_persons_tab->setEnabled(true);
                        ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                        ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                        ui->lab_test_for->setText("");
                        ui->lab_test_for->setVisible(false);
                        QApplication::processEvents();

                        delete query_old;
                        return false;
                    }
                }
                delete query_old;
            }
        }
        delete query_udl;


        int code = -1;
        if (f_quick)  code = data_pers.category;
        else  code = ui->combo_pers_pan_category->currentIndex();

        allow_ok = true;

        switch (code) {
        case 0: {
            docs_ok = false;
        }
        break;
        case 1:
        case 6:
        {
            QDate date_birth    = data_pers.date_birth;
            QDate date_birth_14 = data_pers.date_birth.addYears(14);
            QDate date_birth_20 = data_pers.date_birth.addYears(20);
            QDate date_birth_45 = data_pers.date_birth.addYears(45);

            // 20-14 = 6  -  максимальный срок службы паспорта 14-20 лет
            //QDate date_6 = QDate::currentDate().addYears(-6);

            // 45-20 = 25  -  максимальный срок службы паспорта 20-45 лет
            //QDate date_25 = QDate::currentDate().addYears(-25);

            bool d_0_14, d_14_20, d_20_45, d_45_;

            // проверка возраста
            if ( date_birth_14>=QDate::currentDate() ) {
                // до 14 лет
                d_0_14 = ( // проверка типа и даты выдачи документа
                           ( docs_arry[ 3] && docs_date[ 3]>=date_birth.addMonths(-2) && docs_fact[ 3] ) ||
                           ( docs_arry[24] && docs_date[24]>=date_birth.addMonths(-2) && docs_fact[24] )
                         );
                if (!d_0_14)
                    if ( QMessageBox::warning(this,
                                              "Гражданин РФ - нет действующего УДЛ!",
                                              "Внимание!\nУ застрахованного гражданина РФ возрастом 0-14 лет нет действующего УДЛ.\n\n"
                                              "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n"
                                              "  1) свидетельство о рождении, выданное в Российской Федерации,\n"
                                              "  2) свидетельство о рождении, выданное не в Российской Федерации.\n\n"
                                              "Всё равно продолжить страхование персоны?",
                                              QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes
                         &&
                         QInputDialog::getText(this,"Подтвердите выбор",
                                               QString("Для того, чтобы продолжить страхование человека с истёкшим свидетельством о рождении \n"
                                               "или паспортом гражданина России - введите пароль\n") +
                                               (data_app.is_head||data_app.is_tech ? "ПАСПОРТ" : "***")).toUpper() == "ПАСПОРТ")
                        d_0_14 = true;
            } else {
                d_0_14 = false;
            }

            if ( date_birth_14<QDate::currentDate() && date_birth_20>=QDate::currentDate() ) {
                // 14-20 лет
                d_14_20 = ( // проверка типа и даты выдачи документа
                            //( docs_arry[ 1] && docs_date[ 1]>=date_6 ) ||
                            ( docs_arry[13] && docs_date[13]>=date_birth_14.addMonths(-1) && docs_fact[13] ) ||
                            ( docs_arry[14] && docs_date[14]>=date_birth_14.addMonths(-1) && docs_fact[14] )
                          );
                if (!d_14_20)
                    if ( QMessageBox::warning(this,
                                             "Гражданин РФ - нет действующего УДЛ!",
                                             "Внимание!\nУ застрахованного гражданина РФ возрастом 14-20 лет нет действующего УДЛ.\n\n"
                                             "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n"
                                             "  1) паспорт гражданина Российской Федерации, выданный в 14 лет,\n"
                                             "  2) временное удостоверение личности гражданина Российской Федерации.\n\n"
                                             "Всё равно продолжить страхование персоны?",
                                             QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes
                         &&
                         QInputDialog::getText(this,"Подтвердите выбор",
                                              QString("Для того, чтобы продолжить страхование человека с истёкшим свидетельством о рождении \n"
                                              "или паспортом гражданина России - введите пароль\n") +
                                               (data_app.is_head||data_app.is_tech ? "ПАСПОРТ" : "***")).toUpper() == "ПАСПОРТ")
                   d_0_14 = true;
            } else {
                d_14_20 = false;
            }

            if ( date_birth_20<QDate::currentDate() && date_birth_45>=QDate::currentDate() ) {
                // 20-45 лет
                d_20_45 = ( // проверка типа и даты выдачи документа
                            ( docs_arry[13] && docs_date[13]>=date_birth_20.addMonths(-1) && docs_fact[13] ) ||
                            ( docs_arry[14] && docs_date[14]>=date_birth_20.addMonths(-1) && docs_fact[14] )
                          );
                if (!d_20_45)
                    if ( QMessageBox::warning(this,
                                             "Гражданин РФ - нет действующего УДЛ!",
                                             "Внимание!\nУ застрахованного гражданина РФ возрастом 20-45 лет нет действующего УДЛ.\n\n"
                                             "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n"
                                             "  1) паспорт гражданина Российской Федерации, выданный в 20 лет,\n"
                                             "  2) временное удостоверение личности гражданина Российской Федерации.\n\n"
                                             "Всё равно продолжить страхование персоны?",
                                             QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes
                         &&
                         QInputDialog::getText(this,"Подтвердите выбор",
                                              QString("Для того, чтобы продолжить страхование человека с истёкшим свидетельством о рождении \n"
                                              "или паспортом гражданина России - введите пароль\n") +
                                               (data_app.is_head||data_app.is_tech ? "ПАСПОРТ" : "***")).toUpper() == "ПАСПОРТ")
                   d_0_14 = true;
            } else {
                d_20_45 = false;
            }

            if ( date_birth_45<QDate::currentDate() ) {
                // 45+ лет
                d_45_ = ( // проверка типа и даты выдачи документа
                            ( docs_arry[ 1] && docs_fact[ 1] ) ||
                            ( docs_arry[13] && docs_date[13]>=date_birth_45.addMonths(-1) && docs_fact[13] ) ||
                            ( docs_arry[14] && docs_date[14]>=date_birth_45.addMonths(-1) && docs_fact[14] )
                          );
                if (!d_45_)
                    if ( QMessageBox::warning(this,
                                             "Гражданин РФ - нет действующего УДЛ!",
                                             "Внимание!\nУ застрахованного гражданина РФ возрастом 45 лет и старше нет действующего УДЛ.\n\n"
                                             "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n"
                                             "  1) паспорт гражданина Российской Федерации, выданный в 45 лет,\n"
                                             "  2) паспорт гражданина СССР,\n"
                                             "  3) временное удостоверение личности гражданина Российской Федерации.\n\n"
                                             "Всё равно продолжить страхование персоны?",
                                             QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes
                         &&
                         QInputDialog::getText(this,"Подтвердите выбор",
                                              QString("Для того, чтобы продолжить страхование человека с истёкшим свидетельством о рождении \n"
                                              "или паспортом гражданина России - введите пароль\n") +
                                               (data_app.is_head||data_app.is_tech ? "ПАСПОРТ" : "***")).toUpper() == "ПАСПОРТ")
                   d_0_14 = true;
            } else {
                d_45_ = false;
            }

            docs_ok =
                  ( // до 14 лет +1 мес -- свидетельство о рождении
                    d_0_14  ||
                    // с 14 до 20 лет +1 мес - паспорт или справка, выданные не раньше 14 лет -1 мес.
                    d_14_20 ||
                    // с 20 до 45 лет +1 мес - паспорт или справка, выданные не раньше 20 лет -1 мес.
                    d_20_45 ||
                    // с 45 лет +1 мес - паспорт, справка или паспорт СССР, выданные не раньше 45 лет -1 мес.
                    d_45_
                  );
            allow_ok = true;
        }
        break;
        case 5:
        case 10:
        {
            docs_ok = ( (docs_arry[10] && docs_fact[10] && (!docs_fexp[10] || (docs_fexp[10] && docs_dexp[10]>=QDate::currentDate())) ) ||
                        (docs_arry[12] && docs_fact[12] && (!docs_fexp[12] || (docs_fexp[12] && docs_dexp[12]>=QDate::currentDate())) ) ||
                        (docs_arry[25] && docs_fact[25] && (!docs_fexp[25] || (docs_fexp[25] && docs_dexp[25]>=QDate::currentDate())) ) ||
                        (docs_arry[27] && docs_fact[27] && (!docs_fexp[27] || (docs_fexp[27] && docs_dexp[27]>=QDate::currentDate())) ) ||
                        (docs_arry[28] && docs_fact[28] && (!docs_fexp[28] || (docs_fexp[28] && docs_dexp[28]>=QDate::currentDate())) ) );
            if (!docs_ok)
                QMessageBox::warning(this,
                                     "Беженец - нет действующего УДЛ!",
                                     "Внимание!\nУ застрахованного беженца нет действующего УДЛ.\n\n"
                                     "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n"
                                     "  1) удостоверение беженца,\n"
                                     "  2) cвидетельство о регистрации ходатайства о признании иммигранта беженцем на территории Российской Федерации,\n"
                                     "  3) cвидетельство о предоставлении временного убежища на территории Российской Федерации,\n"
                                     "  4) копия жалобы о лишении статуса беженца,\n"
                                     "  5) иной документ, соответствующий свидетельству о предоставлении убежища на территории Российской Федерации.\n");
            allow_ok = true;
        }
        break;
        case 2:
        case 7:
        {
            docs_ok = ( (docs_arry[ 9] && docs_fact[ 9] && (!docs_fexp[ 9] || (docs_fexp[ 9] && docs_dexp[ 9]>=QDate::currentDate())) ) ||
                        (docs_arry[21] && docs_fact[21] && (!docs_fexp[21] || (docs_fexp[21] && docs_dexp[21]>=QDate::currentDate())) ) ||
                        (docs_arry[ 3] && docs_fact[ 3] && (!docs_fexp[ 3] || (docs_fexp[ 3] && docs_dexp[ 3]>=QDate::currentDate())) ) ||
                        (docs_arry[14] && docs_fact[14] && (!docs_fexp[14] || (docs_fexp[14] && docs_dexp[14]>=QDate::currentDate())) ) ||
                        (docs_arry[24] && docs_fact[24] && (!docs_fexp[24] || (docs_fexp[24] && docs_dexp[24]>=QDate::currentDate())) ) );
            if (!docs_ok)
                QMessageBox::warning(this,
                                     "Иностранный гражданин постоянно проживающий в РФ - нет действующего УДЛ!",
                                     "Внимание!\nУ застрахованного иностранного гражданина нет действующего УДЛ.\n\n"
                                     "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n"
                                     "  1) паспорт иностранного гражданина,\n"
                                     "  2) документ иностранного гражданина.\n");
            allow_ok = ( (docs_arry[11] && docs_fact[11] && (!docs_fexp[11] || (docs_fexp[11] && docs_dexp[11]>=QDate::currentDate())) ) );
            if (!allow_ok)
                QMessageBox::warning(this,
                                     "Иностранный гражданин постоянно проживающий в РФ - нет действующего ДРП!",
                                     "Внимание!\nУ застрахованного иностранного гражданина постоянно проживающего в РФ нет действующего вида на жительство.\n\n"
                                     "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n"
                                     "  1) вид на жительство.\n");
        }
        break;
        case 3:
        case 8:
        {
            docs_ok = ( (docs_arry[ 9] && docs_fact[ 9] && (!docs_fexp[ 9] || (docs_fexp[ 9] && docs_dexp[ 9]>=QDate::currentDate())) ) ||
                        (docs_arry[21] && docs_fact[21] && (!docs_fexp[21] || (docs_fexp[21] && docs_dexp[21]>=QDate::currentDate())) ) ||
                        (docs_arry[ 3] && docs_fact[ 3] && (!docs_fexp[ 3] || (docs_fexp[ 3] && docs_dexp[ 3]>=QDate::currentDate())) ) ||
                        (docs_arry[14] && docs_fact[14] && (!docs_fexp[14] || (docs_fexp[14] && docs_dexp[14]>=QDate::currentDate())) ) ||
                        (docs_arry[24] && docs_fact[24] && (!docs_fexp[24] || (docs_fexp[24] && docs_dexp[24]>=QDate::currentDate())) ) );
            if (!docs_ok)
                QMessageBox::warning(this,
                                     "Иностранный гражданин временно проживающий в РФ - нет действующего УДЛ!",
                                     "Внимание!\nУ застрахованного иностранного гражданина нет действующего УДЛ.\n\n"
                                     "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n"
                                     "  1) паспорт иностранного гражданина,\n"
                                     "  2) документ иностранного гражданина.\n");
            allow_ok = ( (docs_arry[23] && docs_fact[23] && (!docs_fexp[23] || (docs_fexp[23] && docs_dexp[23]>=QDate::currentDate())) ) );
            if (!allow_ok)
                QMessageBox::warning(this,
                                     "Иностранный гражданин временно проживающий в РФ - нет действующего ДРП!",
                                     "Внимание!\nУ застрахованного иностранного гражданина временно проживающего в РФ нет действующего ДРП.\n\n"
                                     "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n"
                                     "  1) разрешение на временное проживание.\n");
        }
        break;
        case 4:
        {
            docs_ok = ( (docs_arry[22] && docs_fact[22] && (!docs_fexp[22] || (docs_fexp[22] && docs_dexp[22]>=QDate::currentDate())) ) ||
                        (docs_arry[11] && docs_fact[11] && (!docs_fexp[11] || (docs_fexp[11] && docs_dexp[11]>=QDate::currentDate())) ) ||
                        (docs_arry[23] && docs_fact[23] && (!docs_fexp[23] || (docs_fexp[23] && docs_dexp[23]>=QDate::currentDate())) ) );
            if (!docs_ok)
                QMessageBox::warning(this,
                                     "Лицо без гражданства - нет действующего УДЛ!",
                                     "Внимание!\nУ застрахованного лица без гражданства нет действующего УДЛ.\n\n"
                                     "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n  1) документ лица без гражданства.\n  2) вид на жительство.");
            /*allow_ok = ( (docs_arry[22] && docs_fact[22] && (!docs_fexp[22] || (docs_fexp[22] && docs_dexp[22]>=QDate::currentDate())) ) );
            if (!allow_ok)
                QMessageBox::warning(this,
                                     "Лицо без гражданства - нет действующего ДРП!",
                                     "Внимание!\nУ застрахованного лица без гражданства нет действующего ДРП.\n\n"
                                     "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n"
                                     "  1) разрешение на временное проживание.\n"
                                     "  2) вид на жительство.\n");*/
            allow_ok = true;
        }
        case 9:
        {
            docs_ok = ( (docs_arry[22] && docs_fact[22] && (!docs_fexp[22] || (docs_fexp[22] && docs_dexp[22]>=QDate::currentDate())) ) ||
                        (docs_arry[11] && docs_fact[11] && (!docs_fexp[11] || (docs_fexp[11] && docs_dexp[11]>=QDate::currentDate())) ) ||
                        (docs_arry[23] && docs_fact[23] && (!docs_fexp[23] || (docs_fexp[23] && docs_dexp[23]>=QDate::currentDate())) ) );
            if (!docs_ok)
                QMessageBox::warning(this,
                                     "Лицо без гражданства - нет действующего УДЛ!",
                                     "Внимание!\nУ застрахованного лица без гражданства нет действующего УДЛ.\n\n"
                                     "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n  1) документ лица без гражданства.\n  2) разрешение на временное проживание.");
            /*allow_ok = ( (docs_arry[22] && docs_fact[22] && (!docs_fexp[22] || (docs_fexp[22] && docs_dexp[22]>=QDate::currentDate())) ) );
            if (!allow_ok)
                QMessageBox::warning(this,
                                     "Лицо без гражданства - нет действующего ДРП!",
                                     "Внимание!\nУ застрахованного лица без гражданства нет действующего ДРП.\n\n"
                                     "Проверьте, внесён ли в базу данных и не истёк ли срок действия документа:\n"
                                     "  1) разрешение на временное проживание.\n"
                                     "  2) вид на жительство.\n");*/
            allow_ok = true;
        }
        break;
        case 11:
        {
            docs_ok = ( (docs_arry[ 9] && docs_fact[ 9] && (!docs_fexp[ 9] || (docs_fexp[ 9] && docs_dexp[ 9]>=QDate::currentDate())) ) ||
                        (docs_arry[21] && docs_fact[21] && (!docs_fexp[21] || (docs_fexp[21] && docs_dexp[21]>=QDate::currentDate())) ) );
            if (!docs_ok)
                QMessageBox::warning(this,
                                     "Трудящийся гражданин страны ЕАЭС - не хватает УДЛ!",
                                     "Внимание!\n"
                                     "У трудящегося гражданина страны ЕАЭС нет данных действующего УДЛ:\n"
                                     "  1) паспорт иностранного гражданина,\n"
                                     "  2) документ иностранного гражданина.");
            allow_ok = ( (docs_arry[29] && docs_fact[29] && (!docs_fexp[29] || (docs_fexp[29] && docs_dexp[29]>=QDate::currentDate())) ) );
            if (!allow_ok)
                QMessageBox::warning(this,
                                     "Трудящийся гражданин страны ЕАЭС - не хватает договора!",
                                     "Внимание!\n"
                                     "У трудящегося гражданина страны ЕАЭС нет данных трудового договороа:\n"
                                     "  (29) трудовой договор.\n");
        }
        break;
        case 12:
        case 13:
        case 14:
        {
            docs_ok = ( (docs_arry[ 9] && docs_fact[ 9] && (!docs_fexp[ 9] || (docs_fexp[ 9] && docs_dexp[ 9]>=QDate::currentDate())) ) ||
                        (docs_arry[21] && docs_fact[21] && (!docs_fexp[21] || (docs_fexp[21] && docs_dexp[21]>=QDate::currentDate())) ) );
            if (!docs_ok)
                QMessageBox::warning(this,
                                     "Иностранец, сотрудник ЕАЭС - не хватает УДЛ!",
                                     "Внимание!\n"
                                     "У иностранца, сотрудника ЕАЭС нет данных действующего УДЛ:\n"
                                     "  1) паспорт иностранного гражданина,\n"
                                     "  2) документ иностранного гражданина.");
            allow_ok = ( (docs_arry[26] && docs_fact[26] && (!docs_fexp[26] || (docs_fexp[26] && docs_dexp[26]>=QDate::currentDate())) ) );
            if (!allow_ok)
                QMessageBox::warning(this,
                                     "Иностранец, сотрудник ЕАЭС - не хватает удостоверения!",
                                     "Внимание!\n"
                                     "Иностранца, сотрудника ЕАЭС нет данных удостоверения сотрудника ЕАЭС:\n"
                                     "  (26) удостоверение сотрудника Евразийской экономической комиссии.\n");
        }
        break;
        }

        ui->lab_test_for->setText("");
        ui->lab_test_for->setVisible(false);
        QApplication::processEvents();

    } else {
        ui->lab_test_for->setText("Нет документов !");
        ui->lab_test_for->setVisible(true);
        QApplication::processEvents();
    }

    docs_ok = docs_ok && allow_ok;

    ui->pan_docs_photo->setEnabled(docs_ok);
    ui->pan_assig->setEnabled(docs_ok);
    ui->bn_pers_polices->setEnabled(docs_ok);

    this->setCursor(Qt::ArrowCursor);
    ui->group_persons_tab->setEnabled(true);
    ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
    ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

    return docs_ok;
}

// проверка сохраняемой записи человека на возможные дубли
bool persons_wnd::test_for_doubles(bool can_stop) {
    ui->group_persons_tab->setEnabled(false);
    ui->group_person_data->setEnabled(false);
    ui->group_person_docs->setEnabled(false);
    ui->lab_test_for->setText("Проверка на дубли");
    ui->lab_test_for->setVisible(true);
    QApplication::processEvents();

    QString msg = "";
    int msg_cnt = 0;
    int status = 0;
    QSqlQuery *query_test = NULL;
    QString sql_test = "";

    QApplication::processEvents();

    // проверим на дубли по ФИО и д/р
    query_test = new QSqlQuery(db);
    sql_test = "select id, fam, im, ot, sex, date_birth, snils, status "
               "  from public.persons e "
               " where replace(fam,'Ё','Е')='" + data_pers.fam.trimmed().toUpper().replace("Ё", "Е") + "' "
               "   and replace(im,'Ё','Е')='" + data_pers.im.trimmed().toUpper().replace("Ё", "Е") + "' "
               "   and replace(ot,'Ё','Е')='" + data_pers.ot.trimmed().toUpper().replace("Ё", "Е") + "' "
               "   and date_birth='" + data_pers.date_birth.toString("yyyy-MM-dd") + "' "
               "   and id<>" + QString::number(data_pers.id) + " "
               " limit 10 ; ";
    if (!mySQL.exec(this, sql_test, QString("Проверка на дубли по ФИО и д/р"), *query_test, true, db, data_app)) {
        QMessageBox::warning(this, "Ошибка при проверке на дубли по ФИО и д/р",
                             "При проверке на дубли по ФИО и д/р произошла непредвиденная ошибка!\n\n"
                             "Операция отменена.\n");
        this->setCursor(Qt::ArrowCursor);
        ui->group_persons_tab->setEnabled(true);
        ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
        ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

        ui->lab_test_for->setText("");
        ui->lab_test_for->setVisible(false);
        QApplication::processEvents();

        return false;
    };

    QString archive_doubles_ids = "-1";

    if (query_test->size()>0) {
        msg += "Обнаружен застрахованный (-е) с совпадением ФИО и даты рождения:\n\n";
        while (query_test->next()) {
            msg_cnt++;

            int id = query_test->value(0).toInt();
            status = query_test->value(7).toInt();
            if (status<=-500 && status>=-509) {
                msg += "!! АРХИВ !! :  ";
                archive_doubles_ids += "," + QString::number(id);
            }
            QString snils = query_test->value(6).toString().trimmed();
            if ( snils.isEmpty() )
                 snils = "- нет -";
            else snils = snils.left(3) + "-" + snils.mid(3,3) + + "-" + snils.mid(6,3) + " " + snils.right(2);

            msg += " ID:" + QString::number(query_test->value(0).toInt()) + ",   " +
                    query_test->value(1).toString() + "   " + query_test->value(2).toString() + "   " + query_test->value(3).toString() + ",  " +
                    (query_test->value(4).toInt()==1 ? "М" : "Ж") + ",   д/р " + query_test->value(5).toDate().toString("dd.MM.yyyy") +
                    ",   СНИЛС  " + snils;
            msg += "\n";
        }
        msg += "\n";
    }
    delete query_test;


    // проверим на дубли по ИО и д/р
    query_test = new QSqlQuery(db);
    sql_test = "select id, fam, im, ot, sex, date_birth, snils, status "
               "  from public.persons e "
               " where fam<>'" + data_pers.fam.trimmed().toUpper().replace("Ё", "Е") + "' "
               "   and replace(im,'Ё','Е')='" + data_pers.im.trimmed().toUpper().replace("Ё", "Е") + "' "
               "   and replace(ot,'Ё','Е')='" + data_pers.ot.trimmed().toUpper().replace("Ё", "Е") + "' "
               "   and date_birth='" + data_pers.date_birth.toString("yyyy-MM-dd") + "' "
               "   and id<>" + QString::number(data_pers.id) + " "
               " limit 10 ; ";
    if (!mySQL.exec(this, sql_test, QString("Проверка на дубли по ИО и д/р"), *query_test, true, db, data_app)) {
        QMessageBox::warning(this, "Ошибка при проверке на дубли по ИО и д/р",
                             "При проверке на дубли по ФИО и д/р произошла непредвиденная ошибка!\n\n"
                             "Операция отменена.\n");
        this->setCursor(Qt::ArrowCursor);
        ui->group_persons_tab->setEnabled(true);
        ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
        ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

        ui->lab_test_for->setText("");
        ui->lab_test_for->setVisible(false);
        QApplication::processEvents();

        return false;
    };
    if (query_test->size()>0) {
        msg += "Обнаружен застрахованный (-е) с совпадением имени, отчества и д/р \n"
               "(возможно - смена фамилии):\n\n";
        while (query_test->next()) {
            msg_cnt++;

            int id = query_test->value(0).toInt();
            status = query_test->value(7).toInt();
            if (status<=-500 && status>=-509) {
                msg += "!! АРХИВ !! :  ";
                archive_doubles_ids += "," + QString::number(id);
            }
            QString snils = query_test->value(6).toString().trimmed();
            if ( snils.isEmpty() )
                 snils = "- нет -";
            else snils = snils.left(3) + "-" + snils.mid(3,3) + + "-" + snils.mid(6,3) + " " + snils.right(2);

            msg += " ID:" + QString::number(query_test->value(0).toInt()) + ",   " +
                    query_test->value(1).toString() + "   " + query_test->value(2).toString() + "   " + query_test->value(3).toString() + ",  " +
                    (query_test->value(4).toInt()==1 ? "М" : "Ж") + ",   д/р " + query_test->value(5).toDate().toString("dd.MM.yyyy") +
                    ",   СНИЛС  " + snils;
            msg += "\n";
        }
        msg += "\n";
    }
    delete query_test;


    // проверим на дубли по ФИ и д/р
    query_test = new QSqlQuery(db);
    sql_test = "select id, fam, im, ot, sex, date_birth, snils, status "
               "  from public.persons e "
               " where replace(fam,'Ё','Е')='" + data_pers.fam.trimmed().toUpper().replace("Ё", "Е") + "' "
               "   and replace(im,'Ё','Е')='" + data_pers.im.trimmed().toUpper().replace("Ё", "Е") + "' "
               "   and ot<>'" + data_pers.ot.trimmed().toUpper().replace("Ё", "Е") + "' "
               "   and (ot='' or '" + data_pers.ot.trimmed().toUpper().replace("Ё", "Е") + "'='') "
               "   and date_birth='" + data_pers.date_birth.toString("yyyy-MM-dd") + "' "
               "   and id<>" + QString::number(data_pers.id) + " "
               " limit 10 ; ";
    if (!mySQL.exec(this, sql_test, QString("Проверка на дубли по ФИ и д/р"), *query_test, true, db, data_app)) {
        QMessageBox::warning(this, "Ошибка при проверке на дубли по ФИ и д/р",
                             "При проверке на дубли по ФИО и д/р произошла непредвиденная ошибка!\n\n"
                             "Операция отменена.\n");
        this->setCursor(Qt::ArrowCursor);
        ui->group_persons_tab->setEnabled(true);
        ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
        ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

        ui->lab_test_for->setText("");
        ui->lab_test_for->setVisible(false);
        QApplication::processEvents();

        return false;
    };
    if (query_test->size()>0) {
        msg += "Обнаружен застрахованный (-е) с совпадением фамилии, имени и д/р \n"
               "(возможно - тот же человек введён без отчества):\n\n";
        while (query_test->next()) {
            msg_cnt++;

            int id = query_test->value(0).toInt();
            status = query_test->value(7).toInt();
            if (status<=-500 && status>=-509) {
                msg += "!! АРХИВ !! :  ";
                archive_doubles_ids += "," + QString::number(id);
            }
            QString snils = query_test->value(6).toString().trimmed();
            if ( snils.isEmpty() )
                 snils = "- нет -";
            else snils = snils.left(3) + "-" + snils.mid(3,3) + + "-" + snils.mid(6,3) + " " + snils.right(2);

            msg += " ID:" + QString::number(query_test->value(0).toInt()) + ",   " +
                    query_test->value(1).toString() + "   " + query_test->value(2).toString() + "   " + query_test->value(3).toString() + ",  " +
                    (query_test->value(4).toInt()==1 ? "М" : "Ж") + ",   д/р " + query_test->value(5).toDate().toString("dd.MM.yyyy") +
                    ",   СНИЛС  " + snils;
            msg += "\n";
        }
        msg += "\n";
    }
    delete query_test;


    // проверим на дубли по СНИЛС
    if (data_pers.snils.trimmed().replace(" ", "").replace("-", "").length()>0) {
        query_test = new QSqlQuery(db);
        sql_test = "select id, fam, im, ot, sex, date_birth, snils, status "
                   "  from public.persons e "
                   " where snils='" + data_pers.snils.trimmed().replace(" ", "").replace("-", "") + "' "
                   "   and snils is not NULL "
                   "   and id<>" + QString::number(data_pers.id) + " "
                   " limit 10 ; ";
        if (!mySQL.exec(this, sql_test, QString("Проверка на дубли по ФИО и д/р"), *query_test, true, db, data_app)) {
            QMessageBox::warning(this, "Ошибка при проверке на дубли по СНИЛС и д/р",
                                 "При проверке на дубл по СНИЛС произошла непредвиденная ошибка!\n\n"
                                 "Операция отменена.\n");
            this->setCursor(Qt::ArrowCursor);
            ui->group_persons_tab->setEnabled(true);
            ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
            ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

            ui->lab_test_for->setText("");
            ui->lab_test_for->setVisible(false);
            QApplication::processEvents();

            return false;
        };
        if (query_test->size()>0) {
            msg += "Обнаружен застрахованный (-е) с совпадением по СНИЛС \n"
                   "(возможно - смена имени и фамилии или ошибка в СНИЛС):\n\n";
            while (query_test->next()) {
                msg_cnt++;

                int id = query_test->value(0).toInt();
                status = query_test->value(7).toInt();
                if (status<=-500 && status>=-509) {
                    msg += "!! АРХИВ !! :  ";
                    archive_doubles_ids += "," + QString::number(id);
                }
                QString snils = query_test->value(6).toString().trimmed();
                if ( snils.isEmpty() )
                     snils = "- нет -";
                else snils = snils.left(3) + "-" + snils.mid(3,3) + + "-" + snils.mid(6,3) + " " + snils.right(2);

                msg += " ID:" + QString::number(query_test->value(0).toInt()) + ",   " +
                        query_test->value(1).toString() + "   " + query_test->value(2).toString() + "   " + query_test->value(3).toString() + ",  " +
                        (query_test->value(4).toInt()==1 ? "М" : "Ж") + ",   д/р " + query_test->value(5).toDate().toString("dd.MM.yyyy") +
                        ",   СНИЛС  " + snils;
                msg += "\n";
            }
            msg += "\n";
        }
        delete query_test;
    }

    if (msg_cnt>0) {
        // сообщим о возможных дублях
        delete info_pers_doubles_w;
        int res = 0;
        bool can_arch = (archive_doubles_ids!="-1");
        info_pers_doubles_w = new info_pers_doubles_wnd(msg, res, can_stop, can_arch, this);

        this->setCursor(Qt::ArrowCursor);
        ui->group_persons_tab->setEnabled(true);
        ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
        ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

        ui->lab_test_for->setText("");
        ui->lab_test_for->setVisible(false);
        QApplication::processEvents();

        // ----------------------------------------- //
        bool res_dbl_wnd = info_pers_doubles_w->exec();
        // ----------------------------------------- //

        if (res==-1) {
            // извлечём из архива найденные архивные записи:  person.status: -500 -> 500
            QString sql_arch;
            QSqlQuery *query_arch = new QSqlQuery(db);
            sql_arch = "update persons e "
                       "   set status = (-1)*status "
                       " where id in(" + archive_doubles_ids + ") "
                       "   and status<=-500 "
                       "   and status>=-555 ; ";
            if (!mySQL.exec(this, sql_arch, QString("Временное извлечение записей из архива"), *query_arch, true, db, data_app)) {
                QMessageBox::warning(this, "Ошибка при попытке временно извлечь записи из архива",
                                     "При попытке временно извлечь записи из архива произошла непредвиденная ошибка!\n\n"
                                     "Операция отменена.\n");
                this->setCursor(Qt::ArrowCursor);
                QApplication::processEvents();
                return false;
            }
            delete query_arch;
        }

        // выйдем из функции по коду закрытия окна
        return res_dbl_wnd;
    }
    this->setCursor(Qt::ArrowCursor);
    ui->group_persons_tab->setEnabled(true);
    ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
    ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

    ui->lab_test_for->setText("");
    ui->lab_test_for->setVisible(false);
    QApplication::processEvents();

    return true;
}


// проверка контрольной суммы СНИЛС
bool persons_wnd::test_for_SNILS(QString SNILS, int oksm_c, int category, QDate date_birth) {
    ui->group_persons_tab->setEnabled(false);
    ui->group_person_data->setEnabled(false);
    ui->group_person_docs->setEnabled(false);
    ui->lab_test_for->setText("Проверка СНИЛС");
    ui->lab_test_for->setVisible(true);
    QApplication::processEvents();

    SNILS = SNILS.replace("-","").replace(" ","");

    this->setCursor(Qt::WaitCursor);
    QApplication::processEvents();
    if (!SNILS.isEmpty()) {
        QString SNILS1;
        int     i, j, C1, ILS_Num, LastDigit, LastDigitCount;
        int     ILS14_1[10] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
        bool    Flag;

        try {
            Flag = true;
            i = 0;
            C1 = 0;
            ILS_Num = 0;
            LastDigit = -1;
            LastDigitCount = 0;

            while(i < 9) {
                if(ILS14_1[i] != 0) {

                    C1 = C1 + (int)(SNILS.mid(i,1).toInt()) * ILS14_1[i];
                    ILS_Num = ILS_Num * 10 + (int)(SNILS.mid(i,1).toInt());

                    if(LastDigit == (int)(SNILS.mid(i,1).toInt())) {
                        LastDigitCount++;
                        if (LastDigitCount>=3)
                            Flag = false;
                    } else {
                        LastDigit = (int)(SNILS.mid(i,1).toInt());
                        LastDigitCount = 1;
                    }
                }
                i++;
            }

            if(ILS_Num <= 1001998)
                Flag = false;

            if(Flag == true) {
                C1 = C1 - (int)(floor(C1/101)*101);
            }

            SNILS1 = QString("00" + QString::number(C1)).right(2);
            if (SNILS.right(2)!=SNILS1) {
                QString pss = "";
                do {
                    pss = QInputDialog::getText(this,"Неверная контрольная сумма СНИЛС",
                                                "Неверная контрольная сумма СНИЛС!\n"
                                                "При проверке СНИЛС получено неверное значение контрольной суммы.\n"
                                                "Исправьте СНИЛС застрахованного.\n\n"
                                                "Для принудительного сохранения записи надо ввести пароль администраторы базы полисов.\n"
                                                "Пустая строка - отказ от принудительного сохранения записи.",
                                                QLineEdit::Password);
                } while (!pss.isEmpty() /*&& pss!="650325"*/);

                if (pss.isEmpty()) {
                    this->setCursor(Qt::ArrowCursor);
                    ui->group_persons_tab->setEnabled(true);
                    ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
                    ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

                    ui->lab_test_for->setText("");
                    ui->lab_test_for->setVisible(false);
                    QApplication::processEvents();

                    return false;
                }
            }
        }
        catch(...) {
            QMessageBox::warning(this, "Ошибка неожиданная при проверке СНИЛС !!!",
                                 "При проверке контрольной суммы СНИЛС процессор вернул недопустимую ошибку.\n\n"
                                 "Исправьте СНИЛС застрахованного.");
            this->setCursor(Qt::ArrowCursor);
            ui->group_persons_tab->setEnabled(true);
            ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
            ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

            ui->lab_test_for->setText("");
            ui->lab_test_for->setVisible(false);
            QApplication::processEvents();

            return false;
        }
    }
    this->setCursor(Qt::ArrowCursor);
    ui->group_persons_tab->setEnabled(true);
    ui->group_person_data->setEnabled(!ui->ch_retro->isChecked());
    ui->group_person_docs->setEnabled(!ui->ch_retro->isChecked());

    ui->lab_test_for->setText("");
    ui->lab_test_for->setVisible(false);
    QApplication::processEvents();


    /*
    // проверим заполнение СНИЛС для граждан России и стран ЕАЭС
    QString snils_t = SNILS;
    snils_t = snils_t.replace("-", "").replace(" ", "").trimmed();
    if ( ( oksm_c==643 ||
           category==1 ||
           category==6 )
         &&
         ( date_birth.daysTo(QDate::currentDate())>(365*14+4) )  // больше 14 лет
         &&
         ( snils_t.isEmpty() ||
           snils_t=="00000000000") ) {
        QString pss;

        do {
            pss = QInputDialog::getText(this,"Нужен СНИЛС !!!",
                                        QString("Для гражданина Российской Федерации старше 14 лет необходимо указать СНИЛС.\n"
                                                " (норма вступила в силу с 01.06.2016г, изменена 01.07.2016г)\n\n"
                                                "Для того чтобы сохранить данные застрахованного без СНИЛС\n - введите пароль - ") +
                                        QString(data_app.is_head||data_app.is_tech ? "ДОВЕРЯЙ" : "***") +
                                        "\n\nПустая строка - отмена операции.").toUpper();
            if (pss.isEmpty())
                return false;
        } while (pss!="ДОВЕРЯЙ" && pss!="LJDTHZQ");
    }
    if ( ( category==11 ||
           category==12 ||
           category==13 ||
           category==14 )
         &&
         ( snils_t.isEmpty() ||
           snils_t=="00000000000") ) {
        QString pss;

        do {
            pss = QInputDialog::getText(this,"Нужен СНИЛС !!!",
                                        QString("Для гражданина стран-членов ЕАЭС необходимо указать СНИЛС.\n"
                                                " (норма вступила в силу с 01.01.2017г)\n\n"
                                                "Для того чтобы сохранить данные застрахованного без СНИЛС\n - введите пароль - ") +
                                        QString(data_app.is_head||data_app.is_tech ? "ЕАЭС" : "***") +
                                        "\n\nПустая строка - отмена операции.").toUpper();
            if (pss.isEmpty())
                return false;
        } while (pss!="ЕАЭС" && pss!="TF\"C");
    }
    */

    return true;
}




void persons_wnd::on_spin_pers_pan_category_valueChanged(int arg1) {
    ui->combo_pers_pan_category->setCurrentIndex(ui->combo_pers_pan_category->findData(arg1));
}
void persons_wnd::on_combo_pers_pan_category_activated(int index) {
    //ui->bn_pers_save->setEnabled(test_for_UDL(false, false));
    ui->spin_pers_pan_category->setValue(ui->combo_pers_pan_category->currentData().toInt());
    on_ch_stateless_clicked(ui->combo_pers_pan_category->currentData().toInt()==4 || ui->combo_pers_pan_category->currentData().toInt()==9);

    b_need_save();
}
void persons_wnd::on_line_docs_pan_ser_textChanged(const QString &arg1) {
    data_doc.doc_ser = arg1;
}
void persons_wnd::on_line_docs_pan_num_textChanged(const QString &arg1) {
    data_doc.doc_num = arg1;
}
void persons_wnd::on_date_docs_pan_start_dateChanged(const QDate &date) {
    data_doc.doc_date = date;
}
void persons_wnd::on_date_docs_pan_exp_dateChanged(const QDate &date) {
    data_doc.doc_exp = date;
}
void persons_wnd::on_ch_docs_pan_actual_clicked(bool checked) {
    if (ui->ch_docs_pan_actual->isChecked()) {
        data_doc.status = 1;
        ui->ch_docs_pan_olddoc->setChecked(false);
        ui->ch_docs_pan_olddoc->setEnabled(false);
    } else if (ui->ch_docs_pan_olddoc->isChecked()) {
        data_doc.status = 2;
        ui->ch_docs_pan_olddoc->setEnabled(true);
    } else {
        data_doc.status = 0;
        ui->ch_docs_pan_olddoc->setEnabled(true);
    }
}
void persons_wnd::on_ch_docs_pan_olddoc_clicked(bool checked) {
    if (ui->ch_docs_pan_actual->isChecked()) {
        data_doc.status = 1;
        ui->ch_docs_pan_olddoc->setChecked(false);
        ui->ch_docs_pan_olddoc->setEnabled(false);
    } else if (ui->ch_docs_pan_olddoc->isChecked()) {
        data_doc.status = 2;
        ui->ch_docs_pan_olddoc->setEnabled(true);
    } else {
        data_doc.status = 0;
        ui->ch_docs_pan_olddoc->setEnabled(true);
    }
}

void persons_wnd::on_tab_pers_docs_doubleClicked(const QModelIndex &index) {
    on_bn_docs_edit_clicked();
}

void persons_wnd::on_combo_pers_pan_category_activated(const QString &arg1) {
    /*if (!save_pers_data())
        return;*/
}

void persons_wnd::on_ch_docs_tab_only_acts_stateChanged(int arg1) {
    refresh_pers_docs();
}

void persons_wnd::on_act_export_tfoms_triggered() {    
    if (data_app.f_gen_regVS)
        on_act_gen_reester_vs_triggered();
    if (data_app.f_gen_regPol)
        on_act_gen_reester_oms_triggered();

    // откроем окно "Выгрузка в ТФОМС"
    delete send_to_fond_w;
    send_to_fond_w = new send_to_fond_wnd(db, data_app, settings, this);
    send_to_fond_w->exec();
}

#include "qt_windows.h"
#include "qwindowdefs_win.h"
#include <shellapi.h>

bool persons_wnd::print_registry_vs() {
    QString sql_reg;

    sql_reg = "select a.status, p.pol_ser, p.pol_num, p.vs_num, "
              "       p.date_begin, p.date_end, p.date_stop, e.fam, e.im, e.ot, e.sex, e.category, e.date_birth, e.phone_cell, "
              "       rep.rep_fio_full, rep.rep_contact, "
              "       e.bomj, ar.post_index, ar.ocato, ar.ocato_full, ar.dstr_name, ar.city_name ||', '||ar.nasp_name, ar.strt_name, ar.house, ar.corp, ar.quart, "
              "       al.post_index as post_index_liv, al.ocato as ocato_liv, al.ocato_full as ocato_full_liv, al.dstr_name as dstr_name_liv, al.city_name ||', '||al.nasp_name as nasp_name_liv, al.strt_name as strt_name_liv, al.house as house_liv, al.corp as corp_liv, al.quart as quart_liv, "
              "       ocr.subj_name as subj_reg, ocl.subj_name as subj_liv "
              "  from events a "
              "       left join polises p on(p.id=a.id_polis) "
              "       left join spr_f008 f8 on(p.pol_v=f8.code and f8.date_end is NULL) "
              "       left join polises p_old on(p.id_old_polis=p_old.id) "
              "       left join persons e on(p.id_person=e.id) "

              "       left join (select id, fam || ' ' || im || ' ' || coalesce(ot,' ') as rep_fio_full, phone_cell || ', ' || email as rep_contact from persons r /*where r.id=e.rep_id*/) rep on(e.rep_id=rep.id) "

              "       left join persons_docs d on(d.id_person=e.id and d.status=1 and d.doc_type in(1,3,9,12,13,14,21,22,24,25,27,28) and (d.doc_exp is NULL or d.doc_exp>CURRENT_DATE)) "
              "       left join spr_f011 f11 on(f11.code=d.doc_type) "
              "       left join persons_docs drp on(drp.id_person=e.id and d.status=1 and d.doc_type in(11,23) and (d.doc_exp is NULL or d.doc_exp>CURRENT_DATE)) "
              "       left join spr_f011 p11 on(p11.code=drp.doc_type) "
              "       left join persons_photo foto on(foto.id_person=e.id and foto.type=2) "
              "       left join persons_photo sign on(sign.id_person=e.id and sign.type=3) "
              "       left join spr_oksm ob on(ob.code=e.oksm_birth) "
              "       left join spr_oksm oc on(oc.code=e.oksm_c) "
              "       left join addresses ar on(e.id_addr_reg=ar.id) "
              "       left join addresses al on(e.id_addr_reg=al.id) "
              "       left join vizits v on(v.id=a.id_vizit) "
              "       left join spr_ocato ocr on(ocr.code_ocato=ar.ocato) "
              "       left join spr_ocato ocl on(ocl.code_ocato=al.ocato) "
              " where a.status in(0,1) "
              "   and a.event_code in('П010', 'П034', 'П035', 'П036', 'П061', 'П062', 'П063') "
              "   and p._id_last_point=" + QString::number(data_app.id_point) + " "
              " order by  e.fam, e.im, e.ot, e.date_birth ; ";

    QSqlQuery *query_reg = new QSqlQuery(db);
    if (!mySQL.exec(this, sql_reg, "Выбор всех неотправленных полисов для отправки в ТФОМС", *query_reg, true, db, data_app)) {
        delete query_reg;
        QMessageBox::warning(this, "Операция отменена", "Операция выгрузки данных для ТФОМС отменена");
        db.rollback();
        return false;
    }
    /*int q_n = query_reg->size();*/

    // распаковка шаблона реестра
    QString fname_template = data_app.path_reports + "vs_registry.ods";
    QString temp_folder = data_app.path_reports + "vs_registry";
    if (!QFile::exists(fname_template)) {
        QMessageBox::warning(this,
                             "Шаблон не найден",
                             "Не найден шаблон печатной формы реестра выданных ВС: \n" + fname_template +
                             "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    QDir tmp_dir(temp_folder);
    if (tmp_dir.exists(temp_folder) && !tmp_dir.removeRecursively()) {
        QMessageBox::warning(this,
                             "Ошибка при очистке папки",
                             "Не удалось очистить папку временных файлов: \n" + temp_folder +
                             "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    tmp_dir.mkpath(temp_folder);
    QProcess myProcess;
    QString com = "\"" + data_app.path_arch + "7z.exe\" e \"" + fname_template + "\" -o\"" + temp_folder + "\" content.xml";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка распаковки шаблона",
                             "Не удалось распаковать файл контента шаблона\n" + fname_template + " -> content.xml"
                             "\nпечатной формы во временную папку\n" + temp_folder +
                             "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    com = "\"" + data_app.path_arch + "7z.exe\" e \"" + fname_template + "\" -o\"" + temp_folder + "\" styles.xml";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка распаковки шаблона",
                             "Не удалось распаковать файл стилей шаблона \n" + fname_template + " -> styles.xml"
                             "\nпечатной формы во временную папку\n" + temp_folder +
                             "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }


    // ===========================
    // правка контента шаблона
    // ===========================
    // открытие контента шаблона
    QFile f_content(temp_folder + "/content.xml");
    f_content.open(QIODevice::ReadOnly);
    QString s_content = f_content.readAll();
    f_content.close();
    if (s_content.isEmpty()) {
        QMessageBox::warning(this,
                             "Файл контента шаблона пустой",
                             "Файл контента шаблона пустой. Возможно шаблон был испорчен.\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    // выбор шаблона
    int pos0 = s_content.indexOf("<table:table-row table:style-name=\"ro4\">", 0);
    int pos1 = s_content.indexOf("</table:table-row>", pos0) + 18;
    QString s_row = s_content.mid(pos0, pos1-pos0);

    // правка полей контента шаблона
    QString s_content_new = s_content.left(pos0);
    s_content_new = s_content_new.
            replace("#POINT_NAME#", data_app.point_name).
            replace("#CUR_DATE#", QDate::currentDate().toString("dd.MM.yyyy"));
    int n = 0;
    while (query_reg->next()) {
        n++;
        QString s_row_new = s_row;
        s_row_new = s_row_new.
                replace("#N#", QString::number(n)).
                replace("#D1#", query_reg->value(4).toDate().toString("dd.MM.yyyy")).
                replace("#FIO#", query_reg->value(7).toString() + " " + query_reg->value(8).toString() + " " + query_reg->value(9).toString()).
                replace("#DR#", query_reg->value(12).toDate().toString("dd.MM.yyyy")).
                replace("#FIO_REP#", query_reg->value(14).toString()).
                replace("#PHONE#", ((query_reg->value(15).isNull()||query_reg->value(14).toString().isEmpty()) ? query_reg->value(13).toString() : query_reg->value(15).toString())).
                replace("#N_VS#", query_reg->value(3).toString()).
                replace("#D2#", query_reg->value(5).toDate().toString("dd.MM.yyyy"));
        QString address = "";
        if (query_reg->value(16).toInt()==0) {
            // соберём адрес регистрации
            if (!query_reg->value(35).isNull() && !query_reg->value(35).toString().isEmpty())  address += query_reg->value(35).toString() + ", ";
            //if (!query_reg->value(17).isNull() && !query_reg->value(17).toString().isEmpty())  address += query_reg->value(17).toString() + ", ";
            if (!query_reg->value(20).isNull() && !query_reg->value(20).toString().isEmpty())  address += query_reg->value(20).toString() + ", ";
            if (!query_reg->value(21).isNull() && !query_reg->value(21).toString().isEmpty())  address += query_reg->value(21).toString() + ", ";
            if (!query_reg->value(22).isNull() && !query_reg->value(22).toString().isEmpty())  address += query_reg->value(22).toString() + ", д. ";
            if (!query_reg->value(23).isNull() && !query_reg->value(23).toString().isEmpty())  address += query_reg->value(23).toString() + " ";
            if (!query_reg->value(24).isNull() && query_reg->value(24).toInt()>0)  address += QString::number(query_reg->value(24).toInt()) + ", кв.";
            if (!query_reg->value(25).isNull() && !query_reg->value(25).toString().isEmpty())  address += query_reg->value(25).toString();
        } else {
            // соберём адрес проживания
            if (!query_reg->value(36).isNull() && !query_reg->value(36).toString().isEmpty())  address += query_reg->value(36).toString() + ", ";
            //if (!query_reg->value(26).isNull() && !query_reg->value(26).toString().isEmpty())  address += query_reg->value(26).toString() + ", ";
            if (!query_reg->value(29).isNull() && !query_reg->value(29).toString().isEmpty())  address += query_reg->value(29).toString() + ", ";
            if (!query_reg->value(30).isNull() && !query_reg->value(30).toString().isEmpty())  address += query_reg->value(30).toString() + ", ";
            if (!query_reg->value(31).isNull() && !query_reg->value(31).toString().isEmpty())  address += query_reg->value(31).toString() + ", д. ";
            if (!query_reg->value(32).isNull() && !query_reg->value(32).toString().isEmpty())  address += query_reg->value(32).toString() + " ";
            if (!query_reg->value(33).isNull() && query_reg->value(33).toInt()>0)  address += QString::number(query_reg->value(33).toInt()) + ", кв.";
            if (!query_reg->value(34).isNull() && !query_reg->value(34).toString().isEmpty())  address += query_reg->value(34).toString();
        }
        s_row_new = s_row_new.replace("#A#", address);
        s_content_new += s_row_new;
    }
    s_content_new += s_content.right(s_content.size()-pos1);
    delete query_reg;

    // сохранение контента шаблона
    QFile f_content_save(temp_folder + "/content.xml");
    f_content_save.open(QIODevice::WriteOnly);
    f_content_save.write(s_content_new.toUtf8());
    f_content_save.close();


    // ===========================
    // архивация шаблона
    // ===========================
    //QString fname_res = data_app.path_temp + "vs_registry.ods";
    QString fname_res = data_app.path_out + "_REGISTRY_/" + QDate::currentDate().toString("yyyy-MM-dd") + " - " + data_app.filial_name + " - vs_registry - " + data_app.point_regnum + ".ods";
    QFile::remove(fname_res);
    while (QFile::exists(fname_res)) {
        if (QMessageBox::warning(this,
                                 "Ошибка сохранения журнала ВС",
                                 "Не удалось сохранить журнал ВС: \n" + fname_template +
                                 "\n\nво временную папку\n" + fname_res +
                                 "\n\nПроверьте, не открыт ли целевой файл в сторонней программе и повторите операцию.",
                                 QMessageBox::Retry|QMessageBox::Abort,
                                 QMessageBox::Retry)==QMessageBox::Abort) {
            this->setCursor(Qt::ArrowCursor);
            return false;
        }
        QFile::remove(fname_res);
    }
    if (!QFile::copy(fname_template, fname_res) || !QFile::exists(fname_res)) {
        QMessageBox::warning(this, "Ошибка копирования журнала", "Не удалось скопировать журнал ВС: \n" + fname_template + "\n\nво временную папку\n" + fname_res + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    com = "\"" + data_app.path_arch + "7z.exe\" a \"" + fname_res + "\" \"" + temp_folder + "/content.xml\"";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка обновления контента",
                             "При добавлении нового контента в журнал ВС произошла непредвиденная ошибка\n\nОпреация прервана.");
    }

    // ===========================
    // собственно открытие шаблона
    // ===========================
    // открытие полученного ODT
    /*long result =*/ (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_res.utf16()), 0, 0, SW_NORMAL);

    return true;
}


bool persons_wnd::print_registry_vs(QDate date1, QDate date2) {
    QString sql_reg;

    sql_reg = "select a.status, p.pol_ser, p.pol_num, p.vs_num, "
              "       p.date_begin, p.date_end, p.date_stop, e.fam, e.im, e.ot, e.sex, e.category, e.date_birth, e.phone_cell, "
              "       rep.rep_fio_full, rep.rep_contact, "
              "       e.bomj, ar.post_index, ar.ocato, ar.ocato_full, ar.dstr_name, ar.city_name ||', '||ar.nasp_name, ar.strt_name, ar.house, ar.corp, ar.quart, "
              "       al.post_index as post_index_liv, al.ocato as ocato_liv, al.ocato_full as ocato_full_liv, al.dstr_name as dstr_name_liv, al.city_name ||', '||al.nasp_name as nasp_name_liv, al.strt_name as strt_name_liv, al.house as house_liv, al.corp as corp_liv, al.quart as quart_liv, "
              "       ocr.subj_name as subj_reg, ocl.subj_name as subj_liv "
              "  from events a "
              "       left join polises p on(p.id=a.id_polis) "
              "       left join spr_f008 f8 on(p.pol_v=f8.code and f8.date_end is NULL) "
              "       left join polises p_old on(p.id_old_polis=p_old.id) "
              "       left join persons e on(p.id_person=e.id) "

              "       left join (select id, fam || ' ' || im || ' ' || coalesce(ot,' ') as rep_fio_full, phone_cell || ', ' || email as rep_contact from persons r) rep on(e.rep_id=rep.id) "

              "       left join persons_docs d on(d.id_person=e.id and d.status=1 and d.doc_type in(1,3,9,12,13,14,21,22,24,25,27,28) and (d.doc_exp is NULL or d.doc_exp>'" + date1.toString("yyyy-MM-dd") + "')) "
              "       left join spr_f011 f11 on(f11.code=d.doc_type) "
              "       left join persons_docs drp on(drp.id_person=e.id and d.status=1 and d.doc_type in(11,23) and (d.doc_exp is NULL or d.doc_exp>'" + date1.toString("yyyy-MM-dd") + "')) "
              "       left join spr_f011 p11 on(p11.code=drp.doc_type) "
              "       left join persons_photo foto on(foto.id_person=e.id and foto.type=2) "
              "       left join persons_photo sign on(sign.id_person=e.id and sign.type=3) "
              "       left join spr_oksm ob on(ob.code=e.oksm_birth) "
              "       left join spr_oksm oc on(oc.code=e.oksm_c) "
              "       left join addresses ar on(e.id_addr_reg=ar.id) "
              "       left join addresses al on(e.id_addr_reg=al.id) "
              "       left join vizits v on(v.id=a.id_vizit) "
              "       left join spr_ocato ocr on(ocr.code_ocato=ar.ocato) "
              "       left join spr_ocato ocl on(ocl.code_ocato=al.ocato) "
              " where a.event_code in('П010', 'П034', 'П035', 'П036', 'П061', 'П062', 'П063') "
              "   and p.date_begin>='" + date1.toString("yyyy-MM-dd") + "' "
              "   and p.date_begin<='" + date2.toString("yyyy-MM-dd") + "' "
              " order by  e.fam, e.im, e.ot, e.date_birth ; ";

    QSqlQuery *query_reg = new QSqlQuery(db);
    if (!mySQL.exec(this, sql_reg, "Выбор всех неотправленных полисов для отправки в ТФОМС", *query_reg, true, db, data_app)) {
        delete query_reg;
        QMessageBox::warning(this, "Операция отменена", "Операция выгрузки данных для ТФОМС отменена");
        db.rollback();
        return false;
    }
    /*int q_n = query_reg->size();*/

    // распаковка шаблона реестра
    QString fname_template = data_app.path_reports + "vs_registry.ods";
    QString temp_folder = data_app.path_reports + "vs_registry";
    if (!QFile::exists(fname_template)) {
        QMessageBox::warning(this,
                             "Шаблон не найден",
                             "Не найден шаблон печатной формы реестра выданных ВС: \n" + fname_template +
                             "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    QDir tmp_dir(temp_folder);
    if (tmp_dir.exists(temp_folder) && !tmp_dir.removeRecursively()) {
        QMessageBox::warning(this,
                             "Ошибка при очистке папки",
                             "Не удалось очистить папку временных файлов: \n" + temp_folder +
                             "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    tmp_dir.mkpath(temp_folder);
    QProcess myProcess;
    QString com = "\"" + data_app.path_arch + "7z.exe\" e \"" + fname_template + "\" -o\"" + temp_folder + "\" content.xml";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка распаковки шаблона",
                             "Не удалось распаковать файл контента шаблона\n" + fname_template + " -> content.xml"
                             "\nпечатной формы во временную папку\n" + temp_folder +
                             "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    com = "\"" + data_app.path_arch + "7z.exe\" e \"" + fname_template + "\" -o\"" + temp_folder + "\" styles.xml";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка распаковки шаблона",
                             "Не удалось распаковать файл стилей шаблона \n" + fname_template + " -> styles.xml"
                             "\nпечатной формы во временную папку\n" + temp_folder +
                             "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }


    // ===========================
    // правка контента шаблона
    // ===========================
    // открытие контента шаблона
    QFile f_content(temp_folder + "/content.xml");
    f_content.open(QIODevice::ReadOnly);
    QString s_content = f_content.readAll();
    f_content.close();
    if (s_content.isEmpty()) {
        QMessageBox::warning(this,
                             "Файл контента шаблона пустой",
                             "Файл контента шаблона пустой. Возможно шаблон был испорчен.\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    // выбор шаблона
    int pos0 = s_content.indexOf("<table:table-row table:style-name=\"ro4\">", 0);
    int pos1 = s_content.indexOf("</table:table-row>", pos0) + 18;
    QString s_row = s_content.mid(pos0, pos1-pos0);

    // правка полей контента шаблона
    QString s_content_new = s_content.left(pos0);
    s_content_new = s_content_new.
            replace("#POINT_NAME#", " - все ПВП - " /*data_app.point_name*/).
            replace("#CUR_DATE#", (date1==date2 ? date1.toString("dd.MM.yyyy") : (date1.toString("dd.MM.yyyy") + " - " + date2.toString("dd.MM.yyyy"))) );
    int n = 0;
    while (query_reg->next()) {
        n++;
        QString s_row_new = s_row;
        s_row_new = s_row_new.
                replace("#N#", QString::number(n)).
                replace("#D1#", query_reg->value(4).toDate().toString("dd.MM.yyyy")).
                replace("#FIO#", query_reg->value(7).toString() + " " + query_reg->value(8).toString() + " " + query_reg->value(9).toString()).
                replace("#DR#", query_reg->value(12).toDate().toString("dd.MM.yyyy")).
                replace("#FIO_REP#", query_reg->value(14).toString()).
                replace("#PHONE#", ((query_reg->value(15).isNull()||query_reg->value(14).toString().isEmpty()) ? query_reg->value(13).toString() : query_reg->value(15).toString())).
                replace("#N_VS#", query_reg->value(3).toString()).
                replace("#D2#", query_reg->value(5).toDate().toString("dd.MM.yyyy"));
        QString address = "";
        if (query_reg->value(16).toInt()==0) {
            // соберём адрес регистрации
            if (!query_reg->value(35).isNull() && !query_reg->value(35).toString().isEmpty())  address += query_reg->value(35).toString() + ", ";
            //if (!query_reg->value(17).isNull() && !query_reg->value(17).toString().isEmpty())  address += query_reg->value(17).toString() + ", ";
            if (!query_reg->value(20).isNull() && !query_reg->value(20).toString().isEmpty())  address += query_reg->value(20).toString() + ", ";
            if (!query_reg->value(21).isNull() && !query_reg->value(21).toString().isEmpty())  address += query_reg->value(21).toString() + ", ";
            if (!query_reg->value(22).isNull() && !query_reg->value(22).toString().isEmpty())  address += query_reg->value(22).toString() + ", д. ";
            if (!query_reg->value(23).isNull() && !query_reg->value(23).toString().isEmpty())  address += query_reg->value(23).toString() + " ";
            if (!query_reg->value(24).isNull() && query_reg->value(24).toInt()>0)  address += QString::number(query_reg->value(24).toInt()) + ", кв.";
            if (!query_reg->value(25).isNull() && !query_reg->value(25).toString().isEmpty())  address += query_reg->value(25).toString();
        } else {
            // соберём адрес проживания
            if (!query_reg->value(36).isNull() && !query_reg->value(36).toString().isEmpty())  address += query_reg->value(36).toString() + ", ";
            //if (!query_reg->value(26).isNull() && !query_reg->value(26).toString().isEmpty())  address += query_reg->value(26).toString() + ", ";
            if (!query_reg->value(29).isNull() && !query_reg->value(29).toString().isEmpty())  address += query_reg->value(29).toString() + ", ";
            if (!query_reg->value(30).isNull() && !query_reg->value(30).toString().isEmpty())  address += query_reg->value(30).toString() + ", ";
            if (!query_reg->value(31).isNull() && !query_reg->value(31).toString().isEmpty())  address += query_reg->value(31).toString() + ", д. ";
            if (!query_reg->value(32).isNull() && !query_reg->value(32).toString().isEmpty())  address += query_reg->value(32).toString() + " ";
            if (!query_reg->value(33).isNull() && query_reg->value(33).toInt()>0)  address += QString::number(query_reg->value(33).toInt()) + ", кв.";
            if (!query_reg->value(34).isNull() && !query_reg->value(34).toString().isEmpty())  address += query_reg->value(34).toString();
        }
        s_row_new = s_row_new.replace("#A#", address);
        s_content_new += s_row_new;
    }
    s_content_new += s_content.right(s_content.size()-pos1);
    delete query_reg;

    // сохранение контента шаблона
    QFile f_content_save(temp_folder + "/content.xml");
    f_content_save.open(QIODevice::WriteOnly);
    f_content_save.write(s_content_new.toUtf8());
    f_content_save.close();


    // ===========================
    // архивация шаблона
    // ===========================
    QString fname_res = data_app.path_out + "_REGISTRY_/" + QString(date1==date2 ? date1.toString("dd.MM.yyyy") : (date1.toString("dd.MM.yyyy") + " - " + date2.toString("dd.MM.yyyy"))) + " - vs_registry - все ПВП.ods";
    QFile::remove(fname_res);
    while (QFile::exists(fname_res)) {
        if (QMessageBox::warning(this,
                                 "Ошибка сохранения журнала ВС",
                                 "Не удалось сохранить журнал ВС: \n" + fname_template +
                                 "\n\nво временную папку\n" + fname_res +
                                 "\n\nПроверьте, не открыт ли целевой файл в сторонней программе и повторите операцию.",
                                 QMessageBox::Retry|QMessageBox::Abort,
                                 QMessageBox::Retry)==QMessageBox::Abort) {
            this->setCursor(Qt::ArrowCursor);
            return false;
        }
        QFile::remove(fname_res);
    }
    if (!QFile::copy(fname_template, fname_res) || !QFile::exists(fname_res)) {
        QMessageBox::warning(this, "Ошибка копирования журнала", "Не удалось скопировать журнал ВС: \n" + fname_template + "\n\nво временную папку\n" + fname_res + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    com = "\"" + data_app.path_arch + "7z.exe\" a \"" + fname_res + "\" \"" + temp_folder + "/content.xml\"";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка обновления контента",
                             "При добавлении нового контента в журнал ВС произошла непредвиденная ошибка\n\nОпреация прервана.");
    }

    // ===========================
    // собственно открытие шаблона
    // ===========================
    // открытие полученного ODT
    /*long result =*/ (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_res.utf16()), 0, 0, SW_NORMAL);

    return true;
}

#include "qt_windows.h"
#include "qwindowdefs_win.h"
#include <shellapi.h>

bool persons_wnd::print_registry_oms() {
    QString sql_reg;

    // генерация XML для ТФОМС по всем не отправленным данным
    /*sql_reg = "select a.status, p.pol_ser, p.pol_num, "
              "       (select p1.vs_num from polises p1 where p1.id=(select max(p2.id) from polises p2 where p2.id_person=e.id and p2.id<p.id and p2.pol_v=2)) as vs_num, "
              "       p.date_begin, p.date_end, p.date_stop, e.fam, e.im, e.ot, e.sex, e.category, e.date_birth, e.phone_cell, "
              "       rep.rep_fio_full, rep.rep_contact, "
              "       e.bomj, ar.post_index, ar.ocato, ar.ocato_full, ar.dstr_name, ar.nasp_name, ar.strt_name, ar.house, ar.corp, ar.quart, "
              "       al.post_index as post_index_liv, al.ocato as ocato_liv, al.ocato_full as ocato_full_liv, al.dstr_name as dstr_name_liv, al.nasp_name as nasp_name_liv, al.strt_name as strt_name_liv, al.house as house_liv, al.corp as corp_liv, al.quart as quart_liv, "
              "       ocr.subj_name as subj_reg, ocl.subj_name as subj_liv "
              "  from events a "
              "       left join polises p on(p.id=a.id_polis) "
              "       left join spr_f008 f8 on(p.pol_v=f8.code and f8.date_end is NULL) "
              "       left join polises p_old on(p.id_old_polis=p_old.id) "
              "       left join persons e on(p.id_person=e.id) "

              "       left join (select id, fam || ' ' || im || ' ' || coalesce(ot,' ') as rep_fio_full, phone_cell || ', ' || email as rep_contact from persons r ) rep on(e.rep_id=rep.id) "

              "       left join persons_docs d on(d.id_person=e.id and d.status=1 and d.doc_type in(1,3,9,12,13,14,21,22,24,25,27,28) and (d.doc_exp is NULL or d.doc_exp>CURRENT_DATE)) "
              "       left join spr_f011 f11 on(f11.code=d.doc_type) "
              "       left join persons_docs drp on(drp.id_person=e.id and d.status=1 and d.doc_type in(11,23) and (d.doc_exp is NULL or d.doc_exp>CURRENT_DATE)) "
              "       left join spr_f011 p11 on(p11.code=drp.doc_type) "
              "       left join persons_photo foto on(foto.id_person=e.id and foto.type=2) "
              "       left join persons_photo sign on(sign.id_person=e.id and sign.type=3) "
              "       left join spr_oksm ob on(ob.code=e.oksm_birth) "
              "       left join spr_oksm oc on(oc.code=e.oksm_c) "
              "       left join addresses ar on(e.id_addr_reg=ar.id) "
              "       left join addresses al on(e.id_addr_reg=al.id) "
              "       left join vizits v on(v.id=a.id_vizit) "
              "       left join spr_ocato ocr on(ocr.code_ocato=ar.ocato) "
              "       left join spr_ocato ocl on(ocl.code_ocato=al.ocato) "
              " where a.status in(0,1) "
              "   and a.event_code in('П031', 'П032', 'П033', 'П060') "
              "   and p._id_last_point=" + QString::number(data_app.id_point) + " "
              " order by  e.fam, e.im, e.ot, e.date_birth ; ";
              */

    sql_reg = "select a.status, p.pol_ser, p.pol_num, p.vs_num, "
              "     p.date_begin, p.date_end, p.date_stop, e.fam, e.im, e.ot, e.sex, e.category, e.date_birth, e.phone_cell, "
              "     rep.rep_fio_full, rep.rep_contact, "
              "     e.bomj, ar.post_index, ar.ocato, ar.ocato_full, ar.dstr_name, ar.city_name ||', '||ar.nasp_name, ar.strt_name, ar.house, ar.corp, ar.quart, "
              "     al.post_index as post_index_liv, al.ocato as ocato_liv, al.ocato_full as ocato_full_liv, al.dstr_name as dstr_name_liv, al.city_name ||', '||al.nasp_name as nasp_name_liv, al.strt_name as strt_name_liv, al.house as house_liv, al.corp as corp_liv, al.quart as quart_liv, "
              "     ocr.subj_name as subj_reg, ocl.subj_name as subj_liv "
              " from events a "
              "     left join polises p on(p.id=a.id_polis) "
              "     left join spr_f008 f8 on(p.pol_v=f8.code and f8.date_end is NULL) "
              "     left join polises p_old on(p.id_old_polis=p_old.id) "
              "     left join persons e on(p.id_person=e.id) "

              "     left join (select id, fam || ' ' || im || ' ' || coalesce(ot,' ') as rep_fio_full, phone_cell || ', ' || email as rep_contact from persons r /*where r.id=e.rep_id*/) rep on(e.rep_id=rep.id) "

              "     left join persons_docs d on(d.id_person=e.id and d.status=1 and d.doc_type in(1,3,9,12,13,14,21,22,24,25,27,28) and (d.doc_exp is NULL or d.doc_exp>CURRENT_DATE)) "
              "     left join spr_f011 f11 on(f11.code=d.doc_type) "
              "     left join persons_docs drp on(drp.id_person=e.id and d.status=1 and d.doc_type in(11,23) and (d.doc_exp is NULL or d.doc_exp>CURRENT_DATE)) "
              "     left join spr_f011 p11 on(p11.code=drp.doc_type) "
              "     left join persons_photo foto on(foto.id_person=e.id and foto.type=2) "
              "     left join persons_photo sign on(sign.id_person=e.id and sign.type=3) "
              "     left join spr_oksm ob on(ob.code=e.oksm_birth) "
              "     left join spr_oksm oc on(oc.code=e.oksm_c) "
              "     left join addresses ar on(e.id_addr_reg=ar.id) "
              "     left join addresses al on(e.id_addr_reg=al.id) "
              "     left join vizits v on(v.id=a.id_vizit) "
              "     left join spr_ocato ocr on(ocr.code_ocato=ar.ocato) "
              "     left join spr_ocato ocl on(ocl.code_ocato=al.ocato) "
              " where a.status in(0,1) and a.event_code in('П010', 'П034', 'П035', 'П036', 'П061', 'П062', 'П063') "
              "   and p._id_last_point=" + QString::number(data_app.id_point) + " "
              " order by  e.fam, e.im, e.ot, e.date_birth ; ";


    QSqlQuery *query_reg = new QSqlQuery(db);
    if (!mySQL.exec(this, sql_reg, "Выбор всех неотправленных полисов для отправки в ТФОМС", *query_reg, true, db, data_app)) {
        delete query_reg;
        QMessageBox::warning(this, "Операция отменена", "Операция выгрузки данных для ТФОМС отменена");
        db.rollback();
        return false;
    }
    /*int q_n = query_reg->size();*/

    // распаковка шаблона реестра
    QString fname_template = data_app.path_reports + "oms_registry.ods";
    QString temp_folder = data_app.path_reports + "oms_registry";
    if (!QFile::exists(fname_template)) {
        QMessageBox::warning(this,
                             "Шаблон не найден",
                             "Не найден шаблон печатной формы реестра выданных ВС: \n" + fname_template +
                             "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    QDir tmp_dir(temp_folder);
    if (tmp_dir.exists(temp_folder) && !tmp_dir.removeRecursively()) {
        QMessageBox::warning(this,
                             "Ошибка при очистке папки",
                             "Не удалось очистить папку временных файлов: \n" + temp_folder +
                             "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    tmp_dir.mkpath(temp_folder);
    QProcess myProcess;
    QString com = "\"" + data_app.path_arch + "7z.exe\" e \"" + fname_template + "\" -o\"" + temp_folder + "\" content.xml";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка распаковки шаблона",
                             "Не удалось распаковать файл контента шаблона\n" + fname_template + " -> content.xml"
                             "\nпечатной формы во временную папку\n" + temp_folder +
                             "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    com = "\"" + data_app.path_arch + "7z.exe\" e \"" + fname_template + "\" -o\"" + temp_folder + "\" styles.xml";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка распаковки шаблона",
                             "Не удалось распаковать файл стилей шаблона \n" + fname_template + " -> styles.xml"
                             "\nпечатной формы во временную папку\n" + temp_folder +
                             "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }


    // ===========================
    // правка контента шаблона
    // ===========================
    // открытие контента шаблона
    QFile f_content(temp_folder + "/content.xml");
    f_content.open(QIODevice::ReadOnly);
    QString s_content = f_content.readAll();
    f_content.close();
    if (s_content.isEmpty()) {
        QMessageBox::warning(this,
                             "Файл контента шаблона пустой",
                             "Файл контента шаблона пустой. Возможно шаблон был испорчен.\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    // выбор шаблона
    int pos0 = s_content.indexOf("<table:table-row table:style-name=\"ro4\">", 0);
    int pos1 = s_content.indexOf("</table:table-row>", pos0) + 18;
    QString s_row = s_content.mid(pos0, pos1-pos0);

    // правка полей контента шаблона
    QString s_content_new = s_content.left(pos0);
    s_content_new = s_content_new.
            replace("#POINT_NAME#", data_app.point_name).
            replace("#CUR_DATE#", QDate::currentDate().toString("dd.MM.yyyy"));
    int n = 0;
    while (query_reg->next()) {
        n++;
        QString s_row_new = s_row;
        s_row_new = s_row_new.
                replace("#N#", QString::number(n)).
                replace("#DI#", query_reg->value(4).toDate().toString("dd.MM.yyyy")).
                replace("#N_VS#", query_reg->value(3).toString()).
                replace("#FIO#", query_reg->value(7).toString() + " " + query_reg->value(8).toString() + " " + query_reg->value(9).toString()).
                replace("#DR#", query_reg->value(12).toDate().toString("dd.MM.yyyy")).
                replace("#FIO_REP#", query_reg->value(14).toString()).
                replace("#PHONE#", ((query_reg->value(15).isNull()||query_reg->value(14).toString().isEmpty()) ? query_reg->value(13).toString() : query_reg->value(15).toString())).
                replace("#DII#", "").
                replace("#SN_POL#", "");
        QString address = "";
        if (query_reg->value(16).toInt()==0) {
            // соберём адрес регистрации
            if (!query_reg->value(35).isNull() && !query_reg->value(35).toString().isEmpty())  address += query_reg->value(35).toString() + ", ";
            //if (!query_reg->value(17).isNull() && !query_reg->value(17).toString().isEmpty())  address += query_reg->value(17).toString() + ", ";
            if (!query_reg->value(20).isNull() && !query_reg->value(20).toString().isEmpty())  address += query_reg->value(20).toString() + ", ";
            if (!query_reg->value(21).isNull() && !query_reg->value(21).toString().isEmpty())  address += query_reg->value(21).toString() + ", ";
            if (!query_reg->value(22).isNull() && !query_reg->value(22).toString().isEmpty())  address += query_reg->value(22).toString() + ", д. ";
            if (!query_reg->value(23).isNull() && !query_reg->value(23).toString().isEmpty())  address += query_reg->value(23).toString() + " ";
            if (!query_reg->value(24).isNull() && query_reg->value(24).toInt()>0)  address += QString::number(query_reg->value(24).toInt()) + ", кв.";
            if (!query_reg->value(25).isNull() && !query_reg->value(25).toString().isEmpty())  address += query_reg->value(25).toString();
        } else {
            // соберём адрес проживания
            if (!query_reg->value(36).isNull() && !query_reg->value(36).toString().isEmpty())  address += query_reg->value(36).toString() + ", ";
            //if (!query_reg->value(26).isNull() && !query_reg->value(26).toString().isEmpty())  address += query_reg->value(26).toString() + ", ";
            if (!query_reg->value(29).isNull() && !query_reg->value(29).toString().isEmpty())  address += query_reg->value(29).toString() + ", ";
            if (!query_reg->value(30).isNull() && !query_reg->value(30).toString().isEmpty())  address += query_reg->value(30).toString() + ", ";
            if (!query_reg->value(31).isNull() && !query_reg->value(31).toString().isEmpty())  address += query_reg->value(31).toString() + ", д. ";
            if (!query_reg->value(32).isNull() && !query_reg->value(32).toString().isEmpty())  address += query_reg->value(32).toString() + " ";
            if (!query_reg->value(33).isNull() && query_reg->value(33).toInt()>0)  address += QString::number(query_reg->value(33).toInt()) + ", кв.";
            if (!query_reg->value(34).isNull() && !query_reg->value(34).toString().isEmpty())  address += query_reg->value(34).toString();
        }
        s_row_new = s_row_new.replace("#A#", address);
        s_content_new += s_row_new;
    }
    s_content_new += s_content.right(s_content.size()-pos1);
    delete query_reg;

    // сохранение контента шаблона
    QFile f_content_save(temp_folder + "/content.xml");
    f_content_save.open(QIODevice::WriteOnly);
    f_content_save.write(s_content_new.toUtf8());
    f_content_save.close();


    // ===========================
    // архивация шаблона
    // ===========================
    //QString fname_res = data_app.path_temp + "oms_registry.ods";
    QString fname_res = data_app.path_out + "_REGISTRY_/" + QDate::currentDate().toString("yyyy-MM-dd") + " - " + data_app.filial_name + " - oms_registry - " + data_app.point_regnum + ".ods";
    QFile::remove(fname_res);
    while (QFile::exists(fname_res)) {
        if (QMessageBox::warning(this,
                                 "Ошибка сохранения журнала ВС",
                                 "Не удалось сохранить журнал ВС: \n" + fname_template +
                                 "\n\nво временную папку\n" + fname_res +
                                 "\n\nПроверьте, не открыт ли целевой файл в сторонней программе и повторите операцию.",
                                 QMessageBox::Retry|QMessageBox::Abort,
                                 QMessageBox::Retry)==QMessageBox::Abort) {
            this->setCursor(Qt::ArrowCursor);
            return false;
        }
        QFile::remove(fname_res);
    }
    if (!QFile::copy(fname_template, fname_res) || !QFile::exists(fname_res)) {
        QMessageBox::warning(this, "Ошибка копирования журнала", "Не удалось скопировать журнал ВС: \n" + fname_template + "\n\nво временную папку\n" + fname_res + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    com = "\"" + data_app.path_arch + "7z.exe\" a \"" + fname_res + "\" \"" + temp_folder + "/content.xml\"";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка обновления контента",
                             "При добавлении нового контента в журнал ВС произошла непредвиденная ошибка\n\nОпреация прервана.");
    }

    // ===========================
    // собственно открытие шаблона
    // ===========================
    // открытие полученного ODT
    /*long result =*/ (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_res.utf16()), 0, 0, SW_NORMAL);

    return true;
}


bool persons_wnd::print_registry_oms(QDate date1, QDate date2) {
    QString sql_reg;

    // генерация XML для ТФОМС по всем не отправленным данным
    /*sql_reg = "select a.status, p.pol_ser, p.pol_num, "
              "       (select p1.vs_num from polises p1 where p1.id=(select max(p2.id) from polises p2 where p2.id_person=e.id and p2.id<p.id and p2.pol_v=2)) as vs_num, "
              "       p.date_begin, p.date_end, p.date_stop, e.fam, e.im, e.ot, e.sex, e.category, e.date_birth, e.phone_cell, "
              "       rep.rep_fio_full, rep.rep_contact, "
              "       e.bomj, ar.post_index, ar.ocato, ar.ocato_full, ar.dstr_name, ar.nasp_name, ar.strt_name, ar.house, ar.corp, ar.quart, "
              "       al.post_index as post_index_liv, al.ocato as ocato_liv, al.ocato_full as ocato_full_liv, al.dstr_name as dstr_name_liv, al.nasp_name as nasp_name_liv, al.strt_name as strt_name_liv, al.house as house_liv, al.corp as corp_liv, al.quart as quart_liv, "
              "       ocr.subj_name as subj_reg, ocl.subj_name as subj_liv "
              "  from events a "
              "       left join polises p on(p.id=a.id_polis) "
              "       left join spr_f008 f8 on(p.pol_v=f8.code and f8.date_end is NULL) "
              "       left join polises p_old on(p.id_old_polis=p_old.id) "
              "       left join persons e on(p.id_person=e.id) "

              "       left join (select id, fam || ' ' || im || ' ' || coalesce(ot,' ') as rep_fio_full, phone_cell || ', ' || email as rep_contact from persons r ) rep on(e.rep_id=rep.id) "

              "       left join persons_docs d on(d.id_person=e.id and d.status=1 and d.doc_type in(1,3,9,12,13,14,21,22,24,25,27,28) and (d.doc_exp is NULL or d.doc_exp>'" + date.toString("yyyy-MM-dd") + "')) "
              "       left join spr_f011 f11 on(f11.code=d.doc_type) "
              "       left join persons_docs drp on(drp.id_person=e.id and d.status=1 and d.doc_type in(11,23) and (d.doc_exp is NULL or d.doc_exp>'" + date.toString("yyyy-MM-dd") + "')) "
              "       left join spr_f011 p11 on(p11.code=drp.doc_type) "
              "       left join persons_photo foto on(foto.id_person=e.id and foto.type=2) "
              "       left join persons_photo sign on(sign.id_person=e.id and sign.type=3) "
              "       left join spr_oksm ob on(ob.code=e.oksm_birth) "
              "       left join spr_oksm oc on(oc.code=e.oksm_c) "
              "       left join addresses ar on(e.id_addr_reg=ar.id) "
              "       left join addresses al on(e.id_addr_reg=al.id) "
              "       left join vizits v on(v.id=a.id_vizit) "
              "       left join spr_ocato ocr on(ocr.code_ocato=ar.ocato) "
              "       left join spr_ocato ocl on(ocl.code_ocato=al.ocato) "
              " where a.event_code in('П031', 'П032', 'П033', 'П060') "
              "   and p.date_activate='" + date.toString("yyyy-MM-dd") + "' "
              " order by  e.fam, e.im, e.ot, e.date_birth ; ";
              */


    sql_reg = "select a.status, p.pol_ser, p.pol_num, p.vs_num, "
              "     p.date_begin, p.date_end, p.date_stop, e.fam, e.im, e.ot, e.sex, e.category, e.date_birth, e.phone_cell, "
              "     rep.rep_fio_full, rep.rep_contact, "
              "     e.bomj, ar.post_index, ar.ocato, ar.ocato_full, ar.dstr_name, ar.city_name ||', '||ar.nasp_name, ar.strt_name, ar.house, ar.corp, ar.quart, "
              "     al.post_index as post_index_liv, al.ocato as ocato_liv, al.ocato_full as ocato_full_liv, al.dstr_name as dstr_name_liv, al.city_name ||', '||al.nasp_name as nasp_name_liv, al.strt_name as strt_name_liv, al.house as house_liv, al.corp as corp_liv, al.quart as quart_liv, "
              "     ocr.subj_name as subj_reg, ocl.subj_name as subj_liv "
              " from events a "
              "     left join polises p on(p.id=a.id_polis) "
              "     left join spr_f008 f8 on(p.pol_v=f8.code and f8.date_end is NULL) "
              "     left join polises p_old on(p.id_old_polis=p_old.id) "
              "     left join persons e on(p.id_person=e.id) "

              "     left join (select id, fam || ' ' || im || ' ' || coalesce(ot,' ') as rep_fio_full, phone_cell || ', ' || email as rep_contact from persons r /*where r.id=e.rep_id*/) rep on(e.rep_id=rep.id) "

              "     left join persons_docs d on(d.id_person=e.id and d.status=1 and d.doc_type in(1,3,9,12,13,14,21,22,24,25,27,28) and (d.doc_exp is NULL or d.doc_exp>'" + date1.toString("yyyy-MM-dd") + "')) "
              "     left join spr_f011 f11 on(f11.code=d.doc_type) "
              "     left join persons_docs drp on(drp.id_person=e.id and d.status=1 and d.doc_type in(11,23) and (d.doc_exp is NULL or d.doc_exp>'" + date1.toString("yyyy-MM-dd") + "')) "
              "     left join spr_f011 p11 on(p11.code=drp.doc_type) "
              "     left join persons_photo foto on(foto.id_person=e.id and foto.type=2) "
              "     left join persons_photo sign on(sign.id_person=e.id and sign.type=3) "
              "     left join spr_oksm ob on(ob.code=e.oksm_birth) "
              "     left join spr_oksm oc on(oc.code=e.oksm_c) "
              "     left join addresses ar on(e.id_addr_reg=ar.id) "
              "     left join addresses al on(e.id_addr_reg=al.id) "
              "     left join vizits v on(v.id=a.id_vizit) "
              "     left join spr_ocato ocr on(ocr.code_ocato=ar.ocato) "
              "     left join spr_ocato ocl on(ocl.code_ocato=al.ocato) "
              " where a.event_code in('П010', 'П034', 'П035', 'П036', 'П061', 'П062', 'П063') "
              "   and p.date_begin>='" + date1.toString("yyyy-MM-dd") + "' "
              "   and p.date_begin<='" + date2.toString("yyyy-MM-dd") + "' "
              " order by  e.fam, e.im, e.ot, e.date_birth ; ";


    QSqlQuery *query_reg = new QSqlQuery(db);
    if (!mySQL.exec(this, sql_reg, "Выбор всех неотправленных полисов для отправки в ТФОМС", *query_reg, true, db, data_app)) {
        delete query_reg;
        QMessageBox::warning(this, "Операция отменена", "Операция выгрузки данных для ТФОМС отменена");
        db.rollback();
        return false;
    }
    /*int q_n = query_reg->size();*/

    // распаковка шаблона реестра
    QString fname_template = data_app.path_reports + "oms_registry.ods";
    QString temp_folder = data_app.path_reports + "oms_registry";
    if (!QFile::exists(fname_template)) {
        QMessageBox::warning(this,
                             "Шаблон не найден",
                             "Не найден шаблон печатной формы реестра выданных ВС: \n" + fname_template +
                             "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    QDir tmp_dir(temp_folder);
    if (tmp_dir.exists(temp_folder) && !tmp_dir.removeRecursively()) {
        QMessageBox::warning(this,
                             "Ошибка при очистке папки",
                             "Не удалось очистить папку временных файлов: \n" + temp_folder +
                             "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    tmp_dir.mkpath(temp_folder);
    QProcess myProcess;
    QString com = "\"" + data_app.path_arch + "7z.exe\" e \"" + fname_template + "\" -o\"" + temp_folder + "\" content.xml";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка распаковки шаблона",
                             "Не удалось распаковать файл контента шаблона\n" + fname_template + " -> content.xml"
                             "\nпечатной формы во временную папку\n" + temp_folder +
                             "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    com = "\"" + data_app.path_arch + "7z.exe\" e \"" + fname_template + "\" -o\"" + temp_folder + "\" styles.xml";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка распаковки шаблона",
                             "Не удалось распаковать файл стилей шаблона \n" + fname_template + " -> styles.xml"
                             "\nпечатной формы во временную папку\n" + temp_folder +
                             "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }


    // ===========================
    // правка контента шаблона
    // ===========================
    // открытие контента шаблона
    QFile f_content(temp_folder + "/content.xml");
    f_content.open(QIODevice::ReadOnly);
    QString s_content = f_content.readAll();
    f_content.close();
    if (s_content.isEmpty()) {
        QMessageBox::warning(this,
                             "Файл контента шаблона пустой",
                             "Файл контента шаблона пустой. Возможно шаблон был испорчен.\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    // выбор шаблона
    int pos0 = s_content.indexOf("<table:table-row table:style-name=\"ro4\">", 0);
    int pos1 = s_content.indexOf("</table:table-row>", pos0) + 18;
    QString s_row = s_content.mid(pos0, pos1-pos0);

    // правка полей контента шаблона
    QString s_content_new = s_content.left(pos0);
    s_content_new = s_content_new.
            replace("#POINT_NAME#", " - все ПВП - " /*data_app.point_name*/).
            replace("#CUR_DATE#", (date1==date2 ? date1.toString("dd.MM.yyyy") : (date1.toString("dd.MM.yyyy") + " - " + date2.toString("dd.MM.yyyy"))) );
    int n = 0;
    while (query_reg->next()) {
        n++;
        QString s_row_new = s_row;
        s_row_new = s_row_new.
                replace("#N#", QString::number(n)).
                replace("#DI#", query_reg->value(4).toDate().toString("dd.MM.yyyy")).
                replace("#N_VS#", query_reg->value(3).toString()).
                replace("#FIO#", query_reg->value(7).toString() + " " + query_reg->value(8).toString() + " " + query_reg->value(9).toString()).
                replace("#DR#", query_reg->value(12).toDate().toString("dd.MM.yyyy")).
                replace("#FIO_REP#", query_reg->value(14).toString()).
                replace("#PHONE#", ((query_reg->value(15).isNull()||query_reg->value(14).toString().isEmpty()) ? query_reg->value(13).toString() : query_reg->value(15).toString())).
                replace("#DII#", "").
                replace("#SN_POL#", "");
        QString address = "";
        if (query_reg->value(16).toInt()==0) {
            // соберём адрес регистрации
            if (!query_reg->value(35).isNull() && !query_reg->value(35).toString().isEmpty())  address += query_reg->value(35).toString() + ", ";
            //if (!query_reg->value(17).isNull() && !query_reg->value(17).toString().isEmpty())  address += query_reg->value(17).toString() + ", ";
            if (!query_reg->value(20).isNull() && !query_reg->value(20).toString().isEmpty())  address += query_reg->value(20).toString() + ", ";
            if (!query_reg->value(21).isNull() && !query_reg->value(21).toString().isEmpty())  address += query_reg->value(21).toString() + ", ";
            if (!query_reg->value(22).isNull() && !query_reg->value(22).toString().isEmpty())  address += query_reg->value(22).toString() + ", д. ";
            if (!query_reg->value(23).isNull() && !query_reg->value(23).toString().isEmpty())  address += query_reg->value(23).toString() + " ";
            if (!query_reg->value(24).isNull() && query_reg->value(24).toInt()>0)  address += QString::number(query_reg->value(24).toInt()) + ", кв.";
            if (!query_reg->value(25).isNull() && !query_reg->value(25).toString().isEmpty())  address += query_reg->value(25).toString();
        } else {
            // соберём адрес проживания
            if (!query_reg->value(36).isNull() && !query_reg->value(36).toString().isEmpty())  address += query_reg->value(36).toString() + ", ";
            //if (!query_reg->value(26).isNull() && !query_reg->value(26).toString().isEmpty())  address += query_reg->value(26).toString() + ", ";
            if (!query_reg->value(29).isNull() && !query_reg->value(29).toString().isEmpty())  address += query_reg->value(29).toString() + ", ";
            if (!query_reg->value(30).isNull() && !query_reg->value(30).toString().isEmpty())  address += query_reg->value(30).toString() + ", ";
            if (!query_reg->value(31).isNull() && !query_reg->value(31).toString().isEmpty())  address += query_reg->value(31).toString() + ", д. ";
            if (!query_reg->value(32).isNull() && !query_reg->value(32).toString().isEmpty())  address += query_reg->value(32).toString() + " ";
            if (!query_reg->value(33).isNull() && query_reg->value(33).toInt()>0)  address += QString::number(query_reg->value(33).toInt()) + ", кв.";
            if (!query_reg->value(34).isNull() && !query_reg->value(34).toString().isEmpty())  address += query_reg->value(34).toString();
        }
        s_row_new = s_row_new.replace("#A#", address);
        s_content_new += s_row_new;
    }
    s_content_new += s_content.right(s_content.size()-pos1);
    delete query_reg;

    // сохранение контента шаблона
    QFile f_content_save(temp_folder + "/content.xml");
    f_content_save.open(QIODevice::WriteOnly);
    f_content_save.write(s_content_new.toUtf8());
    f_content_save.close();


    // ===========================
    // архивация шаблона
    // ===========================
    //QString fname_res = data_app.path_temp + "oms_registry.ods";
    QString fname_res = data_app.path_out + "_REGISTRY_/" + QString(date1==date2 ? date1.toString("dd.MM.yyyy") : (date1.toString("dd.MM.yyyy") + " - " + date2.toString("dd.MM.yyyy"))) + " - oms_registry - все ПВП.ods";
    QFile::remove(fname_res);
    while (QFile::exists(fname_res)) {
        if (QMessageBox::warning(this,
                                 "Ошибка сохранения журнала ВС",
                                 "Не удалось сохранить журнал ВС: \n" + fname_template +
                                 "\n\nво временную папку\n" + fname_res +
                                 "\n\nПроверьте, не открыт ли целевой файл в сторонней программе и повторите операцию.",
                                 QMessageBox::Retry|QMessageBox::Abort,
                                 QMessageBox::Retry)==QMessageBox::Abort) {
            this->setCursor(Qt::ArrowCursor);
            return false;
        }
        QFile::remove(fname_res);
    }
    if (!QFile::copy(fname_template, fname_res) || !QFile::exists(fname_res)) {
        QMessageBox::warning(this, "Ошибка копирования журнала", "Не удалось скопировать журнал ВС: \n" + fname_template + "\n\nво временную папку\n" + fname_res + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return false;
    }
    com = "\"" + data_app.path_arch + "7z.exe\" a \"" + fname_res + "\" \"" + temp_folder + "/content.xml\"";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка обновления контента",
                             "При добавлении нового контента в журнал ВС произошла непредвиденная ошибка\n\nОпреация прервана.");
    }

    // ===========================
    // собственно открытие шаблона
    // ===========================
    // открытие полученного ODT
    /*long result =*/ (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_res.utf16()), 0, 0, SW_NORMAL);

    return true;
}

#include "qt_windows.h"
#include "qwindowdefs_win.h"
#include <shellapi.h>

void persons_wnd::on_act_help_triggered() {
    QString pathDocument = QApplication::applicationDirPath() + "/INKO_polises_help.pdf";
    long result = (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(pathDocument.utf16()), 0, 0, SW_NORMAL);
    if (result<32) {
        QMessageBox::warning(this,
                             "Файл справки не найден",
                             "Файл справки не найден:\n\n" + pathDocument +
                             "\nКод ошибки: " + QString::number(result) +
                             "\n\nПроверьте целостность установочного пакета программы.");
    }
}

void persons_wnd::on_act_about_triggered() {
    QMessageBox::about(this,
                       "О программе",
                       "ИНКО-МЕД  -  «ПОЛИСЫ ОМС»\n\n"
                       "Утилита для ведения базы полисов ООО \"МСК «ИНКО-МЕД»\"\nверсия " + data_app.version + "\n\n"
                       "© ООО МСК \"ИНКО-МЕД\", 2015 г.\nРазработчик  -  Кизянов А.Ф.\n"
                       "______________________________\n"
                       "ПО тестируется под ОС\nWindows 7 Prof.  SP1, 32 bit"
                       );
}


void persons_wnd::on_ln_pers_pan_reg_subj_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=2)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_reg_subj->setText(str);
    ui->ln_pers_pan_reg_subj->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_reg_dstr_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=3)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_reg_dstr->setText(str);
    ui->ln_pers_pan_reg_dstr->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_reg_city_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=3)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_reg_city->setText(str);
    ui->ln_pers_pan_reg_city->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_reg_nasp_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=3)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_reg_nasp->setText(str);
    ui->ln_pers_pan_reg_nasp->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_reg_strt_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=4)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_reg_strt->setText(str);
    ui->ln_pers_pan_reg_strt->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_reg_hous_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=4)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_reg_hous->setText(str);
    ui->ln_pers_pan_reg_hous->setCursorPosition(str.length());
}
void persons_wnd::on_ln_pers_pan_reg_corp_textEdited(const QString &arg1) {
    QString str = arg1.trimmed();
    ui->ln_pers_pan_reg_corp->setText(str);
    ui->ln_pers_pan_reg_corp->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_reg_qart_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=4)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_reg_qart->setText(str);
    ui->ln_pers_pan_reg_qart->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_reg_index_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=6)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_reg_index->setText(str);
    ui->ln_pers_pan_reg_index->setCursorPosition(str.size());
}


void persons_wnd::on_ln_pers_pan_liv_subj_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=2)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_liv_subj->setText(str);
    ui->ln_pers_pan_liv_subj->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_liv_dstr_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=3)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_liv_dstr->setText(str);
    ui->ln_pers_pan_liv_dstr->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_liv_city_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=3)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_liv_city->setText(str);
    ui->ln_pers_pan_liv_city->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_liv_nasp_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=3)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_liv_nasp->setText(str);
    ui->ln_pers_pan_liv_nasp->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_liv_strt_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=4)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_liv_hous->setText(str);
    ui->ln_pers_pan_liv_hous->setCursorPosition(str.length());
}
void persons_wnd::on_ln_pers_pan_liv_hous_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=4)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_liv_hous->setText(str);
    ui->ln_pers_pan_liv_hous->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_liv_corp_textEdited(const QString &arg1) {
    QString str = arg1.trimmed();
    ui->ln_pers_pan_liv_corp->setText(str);
    ui->ln_pers_pan_liv_corp->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_liv_qart_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=4)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_liv_qart->setText(str);
    ui->ln_pers_pan_liv_qart->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_liv_index_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=6)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_liv_index->setText(str);
    ui->ln_pers_pan_liv_index->setCursorPosition(str.size());
}


void persons_wnd::on_ln_pers_pan_phone_code_textEdited(const QString &arg1) {
    QString str0 = arg1.trimmed(), str = "";
    for (int i=0; i<str0.size(); ++i) {
        if (str.length()>=6)
            break;
        QString c = str0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            str += c;
        }
    }
    ui->ln_pers_pan_phone_code->setText(str);
    ui->ln_pers_pan_phone_code->setCursorPosition(str.size());
}
void persons_wnd::on_ln_pers_pan_phone_home_textEdited(const QString &arg1) {
    /*QString str = arg1.trimmed();
    ui->ln_pers_pan_phone_home->setText(str);
    ui->ln_pers_pan_phone_home->setCursorPosition(str.size());*/
}
void persons_wnd::on_ln_pers_pan_phone_work_textEdited(const QString &arg1) {
    /*QString str = arg1.trimmed();
    ui->ln_pers_pan_phone_work->setText(str);
    ui->ln_pers_pan_phone_work->setCursorPosition(str.size());*/
}
void persons_wnd::on_ln_pers_pan_phone_cell_textEdited(const QString &arg1) {
    /*QString str = arg1.trimmed();
    ui->ln_pers_pan_phone_cell->setText(str);
    ui->ln_pers_pan_phone_cell->setCursorPosition(str.size());*/
}
void persons_wnd::on_ln_pers_pan_email_textEdited(const QString &arg1) {
    /*QString str = arg1.trimmed();
    ui->ln_pers_pan_email->setText(str);
    ui->ln_pers_pan_email->setCursorPosition(arg1.size());*/
}

void persons_wnd::on_ch_pers_fam_clicked() {
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_im_clicked() {
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_ot_clicked() {
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_sex_clicked() {
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_birth_clicked() {
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_snils_clicked() {
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_vs_clicked() {
    if (ui->line_pers_vs->text().isEmpty())
        ui->line_pers_vs->setText("1");
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_enp_clicked() {
    refresh_persons_tab();
}

/*void persons_wnd::on_combo_docs_pan_orgcode_currentIndexChanged(const QString &arg1) {
    data_doc.org_code = arg1;
    data_doc.doc_org = ui->line_docs_pan_ogrname->toPlainText() ;
    if (!(ui->combo_docs_pan_orgcode->currentData().toString().isEmpty())) {
        ui->line_docs_pan_ogrname->setText(ui->combo_docs_pan_orgcode->currentData().toString());
    }
    //ui->bn_add_orgcode->setEnabled(!ui->line_docs_pan_ogrname->toPlainText().isEmpty());
    //ui->bn_del_orgcode->setEnabled( (ui->combo_docs_pan_orgcode->currentIndex()>0) && (!ui->combo_docs_pan_orgcode->currentText().isEmpty()) );
    ui->bn_add_orgcode->setEnabled(true);
    ui->bn_del_orgcode->setEnabled(true);
}*/
/*void persons_wnd::on_combo_docs_pan_orgcode_editTextChanged(const QString &arg1) {
    on_combo_docs_pan_orgcode_currentIndexChanged(arg1);
}*/

void persons_wnd::on_bn_add_orgcode_clicked() {
    if (ui->combo_docs_pan_orgcode->currentIndex()==0)
        return;
    if (ui->line_docs_pan_ogrname->toPlainText().trimmed().isEmpty())
        return;
    if (ui->combo_docs_pan_orgcode->currentText().trimmed().isEmpty())
        return;
    QString sql_tst = "select id from orgs where org_code='" + ui->combo_docs_pan_orgcode->currentText() + "' ; ";
    QSqlQuery *query_tst = new QSqlQuery(db);
    /*bool res_tst =*/ mySQL.exec(this, sql_tst, "Проверка выдающего УДЛ или ДРП подразделения на дубли", *query_tst, true, db, data_app);
    if (query_tst->size()>0) {
        QMessageBox::warning(this, "Такой код уже есть!", "Такой код организации уже есть.\nОперация отменена.");
        return;
    }
    QString org_code = ui->combo_docs_pan_orgcode->currentText();
    QString sql_ins = "insert into orgs (org_code, org_name) "
                      " values('" + org_code + "', '" +
                                    ui->line_docs_pan_ogrname->toPlainText() + "') ; ";
    QSqlQuery *query_ins = new QSqlQuery(db);
    /*bool res_ins =*/ mySQL.exec(this, sql_ins, "Добавление нового выдающего УДЛ или ДРП подразделения", *query_ins, true, db, data_app);
    refresh_docs_pan_orgcodes();
    ui->combo_docs_pan_orgcode->setCurrentIndex(doc_org_code.indexOf(org_code));
    ui->line_docs_pan_ogrname->setText(ui->combo_docs_pan_orgcode->currentData().toString());
    return;
}

void persons_wnd::on_bn_del_orgcode_clicked() {
    if (ui->combo_docs_pan_orgcode->currentIndex()==0)
        return;
    QString sql_del = "delete from orgs where org_code='" + ui->combo_docs_pan_orgcode->currentText() + "' ; ";
    QSqlQuery *query_del = new QSqlQuery(db);
    /*bool res_del =*/ mySQL.exec(this, sql_del, "Удаления выдающего УДЛ или ДРП подразделения из базы", *query_del, true, db, data_app);
    refresh_docs_pan_orgcodes();
    return;
}

void persons_wnd::on_spin_docs_pan_type_editingFinished() {
    ui->combo_docs_pan_type->setCurrentIndex(ui->combo_docs_pan_type->findData(ui->spin_docs_pan_type->value()));
}


void persons_wnd::on_bn_pers_polices_clicked() {
    // проверим, можно ли переходить к страхованию
        if (!test_for_FIAS(false)) {
        ui->bn_pers_polices->setEnabled(false);
        QMessageBox::warning(this, "Не достаточно данных?",
                             "Адрес (адреса) застрахованного должны содержать коды по ФИАС.\n"
                             "Добавьте данные ФИАС и повторите попытку.\n\n"
                             "Страхование не возможно.");
        return;
    }
    if (!test_for_UDL(false, false)) {
        ui->bn_pers_polices->setEnabled(false);
        QMessageBox::warning(this, "Не достаточно данных?",
                             "Не хватает данных о документах застрахованного или документы застрахованного не соответствуют категории.\n"
                             "Исправьте или дополните данные о документах и повторите попытку.\n\n"
                             "Страхование не возможно.");
        return;
    }
    if (!test_for_SNILS(data_pers.snils, data_pers.oksm_c, data_pers.category, data_pers.date_birth)) {
        ui->bn_pers_polices->setEnabled(false);
        QMessageBox::warning(this, "Не достаточно данных?",
                             "Для страхования лиц выбранной категории обязательно нужно указывать СНИЛС.\n"
                             "Исправьте или дополните данные и повторите попытку.\n\n"
                             "Страхование не возможно.");
        return;
    }

    this->setCursor(Qt::WaitCursor);

    // прочитаем данные УДЛ, адреса, ДРП, представителя и его УДЛ
    db.transaction();
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select * from update_pers_links(" + QString::number(data_pers.id) + ", NULL) ; ";
    sql+= "select oksm_b.code as oksm_birth, oksm_b.short_name as oksm_birth_text, oksm_c.code as oksm_c, oksm_c.short_name as oksm_c_text, "
          "       udl.doc_type as udl_type, udl_f11.text as udl_type_text, udl.doc_ser as udl_ser, udl.doc_num as udl_num, udl.org_code as udl_orgcode, udl.doc_org as udl_org, udl.doc_date as udl_date, udl.doc_date as udl_date_from, udl.doc_exp as udl_date_to, "
          "       drp.doc_type as drp_type, drp_f11.text as drp_type_text, drp.doc_ser as drp_ser, drp.doc_num as drp_num, drp.org_code as drp_orgcode, drp.doc_org as drp_org, drp.doc_date as drp_date, drp.doc_date as drp_date_from, drp.doc_exp as drp_date_to, "
          "       a_reg.post_index as index_reg, a_reg.subj subj_reg, a_reg.dstr as dstr_reg, a_reg.city as city_reg, a_reg.nasp as nasp_reg, a_reg.strt as strt_reg, a_reg.house as h_reg, a_reg.corp as c_reg, a_reg.quart as q_reg, e.date_reg as date_reg, e.bomj, "
          "       a_liv.post_index as index_liv, a_liv.subj as subj_liv, a_liv.dstr as dstr_liv, a_liv.city as city_liv, a_liv.nasp as nasp_liv, a_liv.strt as strt_liv, a_liv.house as h_liv, a_liv.corp as c_liv, a_liv.quart as q_liv, "
          "       rep.id, e.rep_fio, rep.fam, rep.im, rep.ot, e.rep_relation, rep.phone_cell, "
          "       rep.phone_code, rep.phone_home, rep.phone_work, rep.phone_cell, "
          "       rep_udl.doc_type as rep_udl_type, rep_f11.text as rep_udl_type_text, rep_udl.doc_ser as rep_udl_ser, rep_udl.doc_num as rep_udl_num, rep_udl.doc_date as rep_udl_date, rep_udl.org_code as rep_udl_orgcode, rep_udl.doc_org as rep_udl_org,"
          "       e.id_udl, e.id_drp, e.id_polis, la._id_asg as id_assig,"
          "       eaes.category, case when eaes.category in(11,12,13,14) then eaes.residence else '' end as residence, eaes.residence_exp, case when eaes.category in(11,12,13,14) then v13.text else '' end as eaes_category, "
          "       e._date_insure_begin, e._date_insure_end "
          "  from persons e "
          "  left join link_persons_asg la on(la.id_person=e.id) "
          "  left join spr_oksm oksm_b on(oksm_b.code=e.oksm_birth) "
          "  left join spr_oksm oksm_c on(oksm_c.code=e.oksm_c) "
          "  left join persons_docs udl on ( udl.id in (select * from get_pers_udl(" + QString::number(data_pers.id) + ", NULL))) "
          "  left join spr_f011 udl_f11 on(udl_f11.code=udl.doc_type) "
          "  left join persons_docs drp on ( drp.id in (select * from get_pers_drp(" + QString::number(data_pers.id) + ", NULL))) "
          "  left join spr_f011 drp_f11 on(drp_f11.code=drp.doc_type) "
          "  left join persons rep on(rep.id=e.rep_id) "
          "  left join persons_docs rep_udl on( rep_udl.id in (select * from get_pers_udl(" + QString::number(data_pers.rep_id) + ", NULL))) "
          "  left join spr_f011 rep_f11 on(rep_f11.code=rep_udl.doc_type) "
          "  left join addresses a_reg on( a_reg.id=e.id_addr_reg ) "
          "  left join addresses a_liv on(a_liv.id=e.id_addr_liv) "
          "  left join persons_eaes eaes on(eaes.id_person=e.id and eaes.status=1) "
          "  left join spr_v013 v13 on(v13.code=e.category) "
          "where e.id=" + QString::number(data_pers.id) + " ; ";

    if (!mySQL.exec(this, sql, QString("Для застрахованного - данные УДЛ, адреса, ДРП, представителя и его УДЛ"), *query, true, db, data_app) || query->size()<1) {
        // не удалось получить данные о застрахованном
        delete query;
        QMessageBox::critical(this, "Ошибка при получении данных", "При запросе подробных данных о застрахованном произошла непредвиденная ошибка.\n\nОперация отменена.");
        db.rollback();
        return;
    }
    query->next();
    data_pers.oksm_birth = query->value(0).toInt();
    data_pers.oksm_birth_text = query->value(1).toString();
    data_pers.oksm_c = query->value(2).toInt();
    data_pers.oksm_c_text = query->value(3).toString();

    data_pers.udl_type = query->value(4).toInt();
    data_pers.udl_type_text = query->value(5).toString();
    data_pers.udl_ser = query->value(6).toString();
    data_pers.udl_num = query->value(7).toString();
    data_pers.udl_org_code = query->value(8).toString();
    data_pers.udl_org = query->value(9).toString();
    data_pers.udl_date = query->value(10).toDate();
    //data_pers.udl_date_from = query->value(11).toDate();
    data_pers.udl_date_exp = query->value(12).toDate();
    if (!data_pers.udl_date_exp.isValid())
        data_pers.udl_date_exp = QDate(1900,1,1);
    data_pers.udl_date_exp_f = !(query->value(12).isNull()) &&
                               (data_pers.udl_date_exp>QDate(1920,1,1));

    data_pers.has_drp = !(query->value(13).isNull());
    data_pers.drp_type = query->value(13).toInt();
    data_pers.drp_type_text = query->value(14).toString();
    data_pers.drp_ser = query->value(15).toString();
    data_pers.drp_num = query->value(16).toString();
    data_pers.drp_org_code = query->value(17).toString();
    data_pers.drp_org = query->value(18).toString();
    data_pers.drp_date = query->value(19).toDate();
    //data_pers.drp_date_from = query->value(20).toDate();
    data_pers.drp_date_exp = query->value(21).toDate();
    if (!data_pers.drp_date_exp.isValid())
        data_pers.drp_date_exp = QDate(1900,1,1);
    data_pers.drp_date_exp_f = !(query->value(21).isNull()) &&
                             (data_pers.drp_date_exp>QDate(1920,1,1));

    data_pers.rep_id = query->value(42).toInt();
    data_pers.rep_relation = query->value(47).toInt();
    data_pers.rep_fio = query->value(43).toString();
    data_pers.rep_fam = query->value(44).toString();
    data_pers.rep_im = query->value(45).toString();
    data_pers.rep_ot = query->value(46).toString();
    data_pers.rep_udl_type = query->value(53).toInt();
    data_pers.rep_udl_type_text = query->value(54).toString();
    data_pers.rep_udl_ser = query->value(55).toString();
    data_pers.rep_udl_num = query->value(58).toString();
    data_pers.rep_udl_orgcode = query->value(58).toString();
    data_pers.rep_udl_org = query->value(59).toString();
    data_pers.rep_udl_date = query->value(57).toDate();
    data_pers.rep_phone_code = query->value(49).toString();
    data_pers.rep_phone_home = query->value(50).toString();
    data_pers.rep_phone_work = query->value(51).toString();
    data_pers.rep_phone_cell = query->value(52).toString();

    data_pers.id_udl = query->value(60).toInt();
    data_pers.id_drp = query->value(61).toInt();
    data_pers.id_polis = query->value(62).toInt();
    data_pers.id_assig = query->value(63).toInt();

    data_pers._date_insure_begin = query->value(68).toDate();
    data_pers._date_insure_end   = query->value(69).toDate();

    // данные по ЕАЭС
    data_pers.eaes_category = query->value(64).toInt();
    data_pers.eaes_residence = query->value(65).toString();
    data_pers.eaes_residence_exp  = query->value(66).toDate();
    data_pers.eaes_category_text = query->value(67).toString();

    // адрес регистрации по ФИАС
    data_pers.reg_index = query->value(22).toString();
    int subj = query->value(23).toInt();
    int dstr = query->value(24).toInt();
    int city = query->value(25).toInt();
    int nasp = query->value(26).toInt();
    int strt = query->value(27).toInt();
    data_pers.reg_hous = query->value(28).toInt();
    data_pers.reg_corp = query->value(29).toString();
    data_pers.reg_qart = query->value(30).toString();
    data_pers.reg_date = query->value(31).toDate();
    data_pers.bomj = (query->value(32).toInt()==1);
    QSqlQuery *query_reg = new QSqlQuery(db);
    QString sql_reg = "";
    // регион
    sql_reg = "select offname||' '||shortname "
              "  from fias.subj "
              " where aolevel=1 "
              "   and actstatus=1 "
              "   and subj=" + QString::number(subj) + " ; ";
    query_reg->exec(sql_reg);
    if (query_reg->next())
        data_pers.reg_subj_text = query_reg->value(0).toString();
    else data_pers.reg_subj_text = "";
    // район
    sql_reg = "select offname||' '||shortname "
              "  from fias.dstr "
              " where aolevel=3 "
              "   and actstatus=1 "
              "   and subj=" + QString::number(subj) + " "
              "   and dstr=" + QString::number(dstr) + " ; ";
    query_reg->exec(sql_reg);
    if (query_reg->next())
        data_pers.reg_dstr_text = query_reg->value(0).toString();
    else data_pers.reg_dstr_text = "";
    // город
    sql_reg = "select offname||' '||shortname "
              "  from fias.city "
              " where aolevel=4 "
              "   and actstatus=1 "
              "   and subj=" + QString::number(subj) + " "
              "   and dstr=" + QString::number(dstr) + " "
              "   and city=" + QString::number(city) + " ; ";
    query_reg->exec(sql_reg);
    if (query_reg->next())
        data_pers.reg_city_text = query_reg->value(0).toString();
    else data_pers.reg_city_text = "";
    // нас.пункт
    sql_reg = "select offname||' '||shortname "
              "  from fias.nasp "
              " where aolevel=6 "
              "   and actstatus=1 "
              "   and subj=" + QString::number(subj) + " "
              "   and dstr=" + QString::number(dstr) + " "
              "   and city=" + QString::number(city) + " "
              "   and nasp=" + QString::number(nasp) + " ; ";
    query_reg->exec(sql_reg);
    if (query_reg->next())
        data_pers.reg_nasp_text = query_reg->value(0).toString();
    else data_pers.reg_nasp_text = "";
    // улица
    sql_reg = "select offname||' '||shortname "
              "  from fias.strt "
              " where aolevel=7 "
              "   and actstatus=1 "
              "   and subj=" + QString::number(subj) + " "
              "   and dstr=" + QString::number(dstr) + " "
              "   and city=" + QString::number(city) + " "
              "   and nasp=" + QString::number(nasp) + " "
              "   and strt=" + QString::number(strt) + " ; ";
    query_reg->exec(sql_reg);
    if (query_reg->next())
        data_pers.reg_strt_text = query_reg->value(0).toString();
    else data_pers.reg_strt_text = "";

    delete query_reg;

    // адрес проживания по ФИАС
    data_pers.liv_index = query->value(33).toString();
    data_pers.liv_hous = query->value(39).toInt();
    data_pers.liv_corp = query->value(40).toString();
    data_pers.liv_qart = query->value(41).toString();
    subj = query->value(34).toInt();
    dstr = query->value(35).toInt();
    city = query->value(36).toInt();
    nasp = query->value(37).toInt();
    strt = query->value(38).toInt();
    QSqlQuery *query_liv = new QSqlQuery(db);
    QString sql_liv = "";
    // регион
    sql_liv = "select offname||' '||shortname "
              "  from fias.subj "
              " where aolevel=1 "
              "   and actstatus=1 "
              "   and subj=" + QString::number(subj) + " ; ";
    query_liv->exec(sql_liv);
    if (query_liv->next())
        data_pers.liv_subj_text = query_liv->value(0).toString();
    else data_pers.liv_subj_text = "";
    // район
    sql_liv = "select offname||' '||shortname "
              "  from fias.dstr "
              " where aolevel=3 "
              "   and actstatus=1 "
              "   and subj=" + QString::number(subj) + " "
              "   and dstr=" + QString::number(dstr) + " ; ";
    query_liv->exec(sql_liv);
    if (query_liv->next())
        data_pers.liv_dstr_text = query_liv->value(0).toString();
    else data_pers.liv_dstr_text = "";
    // город
    sql_liv = "select offname||' '||shortname "
              "  from fias.city "
              " where aolevel=4 "
              "   and actstatus=1 "
              "   and subj=" + QString::number(subj) + " "
              "   and dstr=" + QString::number(dstr) + " "
              "   and city=" + QString::number(city) + " ; ";
    query_liv->exec(sql_liv);
    if (query_liv->next())
        data_pers.liv_city_text = query_liv->value(0).toString();
    else data_pers.liv_city_text = "";
    // нас.пункт
    sql_liv = "select offname||' '||shortname "
              "  from fias.nasp "
              " where aolevel=6 "
              "   and actstatus=1 "
              "   and subj=" + QString::number(subj) + " "
              "   and dstr=" + QString::number(dstr) + " "
              "   and city=" + QString::number(city) + " "
              "   and nasp=" + QString::number(nasp) + " ; ";
    query_liv->exec(sql_liv);
    if (query_liv->next())
        data_pers.liv_nasp_text = query_liv->value(0).toString();
    else data_pers.liv_nasp_text = "";
    // улица
    sql_liv = "select offname||' '||shortname "
              "  from fias.strt "
              " where aolevel=7 "
              "   and actstatus=1 "
              "   and subj=" + QString::number(subj) + " "
              "   and dstr=" + QString::number(dstr) + " "
              "   and city=" + QString::number(city) + " "
              "   and nasp=" + QString::number(nasp) + " "
              "   and strt=" + QString::number(strt) + " ; ";
    query_liv->exec(sql_liv);
    if (query_liv->next())
        data_pers.liv_strt_text = query_liv->value(0).toString();
    else data_pers.liv_strt_text = "";

    delete query_liv;

    // ЕАЭС
    QSqlQuery *query_eaes = new QSqlQuery(db);
    QString sql_eaes = "";
    if ( data_pers.category==11 ) {

        if (!test_for_EAES(false)) {
            ui->bn_pers_polices->setEnabled(false);
            QMessageBox::warning(this, "Не достаточно данных?",
                                 "Не хватает данных о сроке пребывания в РФ гражданина страны ЕАЭС.\n"
                                 "Исправьте или дополните данные и повторите попытку.\n\n"
                                 "Страхование не возможно.");
            return;
        }

        sql_eaes = "select d.id, s.text||':  '||coalesce(d.doc_ser,'- ')||' № '||coalesce(d.doc_num,'БН')||',  ('||d.org_code||')  '||d.doc_org as doc_eaes, d.doc_date, d.doc_exp "
                   "  from persons_docs d "
                   "       join spr_f011 s on(s.code=d.doc_type) "
                   " where id_person=" + QString::number(data_pers.id) + " "
                   "   and doc_type in(29) ; ";
        query_eaes->exec(sql_eaes);
        if (query_eaes->next()) {
            data_pers.has_eaes_contract  = true;
            data_pers.eaes_contract      = query_eaes->value(1).toString();
            data_pers.eaes_contract_date = query_eaes->value(2).toDate();
            data_pers.eaes_contract_exp  = query_eaes->value(3).toDate();
        }
        else {
            data_pers.has_eaes_contract  = false;
            data_pers.eaes_contract      = "";
            data_pers.eaes_contract_date = QDate(1900,1,1);
            data_pers.eaes_contract_exp  = QDate(1900,1,1);
        }

        data_pers.has_eaes_document  = false;
        data_pers.eaes_document      = "";
        data_pers.eaes_document_date = QDate(1900,1,1);
        data_pers.eaes_document_exp  = QDate(1900,1,1);
    } else
    if ( data_pers.category==12
         || data_pers.category==13
         || data_pers.category==14 ) {

        if (!test_for_EAES(false)) {
            ui->bn_pers_polices->setEnabled(false);
            QMessageBox::warning(this, "Не достаточно данных?",
                                 "Не хватает данных о сроке пребывания в РФ гражданина страны ЕАЭС.\n"
                                 "Исправьте или дополните данные и повторите попытку.\n\n"
                                 "Страхование не возможно.");
            return;
        }

        sql_eaes = "select d.id, s.text||':  '||coalesce(d.doc_ser,'- ')||' № '||coalesce(d.doc_num,'БН')||',  ('||d.org_code||')  '||d.doc_org as doc_eaes, d.doc_date, d.doc_exp "
                   "  from persons_docs d "
                   "       join spr_f011 s on(s.code=d.doc_type) "
                   " where id_person=" + QString::number(data_pers.id) + " "
                   "   and doc_type in(26) ; ";
        query_eaes->exec(sql_eaes);
        if (query_eaes->next()) {
            data_pers.has_eaes_document  = true;
            data_pers.eaes_document      = query_eaes->value(1).toString();
            data_pers.eaes_document_date = query_eaes->value(2).toDate();
            data_pers.eaes_document_exp  = query_eaes->value(3).toDate();
        }
        else {
            data_pers.has_eaes_document  = false;
            data_pers.eaes_document      = "";
            data_pers.eaes_document_date = QDate(1900,1,1);
            data_pers.eaes_document_exp  = QDate(1900,1,1);
        }

        data_pers.has_eaes_contract  = false;
        data_pers.eaes_contract      = "";
        data_pers.eaes_contract_date = QDate(1900,1,1);
        data_pers.eaes_contract_exp  = QDate(1900,1,1);
    }
    delete query_eaes;
    db.commit();

    delete query;

    // откроем окно плисов
    delete polices_w;
    polices_w = new polices_wnd(db, data_app, data_pers, settings, this);
    polices_w->setWindowState( polices_w->windowState() | Qt::WindowFullScreen);

    this->setCursor(Qt::ArrowCursor);
    polices_w->exec();
}


void persons_wnd::on_bn_pers_polices_2_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Нажмите кнопку [Поиск] и выберите человека из списка.");
        return;
    }

    // проверим выделенную строку
    QModelIndexList indexes = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes.size()>0) {
        this->setCursor(Qt::WaitCursor);
        QModelIndex index = indexes.front();

        // данные застрахованного
        data_pers.id         = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();       // e.id
        data_pers.guid       = model_persons.data(model_persons.index(index.row(), 1), Qt::EditRole).toString();    // e.guid
        data_pers.note       = model_persons.data(model_persons.index(index.row(), 2), Qt::EditRole).toString();    // e.note
        data_pers.fam        = model_persons.data(model_persons.index(index.row(), 3), Qt::EditRole).toString();    // e.fam
        data_pers.im         = model_persons.data(model_persons.index(index.row(), 4), Qt::EditRole).toString();    // e.im
        data_pers.ot         = model_persons.data(model_persons.index(index.row(), 5), Qt::EditRole).toString();    // e.ot
        data_pers.sex        =(model_persons.data(model_persons.index(index.row(), 6), Qt::EditRole).isNull() ? 1 : model_persons.data(model_persons.index(index.row(), 6), Qt::EditRole).toInt());    // e.sex
        data_pers.date_birth = model_persons.data(model_persons.index(index.row(), 7), Qt::EditRole).toDate();      // e.date_birth
        data_pers.date_death = model_persons.data(model_persons.index(index.row(), 8), Qt::EditRole).toDate();      // e.date_death
        data_pers.snils      = model_persons.data(model_persons.index(index.row(), 9), Qt::EditRole).toString();    // e.snils
        data_pers.plc_birth  = model_persons.data(model_persons.index(index.row(),23), Qt::EditRole).toString();    // e.plc_birth
        data_pers.category   = model_persons.data(model_persons.index(index.row(),10), Qt::EditRole).toInt();       // e.category
        data_pers.bomj       =(model_persons.data(model_persons.index(index.row(),12), Qt::EditRole).isNull() ? 0 : model_persons.data(model_persons.index(index.row(),12), Qt::EditRole).toInt());    // e.bomj
        data_pers.phone_cell = model_persons.data(model_persons.index(index.row(),13), Qt::EditRole).toString();    // e.phone_cell
        data_pers.phone_code = model_persons.data(model_persons.index(index.row(),14), Qt::EditRole).toString();    // e.phone_code
        data_pers.phone_home = model_persons.data(model_persons.index(index.row(),15), Qt::EditRole).toString();    // e.phone_home
        data_pers.phone_work = model_persons.data(model_persons.index(index.row(),16), Qt::EditRole).toString();    // e.phone_work
        data_pers.email      = model_persons.data(model_persons.index(index.row(),17), Qt::EditRole).toString();    // e.email
        data_pers.polis_post_way= model_persons.data(model_persons.index(index.row(), 64), Qt::EditRole).toInt();   // e.polis_post_way
        if (data_pers.polis_post_way<0 || data_pers.polis_post_way>5)  data_pers.polis_post_way = 0;
        data_pers.oksm_birth = model_persons.data(model_persons.index(index.row(),18), Qt::EditRole).toInt();       // oksm_b
        // oksm_b_name
        data_pers.oksm_c     = model_persons.data(model_persons.index(index.row(),20), Qt::EditRole).toInt();       // oksm_c
        // oksm_c_name
        // firm.firm_name
        data_pers.id_reg_addr=(model_persons.data(model_persons.index(index.row(),25), Qt::EditRole).isNull() ? -1 : model_persons.data(model_persons.index(index.row(),25), Qt::EditRole).toInt());    // id_addr_reg
        data_pers.has_reg_addr= (data_pers.id_reg_addr>0);
        data_pers.reg_date   = model_persons.data(model_persons.index(index.row(),26), Qt::EditRole).toDate();      // date_reg
        data_pers.id_liv_addr=(model_persons.data(model_persons.index(index.row(),27), Qt::EditRole).isNull() ? -1 : model_persons.data(model_persons.index(index.row(),27), Qt::EditRole).toInt());    // id_addr_liv
        data_pers.has_liv_addr= (data_pers.id_liv_addr>0);
        data_pers.rep_id     =(model_persons.data(model_persons.index(index.row(),28), Qt::EditRole).isNull() ? -1 : model_persons.data(model_persons.index(index.row(),28), Qt::EditRole).toInt());    // rep_id
        data_pers.rep_fio    = model_persons.data(model_persons.index(index.row(),29), Qt::EditRole).toString();    // rep_fio
        data_pers.rep_relation=model_persons.data(model_persons.index(index.row(),30), Qt::EditRole).toInt();       // rep_relation
        QString dost         = model_persons.data(model_persons.index(index.row(),31), Qt::EditRole).toString() + "_______";
        data_pers.dost       = dost.left(6) ;
        data_pers.id_old     = model_persons.data(model_persons.index(index.row(),34), Qt::EditRole).toInt();       // po.id as id_old,
        data_pers.fam_old    = model_persons.data(model_persons.index(index.row(),35), Qt::EditRole).toString();    // old_fam,
        data_pers.has_fam_old= !(data_pers.fam_old.isEmpty());
        data_pers.im_old     = model_persons.data(model_persons.index(index.row(),36), Qt::EditRole).toString();    // old_im,
        data_pers.has_im_old= !(data_pers.im_old.isEmpty());
        data_pers.ot_old     = model_persons.data(model_persons.index(index.row(),37), Qt::EditRole).toString();    // old_ot,
        data_pers.has_ot_old= !(data_pers.ot_old.isEmpty());
        data_pers.date_birth_old= model_persons.data(model_persons.index(index.row(),38), Qt::EditRole).toDate();   // old_date_birth,
        data_pers.has_date_birth_old= data_pers.date_birth_old>QDate(1920,1,1);
        data_pers.plc_birth_old= model_persons.data(model_persons.index(index.row(),39), Qt::EditRole).toString();  // old_plc_birth,
        data_pers.has_plc_birth_old= !(data_pers.plc_birth_old.isEmpty());
        data_pers.enp_old    = model_persons.data(model_persons.index(index.row(),40), Qt::EditRole).toString();    // old_enp,
        data_pers.has_enp_old= !(data_pers.enp_old.isEmpty());
        data_pers.snils_old  = model_persons.data(model_persons.index(index.row(),41), Qt::EditRole).toString();    // old_snils,
        data_pers.has_snils_old= !(data_pers.snils_old.isEmpty());
        data_pers.sex_old    = model_persons.data(model_persons.index(index.row(),42), Qt::EditRole).toInt();       // old_sex,
        data_pers.has_sex_old= (data_pers.sex_old>0 && data_pers.sex_old<3);
        data_pers.dt_ins_old = model_persons.data(model_persons.index(index.row(),43), Qt::EditRole).toDateTime();  // old_dt_ins,
        data_pers.dt_upd_old = model_persons.data(model_persons.index(index.row(),44), Qt::EditRole).toDateTime();  // old_dt_upd,

        data_pers.assig_code_mo = model_persons.data(model_persons.index(index.row(),45), Qt::EditRole).toString(); // code_mo,
        data_pers.assig_code_mp = model_persons.data(model_persons.index(index.row(),46), Qt::EditRole).toString(); // code_mp,
        data_pers.assig_code_ms = model_persons.data(model_persons.index(index.row(),47), Qt::EditRole).toString(); // code_ms,
        data_pers.assig_snils_mt = model_persons.data(model_persons.index(index.row(),48), Qt::EditRole).toString();// snils_mt,
        data_pers.assig_type = model_persons.data(model_persons.index(index.row(),49), Qt::EditRole).toInt();       // assig_type,
        data_pers.assig_date = model_persons.data(model_persons.index(index.row(),50), Qt::EditRole).toDate();      // assig_date,
        data_pers.assig_status = model_persons.data(model_persons.index(index.row(),51), Qt::EditRole).toInt();      // assig_date,

        data_pers.id_udl = model_persons.data(model_persons.index(index.row(),63), Qt::EditRole).toInt();           // assig_date,
        data_pers.id_drp = model_persons.data(model_persons.index(index.row(),64), Qt::EditRole).toInt();           // assig_date,
        data_pers.id_polis = model_persons.data(model_persons.index(index.row(),65), Qt::EditRole).toInt();         // assig_date,
        data_pers.id_assig = model_persons.data(model_persons.index(index.row(),66), Qt::EditRole).toInt();         // assig_date,



        // прочитаем данные УДЛ, адреса, ДРП, представителя и его УДЛ
        db.transaction();
        QSqlQuery *query = new QSqlQuery(db);
        QString sql;
        sql+= "select oksm_b.code as oksm_birth, oksm_b.short_name as oksm_birth_text, oksm_c.code as oksm_c, oksm_c.short_name as oksm_c_text, ";
        sql+= "       udl.doc_type as udl_type, udl_f11.text as udl_type_text, udl.doc_ser as udl_ser, udl.doc_num as udl_num, udl.org_code as udl_orgcode, udl.doc_org as udl_org, udl.doc_date as udl_date, udl.doc_date as udl_date_from, udl.doc_exp as udl_date_to, ";
        sql+= "       drp.doc_type as drp_type, drp_f11.text as drp_type_text, drp.doc_ser as drp_ser, drp.doc_num as drp_num, drp.org_code as drp_orgcode, drp.doc_org as drp_org, drp.doc_date as drp_date, drp.doc_date as drp_date_from, drp.doc_exp as drp_date_to, ";
        sql+= "       rep.id, e.rep_fio, rep.fam, rep.im, rep.ot, e.rep_relation, rep.phone_cell, ";
        sql+= "       rep.phone_code, rep.phone_home, rep.phone_work, rep.phone_cell, ";
        sql+= "       rep_udl.doc_type as rep_udl_type, rep_f11.text as rep_udl_type_text, rep_udl.doc_ser as rep_udl_ser, rep_udl.doc_num as rep_udl_num, rep_udl.doc_date as rep_udl_date, rep_udl.org_code as rep_udl_orgcode, rep_udl.doc_org as rep_udl_org ";
        sql+= "from persons e ";
        sql+= "     left join spr_oksm oksm_b on(oksm_b.code=e.oksm_birth) ";
        sql+= "     left join spr_oksm oksm_c on(oksm_c.code=e.oksm_c) ";
        sql+= "     left join persons_docs udl on ( udl.id in (select * from get_pers_udl(" + QString::number(data_pers.id) + ", NULL))) ";
        sql+= "     left join spr_f011 udl_f11 on(udl_f11.code=udl.doc_type) ";
        sql+= "     left join persons_docs drp on ( drp.id in (select * from get_pers_drp(" + QString::number(data_pers.id) + ", NULL))) ";
        sql+= "     left join spr_f011 drp_f11 on(drp_f11.code=drp.doc_type) ";
        sql+= "     left join persons rep on(rep.id=e.rep_id) ";
        sql+= "     left join persons_docs rep_udl on( udl.id in (select * from get_pers_udl(" + QString::number(data_pers.rep_id) + ", NULL))) ";
        sql+= "     left join spr_f011 rep_f11 on(rep_f11.code=rep_udl.doc_type) ";
        sql+= "where e.id=" + QString::number(data_pers.id) + " ; ";

        if (!mySQL.exec(this, sql, QString("Для застрахованного - данные УДЛ, адреса, ДРП, представителя и его УДЛ"), *query, true, db, data_app) || query->size()<1) {
            // не удалось получить данные о застрахованном
            QMessageBox::critical(this, "Ошибка при получении данных", "При запросе подробных данных о застрахованном произошла непредвиденная ошибка.\n\nОперация отменена.");
            db.rollback();
            return;
        }
        query->next();
        data_pers.oksm_birth = query->value(0).toInt();
        data_pers.oksm_birth_text = query->value(1).toString();
        data_pers.oksm_c = query->value(2).toInt();
        data_pers.oksm_c_text = query->value(3).toString();

        data_pers.udl_type = query->value(4).toInt();
        data_pers.udl_type_text = query->value(5).toString();
        data_pers.udl_ser = query->value(6).toString();
        data_pers.udl_num = query->value(7).toString();
        data_pers.udl_org_code = query->value(8).toString();
        data_pers.udl_org = query->value(9).toString();
        data_pers.udl_date = query->value(10).toDate();
        //data_pers.udl_date_from = query->value(11).toDate();
        data_pers.udl_date_exp = query->value(12).toDate();
        if (!data_pers.udl_date_exp.isValid())
            data_pers.udl_date_exp = QDate(1900,1,1);
        data_pers.udl_date_exp_f = !(query->value(12).isNull()) &&
                                   (data_pers.udl_date_exp>QDate(1920,1,1));

        data_pers.has_drp = !(query->value(13).isNull());
        data_pers.drp_type = query->value(13).toInt();
        data_pers.drp_type_text = query->value(14).toString();
        data_pers.drp_ser = query->value(15).toString();
        data_pers.drp_num = query->value(16).toString();
        data_pers.drp_org_code = query->value(17).toString();
        data_pers.drp_org = query->value(18).toString();
        data_pers.drp_date = query->value(19).toDate();
        //data_pers.drp_date_from = query->value(20).toDate();
        data_pers.drp_date_exp = query->value(21).toDate();
        if (!data_pers.drp_date_exp.isValid())
            data_pers.drp_date_exp = QDate(1900,1,1);
        data_pers.drp_date_exp_f = !(query->value(21).isNull()) &&
                                 (data_pers.drp_date_exp>QDate(1920,1,1));

        data_pers.rep_id = query->value(22).toInt();
        data_pers.rep_relation = query->value(27).toInt();
        data_pers.rep_fio = query->value(23).toString();
        data_pers.rep_fam = query->value(24).toString();
        data_pers.rep_im = query->value(25).toString();
        data_pers.rep_ot = query->value(26).toString();
        data_pers.rep_udl_type = query->value(33).toInt();
        data_pers.rep_udl_type_text = query->value(34).toString();
        data_pers.rep_udl_ser = query->value(35).toString();
        data_pers.rep_udl_num = query->value(38).toString();
        data_pers.rep_udl_orgcode = query->value(38).toString();
        data_pers.rep_udl_org = query->value(39).toString();
        data_pers.rep_udl_date = query->value(37).toDate();
        data_pers.rep_phone_code = query->value(29).toString();
        data_pers.rep_phone_home = query->value(30).toString();
        data_pers.rep_phone_work = query->value(31).toString();
        data_pers.rep_phone_cell = query->value(32).toString();

        // проверим наличие кодов ФИАС
        if ( !test_for_FIAS(true) ) {
            db.rollback();
            return;
        }
        // проверим наличие УДЛ
        if ( !test_for_UDL(true, true) ) {
            db.rollback();
            return;
        }

        db.commit();

        // откроем окно плисов
        delete polices_w;
        polices_w = new polices_wnd(db, data_app, data_pers, settings, this);
        polices_w->setWindowState( polices_w->windowState() | Qt::WindowFullScreen);

        ui->bn_pers_pan_old_data->setText(data_pers.id_old>0 ? "Удалить старые данные" : "Добавить старые данные");
        ui->bn_pers_pan_old_data->setChecked(data_pers.id_old>0);

        this->setCursor(Qt::ArrowCursor);
        polices_w->exec();

    } else {
        QMessageBox::warning(this, "Ничего не выбрано!", "Ничего не выбрано!");
    }
}

void persons_wnd::on_act_PVP_n_VS_triggered() {
    // откроем окно "пункты выдачи и ВС"
    delete pvp_n_vs_w;
    pvp_n_vs_w = new pvp_n_vs_wnd(db, data_app, data_pers, settings, this);
    pvp_n_vs_w->exec();
}

void persons_wnd::on_act_blanks_triggered() {
    // откроем окно "Бланки полисов"
    delete blanks_w;
    s_data_blank data_blank;
    data_blank.id = -1;
    data_blank.id_person = data_pers.id;
    data_blank.fam       = data_pers.fam;
    data_blank.im        = data_pers.im;
    data_blank.ot        = data_pers.ot;
    data_blank.date_birth= data_pers.date_birth;
    data_blank.snils     = data_pers.snils;

    QModelIndexList indexes = ui->tab_polises->selectionModel()->selection().indexes();
    if (indexes.size()>0) {
        QModelIndex index = indexes.front();
        data_blank.id_polis = model_polises.data( model_polises.index(index.row(), 0), Qt::EditRole).toInt();
        data_blank.vs_num   = model_polises.data( model_polises.index(index.row(), 9), Qt::EditRole).toString();
        data_blank.pol_ser  = model_polises.data( model_polises.index(index.row(),10), Qt::EditRole).toString();
        data_blank.pol_num  = model_polises.data( model_polises.index(index.row(),11), Qt::EditRole).toString();
        data_blank.enp      = model_polises.data( model_polises.index(index.row(), 4), Qt::EditRole).toString();
    } else {
        data_blank.id_polis = -1;
        data_blank.vs_num   = "";
        data_blank.pol_ser  = "";
        data_blank.pol_num  = "";
        data_blank.enp      = "";
    }

    blanks_w = new blanks_wnd(db, data_blank, data_app, settings, this);
    blanks_w->exec();
}

void persons_wnd::on_ln_pers_pan_plc_birth_editingFinished() {
    ui->ch_pers_pan_ot->setChecked(!(ui->ln_pers_pan_ot->text().isEmpty()));

    QString s = ui->line_pers_pan_snils->text().trimmed().replace(" ","").replace("-","");
    ui->ch_pers_pan_snils->setChecked(!s.isEmpty());
    b_need_save(true);
}

//void persons_wnd::on_ln_pers_pan_fam_editingFinished()
//{  b_need_save(true);  }
//void persons_wnd::on_ln_pers_pan_im_editingFinished()
//{  b_need_save(true);  }
//void persons_wnd::on_ln_pers_pan_ot_editingFinished()
//{  b_need_save(true);  }
void persons_wnd::on_date_pers_pan_birth_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_line_pers_pan_snils_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_date_pers_pan_death_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_combo_pers_pan_oksm_rname_activated(const QString &arg1) {
    data_pers.oksm_birth = ui->combo_pers_pan_oksm_rname->currentData().toInt();
    b_need_save(true);
}
void persons_wnd::on_combo_pers_pan_oksm_cname_activated(const QString &arg1) {
    data_pers.oksm_c = ui->combo_pers_pan_oksm_cname->currentData().toInt();
    ui->ch_stateless->setChecked(data_pers.oksm_c<0);
    b_need_save(true);
}
void persons_wnd::on_ln_pers_pan_reg_hous_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_reg_corp_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_reg_qart_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_reg_index_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_reg_text_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_date_pers_pan_reg_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_liv_hous_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_liv_corp_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_liv_qart_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_liv_index_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_liv_text_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_phone_code_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_phone_work_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_phone_home_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_phone_cell_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_ln_pers_pan_email_editingFinished()
{  b_need_save(true);  }
void persons_wnd::on_spin_pers_pan_category_editingFinished()
{  b_need_save(true);  }

void persons_wnd::on_ch_eaes_reside_exp_clicked(bool checked) {
    ui->date_eaes_reside_exp->setEnabled(checked);
    b_need_save(true);
}
void persons_wnd::on_line_eaes_residence_editingFinished()
{  b_need_save(true);  }

void persons_wnd::on_ch_docs_clicked(bool checked) {
    ui->pan_docs_tab->setVisible(checked);
    ui->pan_docs_tab->setEnabled(checked);
    on_split_main_splitterMoved(0, 1);
    b_need_save();
}
void persons_wnd::on_ch_photo_clicked(bool checked) {
    ui->pan_docs_photo->setVisible(checked);
    ui->pan_docs_photo->setEnabled(checked);
    on_split_main_splitterMoved(0, 1);
    b_need_save();
}
/*void persons_wnd::on_ch_address_clicked(bool checked) {
    ui->pan_person_address->setVisible(checked);
    on_split_main_splitterMoved(0, 1);
    b_need_save();
}*/
void persons_wnd::on_ch_phones_clicked(bool checked) {
    ui->pan_phones->setVisible(checked);
    ui->pan_phones->setEnabled(checked);
    on_split_main_splitterMoved(0, 1);
    b_need_save();
}
void persons_wnd::on_ch_assig_clicked(bool checked) {
    ui->pan_assig->setVisible(checked);
    ui->pan_assig->setEnabled(checked);
    ui->bn_pers_assig_gaps->setEnabled(true);
    on_split_main_splitterMoved(0, 1);
    b_need_save();
}
void persons_wnd::on_ch_country_clicked(bool checked) {
    ui->pan_country->setVisible(checked);
    ui->pan_country->setEnabled(checked);
    on_split_main_splitterMoved(0, 1);
    b_need_save();
}
void persons_wnd::on_ch_rep_clicked(bool checked) {
    ui->pan_rep->setVisible(checked);
    on_split_main_splitterMoved(0, 1);
    b_need_save();
}
void persons_wnd::on_ch_person_clicked(bool checked) {
    ui->pan_person->setVisible(checked);
    ui->pan_person->setEnabled(checked);
    if ( checked && data_app.screen_small ) {
        ui->ch_person_old->setChecked(false);
        on_ch_person_old_clicked(false);
    }
    on_split_main_splitterMoved(0, 1);
    b_need_save();
}
void persons_wnd::on_ch_person_old_clicked(bool checked) {
    ui->pan_person_old->setVisible(checked);
    ui->pan_person_old->setEnabled(checked);
    ui->bn_pers_pan_old_data->setEnabled(checked);
    if ( checked && data_app.screen_small ) {
        ui->ch_person->setChecked(false);
        on_ch_person_clicked(false);
    }
    on_split_main_splitterMoved(0, 1);
    b_need_save();
}
void persons_wnd::on_ch_eaes_clicked(bool checked) {
    ui->pan_eaes->setVisible(checked);
    on_split_main_splitterMoved(0, 1);
    b_need_save();
}



void persons_wnd::on_act_work_calendar_triggered() {
    // откроем окно "Рабочий календарь"
    delete work_calendar_w;
    work_calendar_w = new work_calendar_wnd(db, data_app, settings, this);
    work_calendar_w->exec();
}

void persons_wnd::on_ln_pers_pan_fam_old_textChanged(const QString &arg1) {
    data_pers.fam_old = arg1.trimmed();
    ui->ch_pers_pan_fam_old->setChecked(!(arg1.trimmed().isEmpty()));
    ui->lab_pers_pan_fio_old->setText( ui->ln_pers_pan_fam_old->text() + " " + ui->ln_pers_pan_im_old->text() + " " + ui->ln_pers_pan_ot_old->text() );
    b_need_save(true);
}
void persons_wnd::on_ln_pers_pan_im_old_textChanged(const QString &arg1) {
    data_pers.im_old = arg1.trimmed();
    ui->ch_pers_pan_im_old->setChecked(!(arg1.trimmed().isEmpty()));
    ui->lab_pers_pan_fio_old->setText( ui->ln_pers_pan_fam_old->text() + " " + ui->ln_pers_pan_im_old->text() + " " + ui->ln_pers_pan_ot_old->text() );
    b_need_save(true);
}
void persons_wnd::on_ln_pers_pan_ot_old_textChanged(const QString &arg1) {
    data_pers.ot_old = arg1.trimmed();
    ui->ch_pers_pan_ot_old->setChecked(!(arg1.trimmed().isEmpty()));
    ui->lab_pers_pan_fio_old->setText( ui->ln_pers_pan_fam_old->text() + " " + ui->ln_pers_pan_im_old->text() + " " + ui->ln_pers_pan_ot_old->text() );
    b_need_save(true);
}
void persons_wnd::on_combo_pers_pan_sex_old_currentIndexChanged(int index) {
    data_pers.sex_old = index;
    ui->ch_pers_pan_sex_old->setChecked(index!=0);
    ui->lab_pers_pan_fio_old->setText( ui->ln_pers_pan_fam_old->text() + " " + ui->ln_pers_pan_im_old->text() + " " + ui->ln_pers_pan_ot_old->text() );
    b_need_save(true);
}
void persons_wnd::on_date_pers_pan_birth_old_dateChanged(const QDate &date) {
    data_pers.date_birth_old = date;
    ui->ch_pers_pan_date_birth_old->setChecked(date>=QDate(1920,1,1));
    ui->lab_pers_pan_fio_old->setText( ui->ln_pers_pan_fam_old->text() + " " + ui->ln_pers_pan_im_old->text() + " " + ui->ln_pers_pan_ot_old->text() );
    b_need_save(true);
}
void persons_wnd::on_line_pers_pan_snils_old_textChanged(const QString &arg1) {
    data_pers.snils_old = arg1.trimmed().replace(" ","").replace("-","");
    ui->ch_pers_pan_snils_old->setChecked(!(data_pers.snils_old.isEmpty()));
    ui->lab_pers_pan_fio_old->setText( ui->ln_pers_pan_fam_old->text() + " " + ui->ln_pers_pan_im_old->text() + " " + ui->ln_pers_pan_ot_old->text() );
    b_need_save(true);
}
void persons_wnd::on_line_pers_pan_enp_old_textChanged(const QString &arg1) {
    data_pers.enp_old = arg1.trimmed().replace(" ","").replace("-","");
    ui->ch_pers_pan_enp_old->setChecked(!(data_pers.enp_old.isEmpty()));
    ui->lab_pers_pan_fio_old->setText( ui->ln_pers_pan_fam_old->text() + " " + ui->ln_pers_pan_im_old->text() + " " + ui->ln_pers_pan_ot_old->text() );
    b_need_save(true);
}
void persons_wnd::on_ln_pers_pan_plc_birth_old_textChanged(const QString &arg1) {
    data_pers.plc_birth_old = arg1.trimmed();
    ui->ch_pers_pan_plc_birth_old->setChecked(!(arg1.trimmed().isEmpty()));
    ui->lab_pers_pan_fio_old->setText( ui->ln_pers_pan_fam_old->text() + " " + ui->ln_pers_pan_im_old->text() + " " + ui->ln_pers_pan_ot_old->text() );
    b_need_save(true);
}

void persons_wnd::on_ch_pers_pan_fam_old_clicked(bool checked) {
    if (!checked) ui->ln_pers_pan_fam_old->clear();  }
void persons_wnd::on_ch_pers_pan_im_old_clicked(bool checked) {
    if (!checked) ui->ln_pers_pan_im_old->clear();  }
void persons_wnd::on_ch_pers_pan_ot_old_clicked(bool checked) {
    if (!checked) ui->ln_pers_pan_ot_old->clear();  }
void persons_wnd::on_ch_pers_pan_sex_old_clicked(bool checked) {
    if (!checked) ui->combo_pers_pan_sex_old->setCurrentIndex(0);  }
void persons_wnd::on_ch_pers_pan_date_birth_old_clicked(bool checked) {
    if (!checked) ui->date_pers_pan_birth_old->setDate(QDate(1900,1,1));  }
void persons_wnd::on_ch_pers_pan_snils_old_clicked(bool checked) {
    if (!checked) ui->line_pers_pan_snils_old->clear();  }
void persons_wnd::on_ch_pers_pan_enp_old_clicked(bool checked) {
    if (!checked) ui->line_pers_pan_enp_old->clear();  }
void persons_wnd::on_ch_pers_pan_plc_birth_old_clicked(bool checked) {
    if (!checked) ui->ln_pers_pan_plc_birth_old->clear();  }

void persons_wnd::on_ch_pers_pan_reg_toggled(bool checked) {
    ui->lab_pers_pan_address_reg->setText(
                ( data_pers.reg_hous>0 ? (
                    data_pers.reg_subj_text.toUpper() + ", " +
                    data_pers.reg_dstr_text.toUpper() + ", " +
                    data_pers.reg_city_text.toUpper() + ", " +
                    data_pers.reg_nasp_text.toUpper() + ", " +
                    data_pers.reg_strt_text.toUpper() + ", " +
                    (data_pers.reg_hous<2000 ? ("д." + QString::number(data_pers.reg_hous)) : "") +
                    //"д." + QString::number(data_pers.reg_hous) +
                    (data_pers.reg_corp.isEmpty() ? "" : "/" + data_pers.reg_corp.toUpper() + "") +
                    (data_pers.reg_qart.isEmpty() ? "" : ", кв." + data_pers.reg_qart.toUpper() + "")
                    ) : "" ));

    ui->lab_pers_pan_address_liv->setText(
                ( data_pers.liv_hous>0 ? (
                    data_pers.liv_subj_text.toUpper() + ", " +
                    data_pers.liv_dstr_text.toUpper() + ", " +
                    data_pers.liv_city_text.toUpper() + ", " +
                    data_pers.liv_nasp_text.toUpper() + ", " +
                    data_pers.liv_strt_text.toUpper() + ", " +
                    (data_pers.liv_hous<2000 ? ("д." + QString::number(data_pers.liv_hous)) : "") +
                    //"д." + QString::number(data_pers.liv_hous) +
                    (data_pers.liv_corp.isEmpty() ? "" : "/" + data_pers.liv_corp.toUpper() + "") +
                    (data_pers.liv_qart.isEmpty() ? "" : ", кв." + data_pers.liv_qart.toUpper() + "")
                    ) : "" )
                );
}
void persons_wnd::on_ch_pers_pan_liv_toggled(bool checked) {
    ui->lab_pers_pan_address_reg->setText(
                ( data_pers.reg_hous>0 ? (
                    data_pers.reg_subj_text.toUpper() + ", " +
                    data_pers.reg_dstr_text.toUpper() + ", " +
                    data_pers.reg_city_text.toUpper() + ", " +
                    data_pers.reg_nasp_text.toUpper() + ", " +
                    data_pers.reg_strt_text.toUpper() + ", " +
                    (data_pers.reg_hous<2000 ? ("д." + QString::number(data_pers.reg_hous)) : "") +
                    //"д." + QString::number(data_pers.reg_hous) +
                    (data_pers.reg_corp.isEmpty() ? "" : "/" + data_pers.reg_corp.toUpper() + "") +
                    (data_pers.reg_qart.isEmpty() ? "" : ", кв." + data_pers.reg_qart.toUpper() + "")
                    ) : "" ));

    ui->lab_pers_pan_address_liv->setText(
                ( data_pers.liv_hous>0 ? (
                    data_pers.liv_subj_text.toUpper() + ", " +
                    data_pers.liv_dstr_text.toUpper() + ", " +
                    data_pers.liv_city_text.toUpper() + ", " +
                    data_pers.liv_nasp_text.toUpper() + ", " +
                    data_pers.liv_strt_text.toUpper() + ", " +
                    (data_pers.liv_hous<2000 ? ("д." + QString::number(data_pers.liv_hous)) : "") +
                    //"д." + QString::number(data_pers.liv_hous) +
                    (data_pers.liv_corp.isEmpty() ? "" : "/" + data_pers.liv_corp.toUpper() + "") +
                    (data_pers.liv_qart.isEmpty() ? "" : ", кв." + data_pers.liv_qart.toUpper() + "")
                    ) : "" )
                );
}

void persons_wnd::on_bn_pers_pan_rep_clicked() {
    // откроем окно "Рабочий календарь"
    delete representers_w;
    representers_w = new representers_wnd(db, data_app, settings, this);
    representers_w->exec();
    int rep_id = representers_w->rep_id;
    QString rep_fio = representers_w->rep_fio;
    int rep_sex = representers_w->rep_sex;
    if (rep_id>0) {
        if (rep_id==data_pers.id) {
            QMessageBox::information(this, "Недопустимое значение", "Человек не может быть представителем для себя самого.\n\nоперация отменена.");
        } else {
            ui->line_pers_pan_rep->setText(rep_fio);
            ui->combo_pers_pan_rep_rel->setCurrentIndex(rep_sex);

            data_pers.rep_id = rep_id;
            data_pers.rep_fio = rep_fio;
            b_need_save(true);
        }
    }
}

void persons_wnd::on_line_pers_pan_rep_textChanged(const QString &arg1) {
    ui->lab_pers_pan_fio_rep->setText(ui->line_pers_pan_rep->text());
}

void persons_wnd::on_act_INI_triggered() {
    QString pss;
    do {
        pss = QInputDialog::getText(this,"Введите пароль администратора",
                                    "Для открытия окна настроек нужно ввести пароль администратора настроек.\n"
                                    "Пустая строка - отмена открытия окна настроек",
                                    QLineEdit::Password);
        if (pss.isEmpty())
            return;
    } while (pss!="650325");

    // откроем окно "Настройки программы"
    delete settings_w;
    settings_w = new settings_wnd(db, data_app, settings, this);
    settings_w->exec();

    statusBar()->showMessage("программа: \"Полисы ОМС\", версия:" + data_app.version + ";  сервер: " + data_app.db_host + ";  БД: " + data_app.db_name + ";  версия: " + data_app.db_vers);
}

// отображение полисов выбранного застрахованного
void persons_wnd::on_tab_persons_clicked(const QModelIndex &index) {
    this->setCursor(Qt::WaitCursor);

    // ID застрахованного
    data_pers.id   = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();      // persons.id
    data_pers.guid = model_persons.data(model_persons.index(index.row(), 1), Qt::EditRole).toString();   // persons.guid
    data_pers.note = model_persons.data(model_persons.index(index.row(), 2), Qt::EditRole).toString();   // persons.note
    ui->line_note->setText(data_pers.note);
    data_pers.fam  = model_persons.data(model_persons.index(index.row(), 3), Qt::EditRole).toString();   // persons.fam
    data_pers.im   = model_persons.data(model_persons.index(index.row(), 4), Qt::EditRole).toString();   // persons.im
    data_pers.ot   = model_persons.data(model_persons.index(index.row(), 5), Qt::EditRole).toString();   // persons.ot
    data_pers.sex  = model_persons.data(model_persons.index(index.row(), 6), Qt::EditRole).toInt();      // persons.sex
    data_pers.date_birth  = model_persons.data(model_persons.index(index.row(), 7), Qt::EditRole).toDate();   // persons.date_birth
    data_pers.date_death  = model_persons.data(model_persons.index(index.row(), 8), Qt::EditRole).toDate();   // persons.date_death
    data_pers.snils       = model_persons.data(model_persons.index(index.row(), 9), Qt::EditRole).toString(); // persons.snils
    data_pers.id_reg_addr = model_persons.data(model_persons.index(index.row(),25), Qt::EditRole).toInt();    // id_reg_addr
    data_pers.id_liv_addr = model_persons.data(model_persons.index(index.row(),27), Qt::EditRole).toInt();    // id_liv_addr
    data_pers.status      = model_persons.data(model_persons.index(index.row(),22), Qt::EditRole).toInt();    // status


    if ( data_pers.status==-666 ) {
        ui->bn_pers_archive->setEnabled(false);
        ui->bn_pers_unarch->setEnabled(false);
    } else if ( data_pers.status<=-500 || data_pers.status>=500 ) {
        ui->bn_pers_archive->setEnabled(false);
        ui->bn_pers_unarch->setEnabled(true);
    } else {
        ui->bn_pers_archive->setEnabled(true);
        ui->bn_pers_unarch->setEnabled(false);
    }

    ui->lab_pers_status->setEnabled(true);
    ui->ch_pers_status->setEnabled(true);
    ui->ch_pers_status->setChecked(false);

    data_pers.status = model_persons.data(model_persons.index(index.row(), 22), Qt::EditRole).toInt();  // persons.status
    ui->combo_pers_status->setCurrentIndex(ui->combo_pers_status->findData(data_pers.status));
    ui->combo_pers_status->setEnabled(false);

    data_pers._date_insure_begin = model_persons.data(model_persons.index(index.row(), 68), Qt::EditRole).toDate();
    data_pers._date_insure_end   = model_persons.data(model_persons.index(index.row(), 69), Qt::EditRole).toDate();
    data_pers.id_polis           = model_persons.data(model_persons.index(index.row(), 65), Qt::EditRole).toInt();

    ui->ch_insure_begin->setChecked( !(model_persons.data(model_persons.index(index.row(), 68), Qt::EditRole).isNull()) );
    ui->ch_insure_end->setChecked( !(model_persons.data(model_persons.index(index.row(), 69), Qt::EditRole).isNull()) );
    ui->date_insure_begin->setDate( (model_persons.data(model_persons.index(index.row(), 68), Qt::EditRole).isNull()
                                     ? QDate(1900,1,1)
                                     : data_pers._date_insure_begin) );
    ui->date_insure_end->setDate( (model_persons.data(model_persons.index(index.row(), 69), Qt::EditRole).isNull()
                                   ? QDate(1900,1,1)
                                   : data_pers._date_insure_end) );
    ui->ch_insure_begin->setEnabled(false);
    ui->ch_insure_end->setEnabled(false);
    ui->date_insure_begin->setEnabled(false);
    ui->date_insure_end->setEnabled(false);

    //ui->ch_insure_begin->setChecked(!(model_persons.data(model_persons.index(index.row(), 68), Qt::EditRole).isNull()));
    //ui->ch_insure_end->setChecked(!(model_persons.data(model_persons.index(index.row(), 69), Qt::EditRole).isNull()));
    ui->date_insure_begin->setVisible(!(model_persons.data(model_persons.index(index.row(), 68), Qt::EditRole).isNull()));
    ui->date_insure_end->setVisible(!(model_persons.data(model_persons.index(index.row(), 69), Qt::EditRole).isNull()));

    refresh_polises_tab(data_pers.id, data_pers.id_polis);

    ui->ch_pers_dopdata->setEnabled(true);
    ui->te_pers_dopdata->setVisible(ui->ch_pers_dopdata->isChecked());
    if (ui->ch_pers_dopdata->isChecked())
        refresh_pers_dopdata();

    if (data_pers.id>=0) {
        ui->bn_save_note->setEnabled(true);
        ui->bn_delete_note->setEnabled(true);
        ui->line_note->setEnabled(true);
    }

    this->setCursor(Qt::ArrowCursor);
}


// отображение полисов выбранного застрахованного
void persons_wnd::refresh_pers_dopdata() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите полис, события которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
        return;
    }

    // проверим выделенную строку персоны
    QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes_pers.size()>0) {
        this->setCursor(Qt::WaitCursor);
        QModelIndex index_pers = indexes_pers.front();

        // ID застрахованного
        data_pers.id   = model_persons.data(model_persons.index(index_pers.row(), 0), Qt::EditRole).toInt();      // persons.id
        data_pers.guid = model_persons.data(model_persons.index(index_pers.row(), 1), Qt::EditRole).toString();   // persons.guid
        data_pers.note = model_persons.data(model_persons.index(index_pers.row(), 2), Qt::EditRole).toString();   // persons.note
        data_pers.fam  = model_persons.data(model_persons.index(index_pers.row(), 3), Qt::EditRole).toString();   // persons.fam
        data_pers.im   = model_persons.data(model_persons.index(index_pers.row(), 4), Qt::EditRole).toString();   // persons.im
        data_pers.ot   = model_persons.data(model_persons.index(index_pers.row(), 5), Qt::EditRole).toString();   // persons.ot
        data_pers.sex  = model_persons.data(model_persons.index(index_pers.row(), 6), Qt::EditRole).toInt();      // persons.sex
        data_pers.date_birth  = model_persons.data(model_persons.index(index_pers.row(), 7), Qt::EditRole).toDate();  // persons.date_birth
        data_pers.date_death  = model_persons.data(model_persons.index(index_pers.row(), 8), Qt::EditRole).toDate();  // persons.date_death
        data_pers.reg_text  = model_persons.data(model_persons.index(index_pers.row(),81), Qt::EditRole).toInt();     // reg_text
        data_pers.liv_text  = model_persons.data(model_persons.index(index_pers.row(),82), Qt::EditRole).toInt();     // liv_text

        data_pers.id_polis          = model_persons.data(model_persons.index(index_pers.row(), 65), Qt::EditRole).toInt();


        ui->ch_pers_dopdata->setEnabled(true);
        ui->te_pers_dopdata->setVisible(ui->ch_pers_dopdata->isChecked());

        QString dopdata_str = data_pers.fam + " " + data_pers.im + " " + data_pers.ot + ", д/р " + data_pers.date_birth.toString("dd.MM.yyyy") + " \n";

        if (ui->ch_pers_dopdata->isChecked()) {
            QString sql_pers_docs = "select d.id, f.text as type_text, d.doc_ser, d.doc_num, d.doc_date, d.doc_exp, d.status, d.org_code, d.doc_org "
                                    "  from persons_docs d "
                                    "       left join spr_f011 f on(d.doc_type=f.code) "
                                    " where d.id_person=" + QString::number(data_pers.id) + " "
                                    "   and d.status=1 and d.doc_date<CURRENT_DATE and ((d.doc_exp is NULL) or (d.doc_exp>CURRENT_DATE)) "
                                    " order by d.id ; ";
            QSqlQuery *query_pers_docs = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_pers_docs, "Чтение документов застрахованного", *query_pers_docs, true, db, data_app)) {
                QMessageBox::critical(this, "Непредвиденная ошибка",
                                      "При попытке прочитать данные документов застрахованного произошла непредвиденная ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }

            dopdata_str += "\nДОКУМЕНТЫ:\n";
            int n_doc = 1;
            while (query_pers_docs->next()) {
                QString doc_type_text, doc_ser, doc_num, doc_orgcode, doc_org;
                QDate doc_date, doc_exp;
                int doc_status;
                doc_type_text = query_pers_docs->value(1).toString();
                doc_ser       = query_pers_docs->value(2).toString();
                doc_num       = query_pers_docs->value(3).toString();
                doc_date      = query_pers_docs->value(4).toDate();
                doc_exp       = query_pers_docs->value(5).toDate();
                doc_status    = query_pers_docs->value(6).toInt();
                doc_orgcode   = query_pers_docs->value(7).toString();
                doc_org       = query_pers_docs->value(8).toString();

                dopdata_str += "  " + QString::number(n_doc) + ") " + doc_type_text + ": " + doc_ser + " " + doc_num + ", от " + doc_date.toString("dd.MM.yyyy") + (doc_exp>QDate(1920,1,1) ? (" до " + doc_exp.toString("dd.MM.yyyy")) : "")  + " \n" + doc_orgcode + " " + doc_org + "\n"/* + (doc_status>0 ? "ДЕЙСТВ" : "НЕ ДЕЙСТВ")  + " \n"*/;
                n_doc++;
            }
            delete query_pers_docs;

            QString sql_adr_reg = "select subj_name, dstr_name, city_name, nasp_name, strt_name, house, corp, quart, fias_aoid, fias_houseid "
                                  " from addresses "
                                  " where id=" + QString::number(data_pers.id_reg_addr) + "; ";
            QSqlQuery *query_adr_reg = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_adr_reg, "Чтение адреса регистрации", *query_adr_reg, true, db, data_app))
                QMessageBox::critical(this, "Непредвиденная ошибка", "При попытке прочитать адрес регистрации произошла непредвиденная ошибка.\n\nОперация отменена.");
            if (query_adr_reg->next()) {
                data_pers.reg_subj_text = query_adr_reg->value(0).toString();
                data_pers.reg_dstr_text = query_adr_reg->value(1).toString();
                data_pers.reg_city_text = query_adr_reg->value(2).toString();
                data_pers.reg_nasp_text = query_adr_reg->value(3).toString();
                data_pers.reg_strt_text = query_adr_reg->value(4).toString();
                data_pers.reg_hous      = query_adr_reg->value(5).toInt();
                data_pers.reg_corp      = query_adr_reg->value(6).toString();
                data_pers.reg_qart      = query_adr_reg->value(7).toString();
                data_pers.reg_AOID      = query_adr_reg->value(8).toString();
                data_pers.reg_HOUSEID   = query_adr_reg->value(9).toString();
                if (data_pers.reg_city_text==data_pers.reg_nasp_text) {
                    data_pers.reg_nasp_text="";
                }
            } else {
                data_pers.reg_subj_text = "";
                data_pers.reg_dstr_text = "";
                data_pers.reg_city_text = "";
                data_pers.reg_nasp_text = "";
                data_pers.reg_strt_text = "";
                data_pers.reg_hous      = 0;
                data_pers.reg_corp      = "";
                data_pers.reg_qart      = "";
                data_pers.reg_AOID      = "";
                data_pers.reg_HOUSEID   = "";
            }
            delete query_adr_reg;
            dopdata_str += "\nАДРЕС РЕГИСТРАЦИИ:\n  " + data_pers.reg_subj_text + ", " + data_pers.reg_dstr_text + ", " + data_pers.reg_city_text + ", " + data_pers.reg_nasp_text + ", " + data_pers.reg_strt_text + ", " + QString::number(data_pers.reg_hous) + data_pers.reg_corp + ", кв." + data_pers.reg_qart + "\n";
            dopdata_str += "AOID = " + data_pers.reg_AOID + "\n";
            dopdata_str += "HOUSEID = " + data_pers.reg_HOUSEID + "\n";

            // адрес проживания
            QString sql_adr_liv = "select subj_name, dstr_name, city_name, nasp_name, strt_name, house, corp, quart, fias_aoid, fias_houseid "
                                  " from addresses "
                                  " where id=" + QString::number(data_pers.id_liv_addr) + "; ";
            QSqlQuery *query_adr_liv = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_adr_liv, "Чтение адреса проживания", *query_adr_liv, true, db, data_app))
                QMessageBox::critical(this, "Непредвиденная ошибка", "При попытке прочитать адрес проживания произошла непредвиденная ошибка.\n\nОперация отменена.");
            if (query_adr_liv->next()) {
                data_pers.liv_subj_text = query_adr_liv->value(0).toString();
                data_pers.liv_dstr_text = query_adr_liv->value(1).toString();
                data_pers.liv_city_text = query_adr_liv->value(2).toString();
                data_pers.liv_nasp_text = query_adr_liv->value(3).toString();
                data_pers.liv_strt_text = query_adr_liv->value(4).toString();
                data_pers.liv_hous      = query_adr_liv->value(5).toInt();
                data_pers.liv_corp      = query_adr_liv->value(6).toString();
                data_pers.liv_qart      = query_adr_liv->value(7).toString();
                data_pers.liv_AOID      = query_adr_liv->value(8).toString();
                data_pers.liv_HOUSEID   = query_adr_liv->value(9).toString();
                if (data_pers.liv_city_text==data_pers.liv_nasp_text) {
                    data_pers.liv_nasp_text="";
                }
            } else {
                data_pers.liv_subj_text = "";
                data_pers.liv_dstr_text = "";
                data_pers.liv_city_text = "";
                data_pers.liv_nasp_text = "";
                data_pers.liv_strt_text = "";
                data_pers.liv_hous      = 0;
                data_pers.liv_corp      = "";
                data_pers.liv_qart      = "";
                data_pers.liv_AOID      = "";
                data_pers.liv_HOUSEID   = "";
            }
            delete query_adr_liv;
            dopdata_str += "\nАДРЕС ПРОЖИВАНИЯ:\n  " + data_pers.liv_subj_text + ", " + data_pers.liv_dstr_text + ", " + data_pers.liv_city_text + ", " + data_pers.liv_nasp_text + ", " + data_pers.liv_strt_text + ", " + QString::number(data_pers.liv_hous) + data_pers.liv_corp + ", кв." + data_pers.liv_qart + "\n";
            dopdata_str += "AOID = " + data_pers.liv_AOID + "\n";
            dopdata_str += "HOUSEID = " + data_pers.liv_HOUSEID + "\n";

            // прикрепление
            /*QString sql_adr_liv = "select a.code_mo, a.code_mp, a.code_ms, a.snils_mt "
                                  " from persons_assig a "
                                  "      left join "
                                  " where id_person=" + QString::number(data_pers.id) + ""
                                  "   and is_actual=0 ; ";
            QSqlQuery *query_adr_liv = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_adr_liv, "Чтение адреса проживания", *query_adr_liv, true, db, data_app))
                QMessageBox::critical(this, "Непредвиденная ошибка", "При попытке прочитать адрес проживания произошла непредвиденная ошибка.\n\nОперация отменена.");
            if (query_adr_liv->next()) {
                data_pers.liv_subj_text = query_adr_liv->value(0).toString();
                data_pers.liv_dstr_text = query_adr_liv->value(1).toString();
                data_pers.liv_city_text = query_adr_liv->value(2).toString();
                data_pers.liv_nasp_text = query_adr_liv->value(3).toString();
                data_pers.liv_strt_text = query_adr_liv->value(4).toString();
                data_pers.liv_hous      = query_adr_liv->value(5).toInt();
                data_pers.liv_corp      = query_adr_liv->value(6).toString();
                data_pers.liv_qart      = query_adr_liv->value(7).toString();
                if (data_pers.liv_city_text==data_pers.liv_nasp_text) {
                    data_pers.liv_nasp_text="";
                }
            } else {
                data_pers.liv_subj_text = "";
                data_pers.liv_dstr_text = "";
                data_pers.liv_city_text = "";
                data_pers.liv_nasp_text = "";
                data_pers.liv_strt_text = "";
                data_pers.liv_hous      = 0;
                data_pers.liv_corp      = "";
                data_pers.liv_qart      = "";
            }
            delete query_adr_liv;
            dopdata_str += "\nАДРЕС ПРОЖИВАНИЯ:\n  " + data_pers.liv_subj_text + ", " + data_pers.liv_dstr_text + ", " + data_pers.liv_city_text + ", " + data_pers.liv_nasp_text + ", " + data_pers.liv_strt_text + ", " + QString::number(data_pers.liv_hous) + data_pers.liv_corp + ", кв." + data_pers.liv_qart;
            */

            QString sql_agt = "select e.id_insure_agent1, ag1.fio, id_insure_agent2, ag2.fio "
                              "  from persons e "
                              "  left join insure_agents as ag1 on(ag1.id=e.id_insure_agent1) "
                              "  left join insure_agents as ag2 on(ag2.id=e.id_insure_agent2) "
                              " where e.id=" + QString::number(data_pers.id) + " ; ";
            QSqlQuery *query_agt = new QSqlQuery(db);

            if (!mySQL.exec(this, sql_agt, "Получение ID страховых агентв", *query_agt, true, db, data_app))
                QMessageBox::critical(this, "Непредвиденная ошибка", "При получении ID страховых агентов произошла непредвиденная ошибка.\n\nОперация отменена.");
            if (query_agt->next()) {
                data_pers.id_insure_agent1 = query_agt->value(0).toInt();
                data_pers.fio_insure_agent1 = query_agt->value(1).toString();
                data_pers.id_insure_agent2 = query_agt->value(2).toInt();
                data_pers.fio_insure_agent2 = query_agt->value(3).toString();
            } else {
                data_pers.id_insure_agent1 = -1;
                data_pers.fio_insure_agent1 = "";
                data_pers.id_insure_agent2 = -1;
                data_pers.fio_insure_agent2 = "";
            }
            dopdata_str += "\nстраховые агенты: " + data_pers.fio_insure_agent1 + "; " + data_pers.fio_insure_agent2 + "\n";

            delete query_agt;

            ui->te_pers_dopdata->setText(dopdata_str);
        }
    }

    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_ch_only_act_clicked(bool checked) {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Нажмите кнопку [Поиск] и выберите человека из списка.");
        return;
    }

    // проверим выделенную строку
    int id_person = -1, id_polis = -1;
    QModelIndexList indexes = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes.size()>0) {
        this->setCursor(Qt::WaitCursor);
        QModelIndex index = indexes.front();

        // ID застрахованного
        id_person = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();       // e.id
        id_polis  = model_persons.data(model_persons.index(index.row(),65), Qt::EditRole).toInt();       // e.id_polis
    }
    refresh_polises_tab(id_person, id_polis);
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_act_import_tfoms_triggered() {
    on_show_protokols_clicked();
}

void persons_wnd::on_combo_docs_pan_orgcode_activated(int index) {
    data_doc.has_org_code = (ui->combo_docs_pan_orgcode->currentIndex()>0);
    data_doc.org_code = ui->combo_docs_pan_orgcode->currentText();
    int cb_index = ui->combo_docs_pan_orgcode->currentIndex();
    if (cb_index>0) {
        ui->line_docs_pan_ogrname->setText(ui->combo_docs_pan_orgcode->currentData().toString());
        data_doc.doc_org = ui->combo_docs_pan_orgcode->currentData().toString();
    }
}

void persons_wnd::on_act_gen_reester_vs_triggered() {
    db.transaction();

    //------------------------------------------------------------
    // генерация реестра
    //------------------------------------------------------------
    bool res = print_registry_vs();

    if (!res) {
        this->setCursor(Qt::ArrowCursor);
        db.rollback();
        return;
    }

    db.commit();
    return;
}

void persons_wnd::on_act_gen_reester_oms_triggered() {
    db.transaction();

    //------------------------------------------------------------
    // генерация реестра
    //------------------------------------------------------------
    bool res = print_registry_oms();

    if (!res) {
        this->setCursor(Qt::ArrowCursor);
        db.rollback();
        return;
    }

    db.commit();
    return;
}

void persons_wnd::on_act_sms_triggered() {
    // откроем окно "СМС"
    delete send_pol_sms_w;
    send_pol_sms_w = new send_pol_sms_wnd(db, data_app, settings, this);
    send_pol_sms_w->exec();
}

void persons_wnd::on_ch_p040_clicked(bool checked) {
    if (!checked && QMessageBox::warning(this, "Не отправлять П040?", "Вы действительно хотите отказаться от передаци в ТФОМЧ события П040 в случае изменения идентифицирующих данных застрахованного, информация о котором уже была направлена в ТФОМС?", QMessageBox::Ok|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Cancel) {
        ui->ch_p040->setChecked(true);
    }

}

// закрытие полиса без отправки события в фонд
void persons_wnd::on_bn_pers_pol_close_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_polises || !ui->tab_polises->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите человека, полисы которого вы хотите просмотреть или поправить без отправки в ТФОМС.");
        return;
    }

    if (data_app.is_call || data_app.is_locl) {
        // недоступно в ПВП
        ui->group_person_docs->setChecked(false);
        QApplication::processEvents();
        QMessageBox::warning(this, "Доступно только в головном офисе",
                             "Редактирование данных застрахованных доступно только в головном офисе");
        return;
    }

    // проверим выделенную строку
    QModelIndexList indexes = ui->tab_polises->selectionModel()->selection().indexes();

    if (indexes.size()>0) {
        this->setCursor(Qt::WaitCursor);
        QModelIndex index = indexes.front();

        // данные застрахованного
        //data_pers.id         = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();

        if (QMessageBox::warning(this,
                                 "Нужно подтверждение",
                                 "Вы действительно хотите закрыть выданный полис застрахованного в нашей базе без отправки события в ТФОМС?\n\n"
                                 "(чтобы отправить в ТФОМС событие на закрытие полиса, "
                                 "нужно сформировать новый визит застрахованного и выбрать событие П021)",
                                 QMessageBox::Yes|QMessageBox::Cancel,
                                 QMessageBox::Cancel)==QMessageBox::Yes) {
            db.transaction();

            // зададим для полиса date_stop и in_erp
            QString id = QString::number(model_polises.data(model_polises.index(index.row(), 0), Qt::EditRole).toInt());
            QString vs_num  = model_polises.data(model_polises.index(index.row(), 9), Qt::EditRole).toString();
            QString pol_ser = model_polises.data(model_polises.index(index.row(),10), Qt::EditRole).toString();
            QString pol_num = model_polises.data(model_polises.index(index.row(),11), Qt::EditRole).toString();
            /*QDate date_begin =* model_polises.data(model_polises.index(index.row(),13), Qt::EditRole).toDate();
            QDate date_end   = model_polises.data(model_polises.index(index.row(),14), Qt::EditRole).toDate();
            QDate date_stop  = model_polises.data(model_polises.index(index.row(),15), Qt::EditRole).toDate();*/
            QString id_pol = QString::number(model_polises.data(model_polises.index(index.row(), 31), Qt::EditRole).toInt());

            QString sql;
            sql += "update polises ";
            sql += " set date_stop=min_date(CURRENT_DATE, date_stop), ";
            sql += "     _id_last_point=" + QString::number(data_app.id_point) + ", ";
            sql += "     _id_last_operator=" + QString::number(data_app.id_operator) + " ";
            sql += " where id=" + id + " ; ";
            QSqlQuery *query = new QSqlQuery(db);
            bool res = mySQL.exec(this, sql, QString("Закрытие полиса вручную"), *query, true, db, data_app);

            if (!res) {
                delete query;
                db.rollback();
                QMessageBox::warning(this, "Ошибка при закрытии полиса", "При закрытии полиса вручную без отправки в ТФОМС произошла неожиданная ошибка");
            } else {
                delete query;
                db.commit();

                // обновим статус бланка ВС - сделаем вид, что бланк изъят ... я хз, правильно ли, но ничего другого пока не придумал ...
                QString sql_v = "update blanks_vs "
                                "   set status=-2, "
                                "       date_spent = coalesce(date_spent, CURRENT_DATE) "
                                " where vs_num='" + vs_num + "' and "
                                "       id_polis=" + id + " ; ";

                QSqlQuery *query_v = new QSqlQuery(db);
                /*bool res_v =*/ mySQL.exec(this, sql_v, QString("Правка статуса бланка ВС"), *query_v, true, db, data_app);
                delete query_v;

                // обновим статус бланка полиса - сделаем вид, что бланк изъят ... я хз, правильно ли, но ничего другого пока не придумал ...
                QString sql_b = "update blanks_pol "
                                "   set status=-2, "
                                "       date_spent = coalesce(date_spent, CURRENT_DATE) "
                                " where pol_ser" + QString(pol_ser.isEmpty() ? " is NULL " : QString("='" + ("0000"+pol_ser).right(4) + "' ")) + " and "
                                "       pol_num='" + pol_num + "' and "
                                "       id=" + id_pol + " ; ";

                QSqlQuery *query_b = new QSqlQuery(db);
                /*bool res_b =*/ mySQL.exec(this, sql_b, QString("Правка статуса бланка полиса"), *query_b, true, db, data_app);
                delete query_b;

                // проверим выделенную строку
                int id_person = -1, id_polis = -1;
                QModelIndexList indexes = ui->tab_persons->selectionModel()->selection().indexes();

                if (indexes.size()>0) {
                    QModelIndex index = indexes.front();

                    // ID застрахованного
                    id_person = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();       // e.id
                    id_polis  = model_persons.data(model_persons.index(index.row(),65), Qt::EditRole).toInt();       // e.id_polis
                }

                // обновим статус страхования персоны
                QString sql_insure = "select * from update_pers_links(" + QString::number(id_person) + ",CURRENT_DATE) ; ";
                QSqlQuery *query_insure = new QSqlQuery(db);
                bool res_insure = mySQL.exec(this, sql_insure, QString("Обновим статус страхования персоны"), *query_insure, true, db, data_app);

                refresh_polises_tab(id_person, id_polis);
                this->setCursor(Qt::ArrowCursor);
            }
        }
        this->setCursor(Qt::ArrowCursor);
    } else {
        QMessageBox::warning(this, "Ничего не выбрано!", "Ничего не выбрано!");
    }
}


void persons_wnd::on_tab_polises_clicked(const QModelIndex &index) {
    int id_polis = model_polises.data( model_polises.index(index.row(), 0), Qt::EditRole).toInt();
    refresh_events_tab(id_polis);
}

// правка состояния без отправки в фонд
void persons_wnd::on_bn_pers_act_change_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_polises || !ui->tab_polises->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите полис, события которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
        return;
    }

    if (data_app.is_call || data_app.is_locl) {
        // недоступно в ПВП
        ui->group_person_docs->setChecked(false);
        QApplication::processEvents();
        QMessageBox::warning(this, "Доступно только в головном офисе",
                             "Редактирование данных застрахованных доступно только в головном офисе");
        return;
    }

    // проверим выделенную строку
    QModelIndexList indexes = ui->tab_polises->selectionModel()->selection().indexes();

    if (indexes.size()>0) {
        /*QModelIndex index = indexes.front();*/

        // данные застрахованного
        //data_pers.id         = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();

        if (QMessageBox::warning(this,
                                 "Нужно подтверждение",
                                 "Вы действительно хотите изменить одно из событий полиса застрахованного в нашей базе без отправки в ТФОМС?\n\n"
                                 "(чтобы отправить в ТФОМС событие на правку полиса, "
                                 "нужно изменить данные идентификации застрахованного с отправкой П040 или "
                                 "сформировать новый визит застрахованного и выбрать новое событие страхования в установленном порядке)",
                                 QMessageBox::Yes|QMessageBox::Cancel,
                                 QMessageBox::Cancel)==QMessageBox::Yes) {
            // проверим выделенную строку
            QModelIndexList indexes_act = ui->tab_events->selectionModel()->selection().indexes();

            if (indexes_act.size()>0) {
                QModelIndex index_act = indexes_act.front();

                db.transaction();

                // зададим для полиса date_stop и in_erp
                QString id_polis = QString::number(model_events.data(model_events.index(index_act.row(), 15), Qt::EditRole).toInt());
                QString id_event = QString::number(model_events.data(model_events.index(index_act.row(), 8), Qt::EditRole).toInt());
                QString code_event = model_events.data(model_events.index(index_act.row(), 9), Qt::EditRole).toString();

                if (code_event=="П010"||
                    code_event=="П034"||
                    code_event=="П035"||
                    code_event=="П036"||
                    code_event=="П061"||
                    code_event=="П062"||
                    code_event=="П063" ) {

                    QStringList l;
                    l.append(" - не менять - ");
                    if (code_event!="П010") l.append("П010");
                    if (code_event!="П034") l.append("П034");
                    if (code_event!="П035") l.append("П035");
                    if (code_event!="П036") l.append("П036");
                    if (code_event!="П061") l.append("П061");
                    if (code_event!="П062") l.append("П062");
                    if (code_event!="П063") l.append("П063");

                    QString s = QInputDialog::getItem(this, "Выберите код события", "Выберите новый код события", l);

                    if (s!=" - не менять - ") {
                        this->setCursor(Qt::WaitCursor);

                        // заменим код события
                        QString sql;
                        sql += "update events ";
                        sql += " set event_code='" + s + "' ";
                        sql += " where id=" + id_event + " ; ";
                        QSqlQuery *query = new QSqlQuery(db);
                        bool res = mySQL.exec(this, sql, QString("Правка события вручную"), *query, true, db, data_app);

                        if (!res) {
                            delete query;
                            db.rollback();
                            QMessageBox::warning(this, "Ошибка при правке события", "При правке события вручную без отправки в ТФОМС произошла неожиданная ошибка");
                        } else {
                            delete query;
                            db.commit();

                            refresh_events_tab(id_polis.toInt());
                        }
                        this->setCursor(Qt::ArrowCursor);
                    }
                }

                else if(code_event=="П021"||
                        code_event=="П022"||
                        code_event=="П023"||
                        code_event=="П024"||
                        code_event=="П025" ) {

                    QStringList l;
                    l.append(" - не менять - ");
                    if (code_event!="П021") l.append("П021");
                    if (code_event!="П022") l.append("П022");
                    if (code_event!="П023") l.append("П023");
                    if (code_event!="П024") l.append("П024");
                    if (code_event!="П025") l.append("П025");

                    QString s = QInputDialog::getItem(this, "Выберите код события", "Выберите новый код события", l);

                    if (s!=" - не менять - ") {
                        this->setCursor(Qt::WaitCursor);

                        // заменим код события
                        QString sql;
                        sql += "update events ";
                        sql += " set event_code='" + s + "' ";
                        sql += " where id=" + id_event + " ; ";
                        QSqlQuery *query = new QSqlQuery(db);
                        bool res = mySQL.exec(this, sql, QString("Правка события вручную"), *query, true, db, data_app);

                        if (!res) {
                            delete query;
                            db.rollback();
                            QMessageBox::warning(this, "Ошибка при правке события", "При правке события вручную без отправки в ТФОМС произошла неожиданная ошибка");
                        } else {
                            delete query;
                            db.commit();

                            refresh_events_tab(id_polis.toInt());
                        }
                        this->setCursor(Qt::ArrowCursor);
                    }
                }

                else if(code_event=="П031"||
                        code_event=="П032"||
                        code_event=="П033" ) {

                    QStringList l;
                    l.append(" - не менять - ");
                    if (code_event!="П031") l.append("П031");
                    if (code_event!="П032") l.append("П032");
                    if (code_event!="П033") l.append("П033");

                    QString s = QInputDialog::getItem(this, "Выберите код события", "Выберите новый код события", l);

                    if (s!=" - не менять - ") {
                        this->setCursor(Qt::WaitCursor);

                        // заменим код события
                        QString sql;
                        sql += "update events ";
                        sql += " set event_code='" + s + "' ";
                        sql += " where id=" + id_event + " ; ";
                        QSqlQuery *query = new QSqlQuery(db);
                        bool res = mySQL.exec(this, sql, QString("Правка события вручную"), *query, true, db, data_app);

                        if (!res) {
                            delete query;
                            db.rollback();
                            QMessageBox::warning(this, "Ошибка при правке события", "При правке события вручную без отправки в ТФОМС произошла неожиданная ошибка");
                        } else {
                            delete query;
                            db.commit();

                            refresh_events_tab(id_polis.toInt());
                        }
                        this->setCursor(Qt::ArrowCursor);
                    }
                }

                else {
                    QMessageBox::warning(this, "Событие не может быть изменено", "Такое событие не может быть изменено, так как нет других подобных событий");
                }
            }
        }
    } else {
        QMessageBox::warning(this, "Ничего не выбрано!", "Ничего не выбрано!");
    }
}


void persons_wnd::on_act_to_CSV_triggered() {
    // откроем окно "Экспорт в CSV"
    delete export2csv_w;
    export2csv_w = new export2csv_wnd(db, data_app, settings, this);
    export2csv_w->exec();
}

void persons_wnd::on_bn_pers_assig_mo_clicked() {
    s_data_assig data_assig;
    data_assig.code_mo = ui->combo_pers_assig_mo->currentData().toString();
    //data_medorg.name_mo = ui->combo_pers_assig_mo->currentText();

    medorgs_wnd *w = new medorgs_wnd(db, data_app, settings, data_assig);
    w->setWindowState( w->windowState() | Qt::WindowFullScreen);
    if (w->exec()) {
        refresh_pers_assig_mo();
        ui->combo_pers_assig_mo->setCurrentIndex(ui->combo_pers_assig_mo->findData(data_assig.code_mo));
        ui->combo_pers_assig_mp->setCurrentIndex(ui->combo_pers_assig_mp->findData(data_assig.code_mp));
        ui->combo_pers_assig_ms->setCurrentIndex(ui->combo_pers_assig_ms->findData(data_assig.code_ms));
        ui->combo_pers_assig_mt->setCurrentIndex(ui->combo_pers_assig_mt->findData(data_assig.code_mt));
        ui->combo_pers_assig_type->setCurrentIndex(1);
        ui->date_pers_assig_date->setDate(QDate::currentDate());

        if (QMessageBox::question(this,
                                  "Сохранить прикрепление?",
                                  "Сохранить результаты прикрепления застрахованного лица по территориальному принципцу?",
                                  QMessageBox::Yes|QMessageBox::Cancel,
                                  QMessageBox::Yes)==QMessageBox::Yes) {
            on_b_save_assig_clicked();
        }
    }
}

void persons_wnd::on_combo_pers_assig_mo_activated(int index) {
    ui->lab_assig->setText("МО " + ui->combo_pers_assig_mo->currentData().toString() + ", " +
                           "подр. " + ui->combo_pers_assig_mp->currentData().toString() + ", " +
                           "уч. " + ui->combo_pers_assig_ms->currentData().toString() + ", " +
                           "врач (" + ui->combo_pers_assig_mt->currentData().toString() + "), " +
                           ((ui->combo_pers_assig_type->currentIndex()==1) ? "тер." : ((ui->combo_pers_assig_type->currentIndex()==2) ? "заяв." : " ? ")) );
    refresh_pers_assig_mp();
    refresh_pers_assig_ms();
    ui->ch_assig_mt_by_medsite->setChecked(true);
    refresh_pers_assig_mt();
}
void persons_wnd::on_combo_pers_assig_mp_currentIndexChanged(const QString &arg1) {
    ui->lab_assig->setText("МО " + ui->combo_pers_assig_mo->currentData().toString() + ", " +
                           "подр. " + ui->combo_pers_assig_mp->currentData().toString() + ", " +
                           "уч. " + ui->combo_pers_assig_ms->currentData().toString() + ", " +
                           "врач (" + ui->combo_pers_assig_mt->currentData().toString() + "), " +
                           ((ui->combo_pers_assig_type->currentIndex()==1) ? "тер." : ((ui->combo_pers_assig_type->currentIndex()==2) ? "заяв." : " ? ")) );
}
void persons_wnd::on_combo_pers_assig_ms_currentIndexChanged(const QString &arg1) {
    ui->lab_assig->setText("МО " + ui->combo_pers_assig_mo->currentData().toString() + ", " +
                           "подр. " + ui->combo_pers_assig_mp->currentData().toString() + ", " +
                           "уч. " + ui->combo_pers_assig_ms->currentData().toString() + ", " +
                           "врач (" + ui->combo_pers_assig_mt->currentData().toString() + "), " +
                           ((ui->combo_pers_assig_type->currentIndex()==1) ? "тер." : ((ui->combo_pers_assig_type->currentIndex()==2) ? "заяв." : " ? ")) );
}
void persons_wnd::on_combo_pers_assig_mt_currentIndexChanged(const QString &arg1) {
    ui->lab_assig->setText("МО " + ui->combo_pers_assig_mo->currentData().toString() + ", " +
                           "подр. " + ui->combo_pers_assig_mp->currentData().toString() + ", " +
                           "уч. " + ui->combo_pers_assig_ms->currentData().toString() + ", " +
                           "врач (" + ui->combo_pers_assig_mt->currentData().toString() + "), " +
                           ((ui->combo_pers_assig_type->currentIndex()==1) ? "тер." : ((ui->combo_pers_assig_type->currentIndex()==2) ? "заяв." : " ? ")) );
}
void persons_wnd::on_combo_pers_assig_type_currentIndexChanged(const QString &arg1) {
    ui->lab_assig->setText("МО " + ui->combo_pers_assig_mo->currentData().toString() + ", " +
                           "подр. " + ui->combo_pers_assig_mp->currentData().toString() + ", " +
                           "уч. " + ui->combo_pers_assig_ms->currentData().toString() + ", " +
                           "врач (" + ui->combo_pers_assig_mt->currentData().toString() + "), " +
                           ((ui->combo_pers_assig_type->currentIndex()==1) ? "тер." : ((ui->combo_pers_assig_type->currentIndex()==2) ? "заяв." : " ? ")) );
}
void persons_wnd::on_date_pers_assig_date_editingFinished() {
    ui->lab_assig->setText("МО " + ui->combo_pers_assig_mo->currentData().toString() + ", " +
                           "подр. " + ui->combo_pers_assig_mp->currentData().toString() + ", " +
                           "уч. " + ui->combo_pers_assig_ms->currentData().toString() + ", " +
                           "врач (" + ui->combo_pers_assig_mt->currentData().toString() + "), " +
                           ((ui->combo_pers_assig_type->currentIndex()==1) ? "тер." : ((ui->combo_pers_assig_type->currentIndex()==2) ? "заяв." : " ? ")) );
}

void persons_wnd::on_b_save_assig_clicked() {
    // Закроем старое прикрепление
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    // проверка, введен ли код МО
    if (ui->combo_pers_assig_mo->currentData().toString().isEmpty()) {
        QMessageBox::warning(this, "Недостаточно данных", "Выберите медицинскую организацию, к которой осуществляется прикрепление.");
        return;
    }

    // проверка, введена ли дата прикрепления
    if (ui->date_pers_assig_date->date()<QDate(2000,1,1) ||
        ui->date_pers_assig_date->date()>QDate::currentDate())
    {
        QMessageBox::warning(this, "Недостаточно данных",
                             "Дата прикепления не может быть раньше 01.01.2000 \n"
                             "или позже текущего дня.");
        return;
    }

    // проверка способа прикрепления
    if (ui->combo_pers_assig_mo->currentIndex()==0) {
        QMessageBox::warning(this, "Не указана медорганизация",
                             "Не указана медорганизация.\n"
                             "Действие отменено.\n");
        return;
    }

    // проверка способа прикрепления
    if (ui->combo_pers_assig_type->currentIndex()==0) {
        if (QMessageBox::warning(this, "Не указан способ прикрепления",
                                 "Не указан способ прикрепления.\n"
                                 "Выбрать способ прикрепления \"По территориальному принципу\" ? ",
                                 QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Yes)==QMessageBox::Yes) {
            ui->combo_pers_assig_type->setCurrentIndex(1);
        } else {
            return;
        }
    }


    // проверка, введен ли способ прикреплния
    if (ui->combo_pers_assig_mo->currentData().toString().isEmpty()) {
        if (QMessageBox::warning(this,
                                 "Способ прикрепления не указан",
                                 "Способ прикрепления не указан.\nПрололжить сохранение?\n",
                                 QMessageBox::Yes|QMessageBox::Cancel,
                                 QMessageBox::Yes)!=QMessageBox::Yes) {
            return;
        }
    }
    db.transaction();

    int    id_person = data_pers.id;
    QString  code_mo = ui->combo_pers_assig_mo->currentData().toString().left(6);
    QString  code_mp = ui->combo_pers_assig_mp->currentData().toString().left(64);
    QString  code_ms = ui->combo_pers_assig_ms->currentData().toString().left(64);
    QString snils_mt = ui->combo_pers_assig_mt->currentData().toString().trimmed().simplified().replace(" ","").replace("-","").left(11);
    int   assig_type = ui->combo_pers_assig_type->currentIndex();
    QDate assig_date = ui->date_pers_assig_date->date();


    // сравнение действующего и нового прикреплений
    QString sql_old;
    sql_old += "select a.code_mo, a.code_mp, a.code_ms, a.snils_mt, a.assig_type, a.assig_date "
                  " from persons_assig a "
                  " where a.id_person=" + QString::number(id_person) + " and a.is_actual=0 ; ";

    QSqlQuery *query_old = new QSqlQuery(db);
    if ( mySQL.exec(this, sql_old, "Сравнение действующего и нового прикреплений", *query_old, true, db, data_app) &&
         query_old->size()>0 &&
         query_old->next() ) {
        QString  code_mo_old = query_old->value(0).toString().simplified().trimmed();
        QString  code_mp_old = query_old->value(1).toString().simplified().trimmed();
        QString  code_ms_old = query_old->value(2).toString().simplified().trimmed();
        QString snils_mt_old = query_old->value(3).toString().simplified().trimmed();
        int   assig_type_old = query_old->value(4).toInt();
        QDate assig_date_old = query_old->value(5).toDate();

        if ( code_mo==code_mo_old &&
             code_mp==code_mp_old &&
             code_ms==code_ms_old &&
             snils_mt==snils_mt_old &&
             assig_type==assig_type_old &&
             assig_date==assig_date_old) {

            // такое прикрепление уже есть - пропустим
            db.rollback();
            delete query_old;
            return;
        }
    }

    // зададим дату открепления прошлого прикрепления
    QString sql_close = "update persons_assig "
                        "   set unsig_date='" + QDate::currentDate().toString("yyyy-MM-dd") + "'  "
                        " where id_person=" + QString::number(id_person) + " and unsig_date is NULL ; ";

    QSqlQuery *query_close = new QSqlQuery(db);
    if (!mySQL.exec(this, sql_close, "Закрытие старого прикрепления", *query_close, true, db, data_app)) {
        db.rollback();
        QMessageBox::critical(this,
                              "Непредвиденная ошибка",
                              "При попытке задания даты открепления старого прикрепления произошла неожиданная ошибка.\n\n"
                              "Сохранение отменено.");
        delete query_close;
        return;
    }


    // добавим новое прикрепление
    QString sql = "update persons_assig "
                  "   set is_actual = is_actual +1 "
                  " where id_person = " + QString::number(id_person) + " ; "

                  "insert into persons_assig (id_person, code_mo, code_mp, code_ms, snils_mt, assig_type, assig_way, assig_date, unsig_date, is_actual) "
                  " values "
                  " ( "  + QString::number(id_person) +
                  "  ,'" + code_mo + "' "
                  "  ,'" + code_mp + "' "
                  "  ,'" + code_ms + "' "
                  "  ,'" + snils_mt + "' "
                  "  ,"  + QString::number(assig_type) +
                  "  ,NULL "
                  "  ,'" + ui->date_pers_assig_date->date().toString("yyyy-MM-dd") + "' "
                  "  ,NULL,0 ) "
                  " returning id; ";

    QSqlQuery *query = new QSqlQuery(db);
    if (!mySQL.exec(this, sql, "Добавление прикрепления к МО", *query, true, db, data_app) || !query->next()) {
        db.rollback();
        QMessageBox::critical(this,
                              "Непредвиденная ошибка",
                              "При попытке добавить прикрепление застрахованного к МО произошла неожиданная ошибка.\n\n"
                              "Сохранение отменено.");
        delete query;
        return;
    }


    // запомним ID страховых агентов
    QString sql_agn = "update persons "
                      "   set id_insure_agent1=" + QString::number(ui->combo_pers_insure_agent1->currentData().toInt()) + ", "
                      "       id_insure_agent2=" + QString::number(ui->combo_pers_insure_agent2->currentData().toInt()) + " "
                      " where id=" + QString::number(data_pers.id) + " ; ";

    QSqlQuery *query_agn = new QSqlQuery(db);
    if (!mySQL.exec(this, sql_agn, "Прикрепление к страховым агентам", *query_agn, true, db, data_app)) {
        db.rollback();
        QMessageBox::critical(this,
                              "Непредвиденная ошибка",
                              "При попытке прикрепить застрахованного к страховым агентам произошла неожиданная ошибка.\n\n"
                              "Сохранение отменено.");
        delete query_agn;
        return;
    }

    db.commit();


    // обновим связку персоны с прикреплением
    QString sql_link = "select * from update_pers_links(" + QString::number(data_pers.id) + ", NULL) ; ";
    QSqlQuery *query_link = new QSqlQuery(db);
    if (!mySQL.exec(this, sql_link, "Обновление связки с прикреплением застрахованного", *query_link, true, db, data_app))
        return;
    delete query_link;
}

void persons_wnd::on_bn_assig_now_clicked() {
    ui->date_pers_assig_date->setDate(QDate::currentDate());
}

void persons_wnd::on_act_assig_triggered() {
    // откроем окно "Выгрузка прикреплений"
    delete export_assig_w;
    export_assig_w = new export_assig_wnd(db, data_app, settings, this);
    export_assig_w->exec();
}

void persons_wnd::on_bn_pers_act_resent_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_events || !ui->tab_events->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите полис, события которого вы хотите просмотреть, изменить или переотправить в ТФОМС.");
        return;
    }

    if (data_app.is_call || data_app.is_locl) {
        // недоступно в ПВП
        ui->group_person_docs->setChecked(false);
        QApplication::processEvents();
        QMessageBox::warning(this, "Доступно только в головном офисе",
                             "Редактирование данных застрахованных доступно только в головном офисе");
        return;
    }

    // проверим выделенную строку
    QModelIndexList indexes = ui->tab_events->selectionModel()->selection().indexes();

    if (indexes.size()>0) {
        //QModelIndex index = indexes.front();

        if (QMessageBox::warning(this,
                                 "Нужно подтверждение",
                                 "Вы действительно хотите повторно отправить выбранное событие в ТФОМС?\n\n"
                                 "(эта операция применима только к событиям, ранее уже направленным в ТФОМС)",
                                 QMessageBox::Yes|QMessageBox::Cancel,
                                 QMessageBox::Cancel)==QMessageBox::Yes) {
            // проверим выделенную строку
            QModelIndexList indexes_act = ui->tab_events->selectionModel()->selection().indexes();

            if (indexes_act.size()>0) {
                QModelIndex index_act = indexes_act.front();
                int id_event = model_events.data(model_events.index(index_act.row(), 8), Qt::EditRole).toInt();
                QString event_code = model_events.data(model_events.index(index_act.row(), 10), Qt::EditRole).toString();

                db.transaction();

                if (ui->ch_pers_act_resent_date->isChecked()) {
                    QString sql_corr_date;

                    // поправим дату выдачи ВС на сегодня
                    if ( event_code=="П010" ||
                         event_code=="П034" ||
                         event_code=="П035" ||
                         event_code=="П036" ||
                         event_code=="П061" ||
                         event_code=="П062" ||
                         event_code=="П063" ) {
                        // ВС
                        sql_corr_date  = "update events "
                                         "   set duty_field = duty_field||'  ! '||CURRENT_DATE||' - сделана попытка повторно переотправить 1 событие в ТФОМС. Попытка отклонена - событие итак ещё не отправленно.' "
                                         " where id=" + QString::number(id_event) + " "
                                         "   and status=0 ; "

                                         "update events "
                                         "   set status=0 "
                                         "       duty_field = duty_field||'  ! '||CURRENT_DATE||' - дата этого события была принудительно поправлена на текущую для переотправки 1 события в ТФОМС.' "
                                         " where id=" + QString::number(id_event) + " "
                                         "   and status<>0 ; "

                                         "update events a "
                                         "   set event_dt=CURRENT_TIMESTAMP "
                                         " where a.id=" + QString::number(id_event) + " "
                                         "   and (select p.tfoms_id from polises p where p.id=a.id_polis) is NULL ; "

                                         "update polises "
                                         "   set date_activate=CURRENT_DATE, "
                                         "       date_get2hand=CURRENT_DATE  "
                                         " where id in(SELECT ID_POLIS FROM EVENTS WHERE id=" + QString::number(id_event) + ") "
                                         "   and (date_activate-CURRENT_DATE)>3 "
                                         "   and tfoms_id is NULL ; "

                                         "update vizits v "
                                         "   set v_date=CURRENT_DATE "
                                         " where v.id in(SELECT ID_VIZIT FROM EVENTS WHERE id=" + QString::number(id_event) + ") "
                                         "   and (select p.tfoms_id from events a left join polises p on(p.id=a.id_polis) where a.id_vizit=v.id) is NULL ; ";
                        /*
                        sql_corr_date = "update polises "
                                        "   set date_begin=CURRENT_DATE "
                                        " where (date_begin-CURRENT_DATE)>2 "
                                        "   and id in ( select id_polis from events "
                                        "                where id=" + QString::number(id_event) + " ) ; "

                                        "update events "
                                        "   set event_dt=CURRENT_DATE, "
                                        "       duty_field = duty_field||'  ! '||CURRENT_DATE||' - выдача ВС - дата этого события была принудительно поправлена на текущую поскольку событие устарело.' "
                                        " where (event_dt-CURRENT_DATE)>2 "
                                        "   and id=" + QString::number(id_event) + " ; ";
                                        */
                    } else
                    if ( event_code=="П031" ||
                         event_code=="П032" ||
                         event_code=="П033" ||
                         event_code=="П060" ) {
                        // ЕНП
                        sql_corr_date = "update events "
                                        "   set duty_field = duty_field||'  ! '||CURRENT_DATE||' - сделана попытка повторно переотправить 1 событие в ТФОМС. Попытка отклонена - событие итак ещё не отправленно.' "
                                        " where id=" + QString::number(id_event) + " "
                                        "   and status=0 ; "

                                        "update events "
                                        "   set status=0 "
                                        "       duty_field = duty_field||'  ! '||CURRENT_DATE||' - дата этого события была принудительно поправлена на текущую для переотправки 1 события в ТФОМС.' "
                                        " where id=" + QString::number(id_event) + " "
                                        "   and status<>0 ; "

                                        "update events a "
                                        "   set event_dt=CURRENT_TIMESTAMP "
                                        " where a.id=" + QString::number(id_event) + " "
                                        "   and (select p.tfoms_id from polises p where p.id=a.id_polis) is NULL ; "

                                        "update polises "
                                        "   set date_activate=CURRENT_DATE, "
                                        "       date_get2hand=CURRENT_DATE  "
                                        " where id in(SELECT ID_POLIS FROM EVENTS WHERE id=" + QString::number(id_event) + ") "
                                        "   and tfoms_id is NULL ; "

                                        "update vizits v "
                                        "   set v_date=CURRENT_DATE "
                                        " where v.id in(SELECT ID_VIZIT FROM EVENTS WHERE id=" + QString::number(id_event) + ") "
                                        "   and (select p.tfoms_id from events a left join polises p on(p.id=a.id_polis) where a.id_vizit=v.id) is NULL ; ";
                        /*
                        sql_corr_date = "update events "
                                        "   set event_dt=CURRENT_DATE, "
                                        "       duty_field = duty_field||'  ! '||CURRENT_DATE||' - выдача ЕНП - дата этого события была принудительно поправлена на текущую поскольку событие устарело.' "
                                        " where EXTRACT(day FROM CURRENT_DATE-e.event_dt)>1 " //EXTRACT(DAY FROM INTERVAL '40 days 1 minute')
                                        "   and id=" + QString::number(id_event) + " ; ";
                                        */

                    }
                    QSqlQuery *query_corr_date = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_corr_date, "Поправим дату события", *query_corr_date, true, db, data_app)) {
                        db.rollback();
                        QMessageBox::critical(this,
                                              "Непредвиденная ошибка",
                                              "При попытке поправить дату события на текущий день произошла неожиданная ошибка.\n\n"
                                              "Действие отменено.");
                        delete query_corr_date;
                        return;
                    }
                }

                /*// Удалим старую связку события с посылкой
                QString sql_free_act = "delete from files_r_evts "
                                       " where id_event=" + QString::number(id_event) + " ; ";

                QSqlQuery *query_free_act = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_free_act, "Состарим старые прикрепления", *query_free_act, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this,
                                          "Непредвиденная ошибка",
                                          "При попытке убрать связь события и посылки в ТФОМС произошла неожиданная ошибка.\n\n"
                                          "Действие отменено.");
                    delete query_free_act;
                    return;
                }*/

                // Зададим статус события "НЕ ОТПРАВЛЯЛОСЬ"
                QString sql_resend = "update events "
                                     "   set status=0, "
                                     "       duty_field = duty_field||'  ! '||CURRENT_DATE||' - это событие было повторно переотправлено в фонд кнопкой [Переотправить]' "
                                     " where id=" + QString::number(id_event) + " ; ";

                QSqlQuery *query_resend = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_resend, "Состарим старые прикрепления", *query_resend, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this,
                                          "Непредвиденная ошибка",
                                          "При попытке снять признак отсылки события в ТФОМС произошла неожиданная ошибка.\n\n"
                                          "Действие отменено.");
                    delete query_resend;
                    return;
                }

                db.commit();

                QString id_polis = QString::number(model_events.data(model_events.index(index_act.row(), 15), Qt::EditRole).toInt());
                refresh_events_tab(id_polis.toInt());
            }
        }
    } else {
        QMessageBox::warning(this, "Ничего не выбрано!", "Ничего не выбрано!");
    }
}

void persons_wnd::on_bn_delete_assig_clicked() {
    // Закроем старое прикрепление
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    if (QMessageBox::question(this,
                              "Нужно подтверждение",
                              "Вы действительно хотите удалить данные прикрепления данного застрахованного?\n",
                              QMessageBox::Yes|QMessageBox::Cancel,
                              QMessageBox::Cancel)==QMessageBox::Yes) {
        db.transaction();

        // зададим дату открепления прошлого прикрепления
        QString sql_close = "update persons_assig "
                            "   set unsig_date='" + QDate::currentDate().toString("yyyy-MM-dd") + "'  "
                            " where id_person=" + QString::number(data_pers.id) + " and unsig_date is NULL ; ";

        QSqlQuery *query_close = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_close, "Закрытие старого прикрепления", *query_close, true, db, data_app)) {
            db.rollback();
            QMessageBox::critical(this,
                                  "Непредвиденная ошибка",
                                  "При попытке задании даты открепления старого прикрепления произошла неожиданная ошибка.\n\n"
                                  "Сохранение отменено.");
            delete query_close;
            return;
        }

        // это делается в триггере
        /*// "состарим" прошлые прикрепления
        QString sql_old = "update persons_assig "
                          "   set is_actual=is_actual +1 "
                          " where id_person=" + QString::number(data_pers.id) + " ; ";

        QSqlQuery *query_old = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_old, "Состарим старые прикрепления", *query_old, true, db, data_app)) {
            db.rollback();
            QMessageBox::critical(this,
                                  "Непредвиденная ошибка",
                                  "При попытке состарить прошлые прикрепления произошла неожиданная ошибка.\n\n"
                                  "Сохранение отменено.");
            delete query_old;
            return;
        }*/

        db.commit();

        ui->combo_pers_assig_mo->setCurrentIndex(0);
        ui->combo_pers_assig_mp->setCurrentIndex(0);
        ui->combo_pers_assig_ms->setCurrentIndex(0);
        ui->combo_pers_assig_mt->setCurrentIndex(0);
        ui->combo_pers_assig_type->setCurrentIndex(0);
        ui->date_pers_assig_date->setDate(QDate::currentDate());

        // обновим связку персоны с прикреплением
        QString sql_link = "select * from update_pers_links(" + QString::number(data_pers.id) + ", NULL) ; ";
        QSqlQuery *query_link = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_link, "Обновление связки с прикреплением застрахованного", *query_link, true, db, data_app))
            return;
        delete query_link;
    }
}

void persons_wnd::on_act_form_8_triggered() {
    delete  print_form_8_w;
    print_form_8_w = new print_form_8_wnd(db, data_app, settings, this);
    print_form_8_w->exec();
}

void persons_wnd::on_act_vs_blanks_triggered() {
    delete  print_vs_by_date_w;
    print_vs_by_date_w = new print_vs_by_date_wnd(db, data_app, settings, this);
    print_vs_by_date_w->exec();
}

void persons_wnd::on_act_enp_blanks_triggered() {
    delete  print_enp_by_date_w;
    print_enp_by_date_w = new print_enp_by_date_wnd(db, data_app, settings, this);
    print_enp_by_date_w->exec();
}

void persons_wnd::on_act_subconto_triggered() {
    delete  print_subconto_w;
    print_subconto_w = new print_subconto_wnd(db, data_app, settings, this);
    print_subconto_w->exec();
}

void persons_wnd::on_act_vs_reg_by_date_triggered() {
    delete  print_vs_register_by_date_w;
    print_vs_register_by_date_w = new print_vs_register_by_date_wnd(db, data_app, settings, this);
    print_vs_register_by_date_w->exec();
}



void persons_wnd::on_bn_auto_assig_clicked() {
    // проверка исходных данных
    if (ui->combo_pers_pan_sex->currentIndex()<1) {
        QMessageBox::warning(this,
                             "Недостаточно данных",
                             "Выберите пол застрахованного.");
        return;
    }
    if (ui->date_pers_pan_birth->date()<=QDate(1920,1,1)) {
        QMessageBox::warning(this,
                             "Недостаточно данных",
                             "Дата рождения застрахованного должна быть позже 1 января 1920г.");
        return;
    }
    if (ui->date_pers_pan_birth->date()>QDate::currentDate()) {
        QMessageBox::warning(this,
                             "Недостаточно данных",
                             "Указанная дата рождения застрахованного ещё не наступила.");
        return;
    }

    ui->ch_assig_mt_by_medsite->setChecked(true);

    // получим адресные и прочие данные застрахованного
    int d_sex = ui->combo_pers_pan_sex->currentIndex();
    int d_age = (ui->date_pers_pan_birth->date().addYears(18)>QDate::currentDate()) ? 1 : 2 ;
    //QString d_KLADR_subj, d_KLADR_dstr, d_KLADR_city, d_KLADR_nasp, d_KLADR_STREET;

    QString d_subj;
    QString d_dstr;
    QString d_city;
    QString d_nasp;
    QString d_strt;
    int d_house;
    QString d_corp;

    bool is_ok = false;

    if (ui->ch_pers_pan_reg->isChecked()) {
        if (ui->ln_pers_pan_reg_hous->text().isEmpty() || ui->ln_pers_pan_reg_hous->text().toInt()==0) {
            QMessageBox::warning(this,
                                 "Недостаточно данных",
                                 //"При попытке определить территориальное прикрепление застрахованного по адресу регистрации произошла ошибка:\n\n"
                                 "Номер дома не может быть пустым или 0!");
            return;
        }

        // получим адресную информацию по адресу регистрации застрахованного
        d_subj = QString(/*"00" +*/ ui->ln_pers_pan_reg_subj->text()).right(2);
        d_dstr = QString(/*"000" +*/ ui->ln_pers_pan_reg_dstr->text()).right(3);
        d_city = QString(/*"000" +*/ ui->ln_pers_pan_reg_city->text()).right(3);
        d_nasp = QString(/*"000" +*/ ui->ln_pers_pan_reg_nasp->text()).right(3);
        d_strt = QString(/*"0000" +*/ ui->ln_pers_pan_reg_strt->text()).right(4);

        d_house = ui->ln_pers_pan_reg_hous->text().trimmed().toInt();
        d_corp = ui->ln_pers_pan_reg_corp->text();



        // выполним прикрепление по адресу регистрации

        // поищем подходящую строку в таблице ASSIG_BY_TERR
        QString sql;
        sql += "select code_mo, code_mp, code_ms, snils_mt "
                " from assig_by_terr "
                " where id in ";
        sql += "( select * from assig_test(" +
                  d_subj + ", " +
                  d_dstr + ", " +
                  d_city + ", " +
                  d_nasp + ", " +
                  d_strt + ", " +
                  QString::number(d_house) + ", " +
                  "'" + d_corp + "', " +
                  QString::number(d_sex) + ", " +
                  QString::number(d_age) + " " +
               ") ) ; ";

        QSqlQuery *query = new QSqlQuery(db);

        if ( mySQL.exec(this, sql, "Проверка терр-прикрепления", *query, true, db, data_app) &&
             query->size()>0 &&
             query->next() ) {
            QString code_mo = query->value(0).toString().trimmed();
            QString code_mp = query->value(1).toString().trimmed();
            QString code_ms = query->value(2).toString().trimmed();
            QString snils_mt = query->value(3).toString().trimmed();

            // проверка, нет ли в таблице участков другой записи врача
            QString sql_medter;
            sql_medter += "select snils_mt "
                          " from spr_medters t "
                          "      left join spr_ms_r_mt r on( r.id_mt=t.id and r.prof_mt=1 and r.date_beg<=CURRENT_DATE and (r.date_end is NULL or r.date_end>CURRENT_DATE) ) "
                          "      left join spr_medsites s on(s.id=r.id_ms) "
                          " where s.code_mo='" + code_mo + "' and "
                                + ( code_mp.isEmpty()||code_mp=="0" ? QString("") : QString("s.code_mp='" + code_mp + "' and ") ) +
                                " s.code_ms='" + code_ms + "' ; ";
            QSqlQuery *query_medter = new QSqlQuery(db);
            if ( mySQL.exec(this, sql_medter, "Проверка терапевта по справочнику участков", *query_medter, true, db, data_app) &&
                 query_medter->size()>0 &&
                 query_medter->next() ) {
                QString snils = query_medter->value(0).toString().simplified().trimmed();
                    if (snils.size()==11) {
                    snils_mt = snils;
                }
            }

            // выставим в контроллах терр-прикрепление к найденной МО
            data_pers.assig_code_mo = code_mo;
            data_pers.assig_code_mp = code_mp;
            data_pers.assig_code_ms = code_ms;
            data_pers.assig_snils_mt = snils_mt;
            data_pers.assig_type = 1;
            data_pers.assig_date = QDate::currentDate();
            refresh_pers_assig_mo();
            ui->combo_pers_assig_mo->setCurrentIndex(ui->combo_pers_assig_mo->findData(data_pers.assig_code_mo));
            refresh_pers_assig_mp();
            ui->combo_pers_assig_mp->setCurrentIndex(ui->combo_pers_assig_mp->findData(data_pers.assig_code_mp));
            refresh_pers_assig_ms();
            ui->combo_pers_assig_ms->setCurrentIndex(ui->combo_pers_assig_ms->findData(data_pers.assig_code_ms));
            ui->ch_assig_mt_by_medsite->setChecked(true);
            refresh_pers_assig_mt();
            ui->combo_pers_assig_type->setCurrentIndex(1);
            ui->date_pers_assig_date->setDate(QDate::currentDate());

            is_ok = true;

            // запомним успешность автоприкрепления
            /*bool res =*/ reg_assig_by_terr_ok ( data_app.ocato,
                                              ui->combo_pers_pan_reg_subj->currentData().toInt(),
                                              ui->combo_pers_pan_reg_dstr->currentData().toInt(),
                                              ui->combo_pers_pan_reg_city->currentData().toInt(),
                                              ui->combo_pers_pan_reg_nasp->currentData().toInt(),
                                              ui->combo_pers_pan_reg_strt->currentData().toInt(),
                                              ui->ln_pers_pan_reg_hous->text().toInt(),
                                              ui->ln_pers_pan_reg_corp->text(),
                                              ui->combo_pers_pan_sex->currentIndex(),
                                              ( (ui->date_pers_pan_birth->date()>QDate::currentDate().addYears(-18) ? 1 : 2) ) );

            if (QMessageBox::question(this,
                                      "Сохранить авто-прикрепление?",
                                      "Застрахованный прикреплён по адресу регистрации. \n\n"
                                      "Сохранить результаты автоматического прикрепления застрахованного лица по территориальному принципцу?",
                                      QMessageBox::Yes|QMessageBox::Cancel,
                                      QMessageBox::Yes)==QMessageBox::Yes) {
                on_b_save_assig_clicked();
            }
        }
        delete query;
    }



    if (!is_ok && ui->ch_pers_pan_liv->isChecked()) {
        if (ui->ln_pers_pan_liv_hous->text().isEmpty() || ui->ln_pers_pan_liv_hous->text().toInt()==0) {
            QMessageBox::warning(this,
                                 "Недостаточно данных",
                                 //"При попытке определить территориальное прикрепление застрахованного по адресу фактического проживания произошла ошибка:\n\n"
                                 "Номер дома не может быть пустым или 0!");
            return;
        }

        // получим адресную информацию по адресу фактического проживания застрахованного
        d_subj = QString(/*"00" +*/ ui->ln_pers_pan_liv_subj->text()).right(2);
        d_dstr = QString(/*"000" +*/ ui->ln_pers_pan_liv_dstr->text()).right(3);
        d_city = QString(/*"000" +*/ ui->ln_pers_pan_liv_city->text()).right(3);
        d_nasp = QString(/*"000" +*/ ui->ln_pers_pan_liv_nasp->text()).right(3);
        d_strt = QString(/*"0000" +*/ ui->ln_pers_pan_liv_strt->text()).right(4);

        d_house = ui->ln_pers_pan_liv_hous->text().trimmed().toInt();
        d_corp = ui->ln_pers_pan_liv_corp->text();



        // выполним прикрепление по адресу фактического проживания

        // поищем подходящую строку в таблице ASSIG_BY_TERR
        QString sql;
        sql += "select code_mo, code_mp, code_ms, snils_mt "
                " from assig_by_terr "
                " where id in ";
        sql += "( select * from assig_test(" +
                  d_subj + ", " +
                  d_dstr + ", " +
                  d_city + ", " +
                  d_nasp + ", " +
                  d_strt + ", " +
                  QString::number(d_house) + ", " +
                  "'" + d_corp + "', " +
                  QString::number(d_sex) + ", " +
                  QString::number(d_age) + " " +
               ") ) ; ";

        QSqlQuery *query = new QSqlQuery(db);

        if ( mySQL.exec(this, sql, "Проверка терр-прикрепления", *query, true, db, data_app) &&
             query->size()>0 &&
             query->next() ) {
            QString code_mo = query->value(0).toString().trimmed();
            QString code_mp = query->value(1).toString().trimmed();
            QString code_ms = query->value(2).toString().trimmed();
            QString snils_mt = query->value(3).toString().trimmed();

            // проверка, нет ли в таблице участков другой записи врача
            QString sql_medter;
            sql_medter += "select snils_mt "
                          " from spr_medters t "
                          " where t.code_mo='" + code_mo + "' and "
                                " t.code_mp='" + code_mp + "' and "
                                " t.code_ms='" + code_ms + "' ; ";
            QSqlQuery *query_medter = new QSqlQuery(db);
            if ( mySQL.exec(this, sql_medter, "Проверка терапевта по справочнику участков", *query_medter, true, db, data_app) &&
                 query_medter->size()>0 &&
                 query_medter->next() ) {
                QString snils = query_medter->value(0).toString().simplified().trimmed();
                if (snils.size()==11) {
                    snils_mt = snils;
                }
            }

            // выставим в контроллах терр-прикрепление к найденной МО
            data_pers.assig_code_mo = code_mo;
            data_pers.assig_code_mp = code_mp;
            data_pers.assig_code_ms = code_ms;
            data_pers.assig_snils_mt = snils_mt;
            data_pers.assig_type = 1;
            data_pers.assig_date = QDate::currentDate();
            refresh_pers_assig_mo();
            refresh_pers_assig_mp();
            refresh_pers_assig_ms();
            ui->ch_assig_mt_by_medsite->setChecked(true);
            refresh_pers_assig_mt();
            ui->combo_pers_assig_type->setCurrentIndex(1);
            ui->date_pers_assig_date->setDate(QDate::currentDate());

            is_ok = true;

            // запомним успешность автоприкрепления
            /*bool res =*/ reg_assig_by_terr_ok ( data_app.ocato,
                                              ui->combo_pers_pan_reg_subj->currentData().toInt(),
                                              ui->combo_pers_pan_reg_dstr->currentData().toInt(),
                                              ui->combo_pers_pan_reg_city->currentData().toInt(),
                                              ui->combo_pers_pan_reg_nasp->currentData().toInt(),
                                              ui->combo_pers_pan_reg_strt->currentData().toInt(),
                                              ui->ln_pers_pan_reg_hous->text().toInt(),
                                              ui->ln_pers_pan_reg_corp->text(),
                                              ui->combo_pers_pan_sex->currentIndex(),
                                              ( (ui->date_pers_pan_birth->date()>QDate::currentDate().addYears(-18) ? 1 : 2) ) );

            if (QMessageBox::question(this,
                                      "Сохранить авто-прикрепление?",
                                      "Застрахованный прикреплён по адресу фактического проживания. \n\n"
                                      "Сохранить результаты автоматического прикрепления застрахованного лица по территориальному принципцу?",
                                      QMessageBox::Yes|QMessageBox::Cancel,
                                      QMessageBox::Yes)==QMessageBox::Yes) {
                on_b_save_assig_clicked();
            }
        }
        delete query;
    }

    if (!is_ok) {
        QMessageBox::warning(this,
                             "Авто-прикрепление не получилось...",
                             "Нет подходящего правила автоматического прикрепления застрахованных по территориальному принципу.\n\n"
                             "1) Проверьте правильность адреса  регистрации (проживания) застрахованного.\n\n"
                             "2) Если дом проживания застрахованного не входит ни в одну из известных территорий обслуживания МО -- "
                             "то прикрепление застрахованного к МО можно задать и сохранить вручную.");

        // сделаем запись о невозможности автоприкрепления
        /*bool res =*/ reg_assig_by_terr_gap( data_app.ocato,
                                          ui->combo_pers_pan_reg_subj->currentData().toInt(),
                                          ui->combo_pers_pan_reg_dstr->currentData().toInt(),
                                          ui->combo_pers_pan_reg_city->currentData().toInt(),
                                          ui->combo_pers_pan_reg_nasp->currentData().toInt(),
                                          ui->combo_pers_pan_reg_strt->currentData().toInt(),
                                          ui->ln_pers_pan_reg_hous->text().toInt(),
                                          ui->ln_pers_pan_reg_corp->text(),
                                          ui->combo_pers_pan_sex->currentIndex(),
                                          ( (ui->date_pers_pan_birth->date()>QDate::currentDate().addYears(-18) ? 1 : 2) ) );
    }

    return;
}




void persons_wnd::on_act_pers_sexage_triggered() {
    delete  print_pers_sexage_w;
    print_pers_sexage_w = new print_pers_sexage_wnd(db, data_app, settings, this);
    print_pers_sexage_w->exec();
}

void persons_wnd::on_act_assig_sexage_by_list_triggered() {
    delete  print_assig_sexage_by_list_w;
    print_assig_sexage_by_list_w = new print_assig_sexage_by_list_wnd(db, data_app, settings, this);
    print_assig_sexage_by_list_w->exec();
}

/*void persons_wnd::on_act_assig_sexage_all_mo_triggered() {
    delete  print_assig_sexage_all_mo_w;
    print_assig_sexage_all_mo_w = new print_assig_sexage_all_mo_wnd(db, data_app, settings, this);
    print_assig_sexage_all_mo_w->exec();
}*/

void persons_wnd::on_act_assig_by_MO_triggered() {
    delete print_assiglay_todate_w;
    print_assiglay_todate_w = new print_assiglay_todate_wnd(false, db, data_app, settings, this);
    print_assiglay_todate_w->exec();
    // откроем окно "Выгрузка прикреплений по МО"
    /*delete export_assig_by_mo_w;
    export_assig_by_mo_w = new export_assig_by_mo_wnd(db, data_app, settings, this);
    export_assig_by_mo_w->exec();*/
}

void persons_wnd::on_act_assig_letters_by_list_triggered() {
    delete  print_assig_letters_by_list_w;
    print_assig_letters_by_list_w = new print_assig_letters_by_list_wnd(db, data_app, settings, this);
    print_assig_letters_by_list_w->exec();
}

void persons_wnd::on_ch_pers_polis_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_polis_2->setChecked(false);
        ui->ch_pers_old_vs->setChecked(false);
    }
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_polis_2_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_polis->setChecked(false);
        ui->ch_pers_old_vs->setChecked(false);
    }
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_old_vs_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_polis->setChecked(false);
        ui->ch_pers_polis_2->setChecked(false);
    }
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_blanks_clicked(bool checked) {
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_errors_clicked(bool checked) {
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_actNget_clicked(bool checked) {
    refresh_persons_tab();
}

/*void persons_wnd::on_ch_pers_assig_clicked(bool checked) {
    if (checked)
        ui->ch_pers_assig_2->setChecked(false);
    refresh_persons_tab();
}*/
void persons_wnd::on_ch_pers_assig_2_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_assig_ter->setChecked(false);
        ui->ch_pers_assig_ter_2->setChecked(false);
        ui->ch_pers_assig_errors->setChecked(false);
    }
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_assig_ter_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_assig_2->setChecked(false);
        ui->ch_pers_assig_ter_2->setChecked(false);
        ui->ch_pers_assig_errors->setChecked(false);
    }
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_assig_ter_2_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_assig_2->setChecked(false);
        ui->ch_pers_assig_ter->setChecked(false);
        ui->ch_pers_assig_errors->setChecked(false);
    }
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_assig_errors_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_assig_2->setChecked(false);
        ui->ch_pers_assig_ter->setChecked(false);
        ui->ch_pers_assig_ter_2->setChecked(false);
    }
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_assig_mo_clicked(bool checked) {
    //ui->spin_pers_assig_mo->setVisible(checked);
    ui->spin_pers_assig_mo->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_assig_mt_clicked(bool checked) {
    ui->line_pers_assig_snils_mt->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_spin_pers_assig_mo_editingFinished() {
    ui->ch_pers_assig_mo->setChecked(true);
    refresh_persons_tab();
}
void persons_wnd::on_line_pers_assig_snils_mt_editingFinished() {
    ui->ch_pers_assig_mt->setChecked(true);
    refresh_persons_tab();
}

void persons_wnd::on_ch_pers_addr_reg_clicked(bool checked) {
    if (checked)
        ui->ch_pers_addr_reg_2->setChecked(false);
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_addr_reg_2_clicked(bool checked) {
    if (checked)
        ui->ch_pers_addr_reg->setChecked(false);
    refresh_persons_tab();
}



void persons_wnd::on_ch_pers_dates_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);

        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);
    }
    ui->date_pers_date_from->setVisible(checked);
    ui->date_pers_date_to->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_date_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);

        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);
    }
    ui->date_pers_date->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_day_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);

        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);
    }
    ui->date_pers_day->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_month_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);

        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);
    }
    ui->combo_pers_month->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_year_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);

        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);

        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);
    }
    ui->combo_pers_year->setVisible(checked);
    refresh_persons_tab();
}



void persons_wnd::on_ch_pol_dates_clicked(bool checked) {
    if (checked) {
        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);

        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);
    }
    ui->date_pol_date_from->setVisible(checked);
    ui->date_pol_date_to->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_pol_date_clicked(bool checked) {
    if (checked) {
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);

        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);
    }
    ui->date_pol_date->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_pol_day_clicked(bool checked) {
    if (checked) {
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);

        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);
    }
    ui->date_pol_day->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_pol_month_clicked(bool checked) {
    if (checked) {
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);

        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);
    }
    ui->combo_pol_month->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_pol_year_clicked(bool checked) {
    if (checked) {
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);

        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);
    }
    ui->combo_pol_year->setVisible(checked);
    refresh_persons_tab();
}





void persons_wnd::on_ch_insure_dates_clicked(bool checked) {
    if (checked) {
        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);

        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);
    }
    ui->date_insure_date_from->setVisible(checked);
    ui->date_insure_date_to->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_insure_date_clicked(bool checked) {
    if (checked) {
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);

        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);
    }
    ui->date_insure_date->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_insure_day_clicked(bool checked) {
    if (checked) {
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);

        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);
    }
    ui->date_insure_day->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_insure_month_clicked(bool checked) {
    if (checked) {
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_year->setChecked(false);
        ui->combo_insure_year->setVisible(false);

        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);
    }
    ui->combo_insure_month->setVisible(checked);
    refresh_persons_tab();
}
void persons_wnd::on_ch_insure_year_clicked(bool checked) {
    if (checked) {
        ui->ch_insure_dates->setChecked(false);
        ui->date_insure_date_from->setVisible(false);
        ui->date_insure_date_to->setVisible(false);
        ui->ch_insure_date->setChecked(false);
        ui->date_insure_date->setVisible(false);
        ui->ch_insure_day->setChecked(false);
        ui->date_insure_day->setVisible(false);
        ui->ch_insure_month->setChecked(false);
        ui->combo_insure_month->setVisible(false);

        ui->ch_pers_date->setChecked(false);
        ui->date_pers_date->setVisible(false);
        ui->ch_pers_dates->setChecked(false);
        ui->date_pers_date_from->setVisible(false);
        ui->date_pers_date_to->setVisible(false);
        ui->ch_pers_day->setChecked(false);
        ui->date_pers_day->setVisible(false);
        ui->ch_pers_month->setChecked(false);
        ui->combo_pers_month->setVisible(false);
        ui->ch_pers_year->setChecked(false);
        ui->combo_pers_year->setVisible(false);

        ui->ch_pol_date->setChecked(false);
        ui->date_pol_date->setVisible(false);
        ui->ch_pol_dates->setChecked(false);
        ui->date_pol_date_from->setVisible(false);
        ui->date_pol_date_to->setVisible(false);
        ui->ch_pol_day->setChecked(false);
        ui->date_pol_day->setVisible(false);
        ui->ch_pol_month->setChecked(false);
        ui->combo_pol_month->setVisible(false);
        ui->ch_pol_year->setChecked(false);
        ui->combo_pol_year->setVisible(false);
    }
    ui->combo_insure_year->setVisible(checked);
    refresh_persons_tab();
}




void persons_wnd::on_combo_pers_month_activated(int index) {
    refresh_persons_tab();
}
void persons_wnd::on_combo_pers_year_activated(int index) {
    refresh_persons_tab();
}

void persons_wnd::on_combo_pol_month_activated(int index) {
    refresh_persons_tab();
}
void persons_wnd::on_combo_pol_year_activated(int index) {
    refresh_persons_tab();
}

void persons_wnd::on_combo_insure_month_activated(int index) {
    refresh_persons_tab();
}
void persons_wnd::on_combo_insure_year_activated(int index) {
    refresh_persons_tab();
}

void persons_wnd::on_ch_pol_end_clicked(bool checked) {
    ui->date_pol_end->setVisible(checked);
    refresh_persons_tab();
}

void persons_wnd::on_date_pers_date_from_dateChanged(const QDate &date) {
    QDate date_from = ui->date_pers_date_from->date();
    QDate date_to   = ui->date_pers_date_to->date();
    if (date_from>date_to)
        ui->date_pers_date_to->setDate(date_from);
    refresh_persons_tab();
}
void persons_wnd::on_date_pers_date_to_dateChanged(const QDate &date) {
    QDate date_from = ui->date_pers_date_from->date();
    QDate date_to   = ui->date_pers_date_to->date();
    if (date_from>date_to)
        ui->date_pers_date_from->setDate(date_to);
    refresh_persons_tab();
}

void persons_wnd::on_date_pol_date_from_dateChanged(const QDate &date) {
    QDate date_from = ui->date_pol_date_from->date();
    QDate date_to   = ui->date_pol_date_to->date();
    if (date_from>date_to)
        ui->date_pol_date_to->setDate(date_from);
    refresh_persons_tab();
}
void persons_wnd::on_date_pol_date_to_dateChanged(const QDate &date) {
    QDate date_from = ui->date_pol_date_from->date();
    QDate date_to   = ui->date_pol_date_to->date();
    if (date_from>date_to)
        ui->date_pol_date_from->setDate(date_to);
    refresh_persons_tab();
}

void persons_wnd::on_date_insure_date_from_dateChanged(const QDate &date) {
    QDate date_from = ui->date_insure_date_from->date();
    QDate date_to   = ui->date_insure_date_to->date();
    if (date_from>date_to)
        ui->date_insure_date_to->setDate(date_from);
    refresh_persons_tab();
}
void persons_wnd::on_date_insure_date_to_dateChanged(const QDate &date) {
    QDate date_from = ui->date_insure_date_from->date();
    QDate date_to   = ui->date_insure_date_to->date();
    if (date_from>date_to)
        ui->date_insure_date_from->setDate(date_to);
    refresh_persons_tab();
}


void persons_wnd::on_ch_pers_tfoms_ok_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_tfoms_no->setChecked(false);
    }
    refresh_persons_tab();
}
void persons_wnd::on_ch_pers_tfoms_no_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_tfoms_ok->setChecked(false);
    }
    refresh_persons_tab();
}

void persons_wnd::on_date_pol_end_dateChanged(const QDate &date) {
    refresh_persons_tab();  }
void persons_wnd::on_date_pers_date_dateChanged(const QDate &date) {
    refresh_persons_tab();  }
void persons_wnd::on_date_pol_date_dateChanged(const QDate &date) {
    refresh_persons_tab();  }
void persons_wnd::on_date_insure_date_dateChanged(const QDate &date) {
    refresh_persons_tab();  }
void persons_wnd::on_date_pers_date_editingFinished() {
    refresh_persons_tab();  }
void persons_wnd::on_date_pol_date_editingFinished() {
    refresh_persons_tab();  }
void persons_wnd::on_date_insure_date_editingFinished() {
    refresh_persons_tab();  }
void persons_wnd::on_date_pers_day_dateChanged(const QDate &date) {
    refresh_persons_tab();  }
void persons_wnd::on_date_pol_day_dateChanged(const QDate &date) {
    refresh_persons_tab();  }
void persons_wnd::on_date_insure_day_dateChanged(const QDate &date) {
    refresh_persons_tab();  }
void persons_wnd::on_date_pers_day_editingFinished() {
    refresh_persons_tab();  }
void persons_wnd::on_date_pol_day_editingFinished() {
    refresh_persons_tab();  }
void persons_wnd::on_date_insure_day_editingFinished() {
    refresh_persons_tab();  }

void persons_wnd::on_line_pers_fam_editingFinished() {
    refresh_persons_tab();  }
void persons_wnd::on_line_pers_im_editingFinished() {
    refresh_persons_tab();  }
void persons_wnd::on_line_pers_ot_editingFinished() {
    refresh_persons_tab();  }
void persons_wnd::on_line_pers_snils_editingFinished() {
    refresh_persons_tab();  }
void persons_wnd::on_line_pers_enp_editingFinished() {
    refresh_persons_tab();
}
void persons_wnd::on_line_pers_vs_editingFinished() {
    if (ui->ch_pers_vs_2->isChecked()) {
        int i1 = ui->line_pers_vs->text().toInt();
        int i2 = ui->line_pers_vs_2->text().toInt();
        if (i1<=0) {
            ui->line_pers_vs_2->setText("1");
            i1 = 1;
        }
        if (i1>i2) {
            ui->line_pers_vs_2->setText(QString::number(i1));
        }
    }
    refresh_persons_tab();
}
void persons_wnd::on_line_pers_vs_2_editingFinished() {
    if (ui->ch_pers_vs_2->isChecked()) {
        int i1 = ui->line_pers_vs->text().toInt();
        int i2 = ui->line_pers_vs_2->text().toInt();
        if (i1>i2 || i1<=0) {
            ui->line_pers_vs_2->setText(QString::number(i1));
        }
    }
    refresh_persons_tab();
}
void persons_wnd::on_combo_folder_activated(int index) {
    // сохраним данные в settings
    settings.beginGroup("flags");

    data_app.use_folders = ui->ch_folder->isChecked();
    settings.setValue("use_folders", data_app.use_folders);

    data_app.default_folder = ui->combo_folder->currentText();
    settings.setValue("default_folder", data_app.default_folder.toUtf8());

    settings.endGroup();
    settings.sync();

    refresh_persons_tab();
}

void persons_wnd::on_act_sessions_triggered() {
    delete  sessions_w;
    sessions_w = new sessions_wnd(db, this);
    sessions_w->exec();
}

void persons_wnd::on_combo_docs_pan_type_currentIndexChanged(int index) {
    if (ui->combo_docs_pan_type->currentData().toInt()==25)
        ui->line_docs_pan_ser->setText("ВУ");
    if (ui->combo_docs_pan_type->currentData().toInt()!=25 && ui->line_docs_pan_ser->text()=="ВУ")
        ui->line_docs_pan_ser->setText("");
}

void persons_wnd::on_act_pol_pg_triggered() {
    delete  print_pol_pg_w;
    print_pol_pg_w = new print_pol_pg_wnd(db, data_app, settings, this);
    print_pol_pg_w->exec();
}

void persons_wnd::on_act_pol_monitoring_triggered() {
    delete  print_pol_monitoring_w;
    print_pol_monitoring_w = new print_pol_monitoring_wnd(db, data_app, settings, this);
    print_pol_monitoring_w->exec();
}

void persons_wnd::on_bn_pers_viz_change_clicked() {
    delete  change_vizit_w;
    s_data_vizit data_vizit;
    s_data_event data_event;

    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_events || !ui->tab_events->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите полис, события которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
        return;
    }

    if (data_app.is_call || data_app.is_locl) {
        // недоступно в ПВП
        ui->group_person_docs->setChecked(false);
        QApplication::processEvents();
        QMessageBox::warning(this, "Доступно только в головном офисе",
                             "Редактирование данных застрахованных доступно только в головном офисе");
        return;
    }

    // проверим выделенную строку полиса
    QModelIndexList indexes_pol = ui->tab_polises->selectionModel()->selection().indexes();

    if (indexes_pol.size()>0) {
        QModelIndex index_pol = indexes_pol.front();

        // данные застрахованного
        int id_polis = model_polises.data(model_polises.index(index_pol.row(), 0), Qt::EditRole).toInt();


        // проверим выделенную строку
        QModelIndexList indexes = ui->tab_events->selectionModel()->selection().indexes();

        if (indexes.size()>0) {
            QModelIndex index = indexes.front();

            // данные события
            data_event.id          = model_events.data(model_events.index(index.row(), 8), Qt::EditRole).toInt();
            data_event.event_code  = model_events.data(model_events.index(index.row(),10), Qt::EditRole).toString();
            data_event.event_dt    = model_events.data(model_events.index(index.row(), 9), Qt::EditRole).toDateTime();
            data_event.event_status= model_events.data(model_events.index(index.row(),12), Qt::EditRole).toInt();
            //data_event.send_sms  = model_events.data(model_events.index(index.row(),13), Qt::EditRole).toInt()>0;
            data_event.dt_ins      = model_events.data(model_events.index(index.row(),18), Qt::EditRole).toDate();
            data_event.dt_upd      = model_events.data(model_events.index(index.row(),19), Qt::EditRole).toDate();

            data_event.id_point    = model_events.data(model_events.index(index.row(),22), Qt::EditRole).toInt();
            data_event.id_operator = model_events.data(model_events.index(index.row(),23), Qt::EditRole).toInt();
            data_event.point_name  = model_events.data(model_events.index(index.row(),26), Qt::EditRole).toString();
            data_event.operator_fio= model_events.data(model_events.index(index.row(),27), Qt::EditRole).toString();
            data_event.id_UDL      = model_events.data(model_events.index(index.row(),29), Qt::EditRole).toInt();
            data_event.id_DRP      = model_events.data(model_events.index(index.row(),30), Qt::EditRole).toInt();

            // данные визита
            data_vizit.id           = model_events.data(model_events.index(index.row(), 0), Qt::EditRole).toInt();
            data_vizit.date         = model_events.data(model_events.index(index.row(), 1), Qt::EditRole).toDate();
            data_vizit.v_method     = model_events.data(model_events.index(index.row(), 2), Qt::EditRole).toInt();
            data_vizit.has_petition = model_events.data(model_events.index(index.row(), 3), Qt::EditRole).toInt()>0;
            data_vizit.r_smo        = model_events.data(model_events.index(index.row(), 4), Qt::EditRole).toInt();
            data_vizit.r_polis      = model_events.data(model_events.index(index.row(), 5), Qt::EditRole).toInt();
            data_vizit.f_polis      = model_events.data(model_events.index(index.row(), 6), Qt::EditRole).toInt();
            data_vizit.dt_ins       = model_events.data(model_events.index(index.row(),16), Qt::EditRole).toDate();
            data_vizit.dt_upd       = model_events.data(model_events.index(index.row(),17), Qt::EditRole).toDate();

            data_vizit.id_point     = model_events.data(model_events.index(index.row(),20), Qt::EditRole).toInt();
            data_vizit.id_operator  = model_events.data(model_events.index(index.row(),21), Qt::EditRole).toInt();
            data_vizit.point_name   = model_events.data(model_events.index(index.row(),24), Qt::EditRole).toString();
            data_vizit.operator_fio = model_events.data(model_events.index(index.row(),25), Qt::EditRole).toString();

            change_vizit_w = new change_vizit_wnd(db, data_vizit, data_event, data_app, settings, this);
            if (change_vizit_w->exec()) {
                this->setCursor(Qt::WaitCursor);
                db.transaction();

                // заменим данные события
                QString sql_act;
                sql_act += "update events "
                           "   set event_code='" + data_event.event_code + "', "
                           "       event_dt='" + data_event.event_dt.toString("yyyy-MM-dd") + "', "
                           "       id_udl=" + QString::number(data_event.id_UDL) + ", "
                           "       id_drp=" + QString::number(data_event.id_DRP) + ", ";
                if (!data_app.is_tech)
                     sql_act += "       id_operator=" + QString::number(data_app.id_operator) + ", ";
                else sql_act += "       id_operator=" + QString::number(data_event.id_operator) + ", ";
                sql_act += "       status=" + QString::number(data_event.event_status) + ", "
                           + QString(data_app.point_rights<3 ? ("     id_point=" + QString::number(data_event.id_point) + ", ") : "" ) +
                           "       duty_field = duty_field||'  ! '||CURRENT_DATE||' - это событие было отредактировано вручную через диалог правки события/визита.' "
                           //"       send_sms=" + QString(data_event.send_sms ? "1" : "NULL") + " "
                           " where id=" + QString::number(data_event.id) + " ; ";
                QSqlQuery *query_act = new QSqlQuery(db);
                bool res_act = mySQL.exec(this, sql_act, QString("Правка события вручную"), *query_act, true, db, data_app);

                if (!res_act) {
                    delete query_act;
                    db.rollback();
                    QMessageBox::warning(this, "Ошибка при правке события", "При правке события вручную без отправки в ТФОМС произошла неожиданная ошибка");
                } else {
                    delete query_act;

                    // заменим данные визита
                    QString sql_viz;
                    sql_viz += "update vizits ";
                    sql_viz += "   set v_date='" + data_vizit.date.toString("yyyy-MM-dd") + "', ";
                    sql_viz += "       v_method=" + QString::number(data_vizit.v_method) + ", ";
                    sql_viz += "       has_petition=" + QString(data_vizit.has_petition ? "1" : "NULL") + ", ";
                    sql_viz += "       r_smo=" + QString::number(data_vizit.r_smo) + ", ";
                    /*if (!data_app.is_tech) {
                        sql_viz += "       id_point=" + QString::number(data_app.id_point) + ", ";
                        sql_viz += "       id_operator=" + QString::number(data_app.id_operator) + ", ";
                    }*/
                    sql_act += "       id_point=" + QString::number(data_vizit.id_point) + ", ";
                    sql_act += "       id_operator=" + QString::number(data_vizit.id_operator) + ", ";
                    sql_viz += "       r_polis=" + QString::number(data_vizit.r_polis) + ", ";
                    sql_viz += "       f_polis=" + QString::number(data_vizit.f_polis) + " ";
                    sql_viz += " where id=" + QString::number(data_vizit.id) + " ; ";
                    QSqlQuery *query_viz = new QSqlQuery(db);
                    bool res_viz = mySQL.exec(this, sql_viz, QString("Правка визита вручную"), *query_viz, true, db, data_app);

                    if (!res_viz) {
                        delete query_viz;
                        db.rollback();
                        QMessageBox::warning(this, "Ошибка при правке визита", "При правке визита вручную без отправки в ТФОМС произошла неожиданная ошибка");
                    } else {
                        delete query_viz;
                        db.commit();
                    }
                }

                refresh_events_tab(id_polis);
                this->setCursor(Qt::ArrowCursor);
            }
        } else {
            QMessageBox::warning(this, "Событие/визит не выбраны!", "Выберите событие/визит, данные которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
        }
    } else {
        QMessageBox::warning(this, "Полис не выбран!", "Сначала выберите полис, событие/визит которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
    }
}

void persons_wnd::on_tab_events_activated(const QModelIndex &index) {
    on_bn_pers_viz_change_clicked();
}




void persons_wnd::on_bn_pers_drop_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите полис, события которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
        return;
    }

    // проверим выделенную строку персоны
    QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes_pers.size()>0) {
        QModelIndex index_pers = indexes_pers.front();
        // данные застрахованного
        int id_person = model_persons.data(model_persons.index(index_pers.row(), 0), Qt::EditRole).toInt();
        QString FIO = model_persons.data(model_persons.index(index_pers.row(), 3), Qt::EditRole).toString() + " " +
                      model_persons.data(model_persons.index(index_pers.row(), 4), Qt::EditRole).toString() + " " +
                      model_persons.data(model_persons.index(index_pers.row(), 5), Qt::EditRole).toString() + " ";

        QString str = QInputDialog::getText(this,"Введите пароль",
                                            QString("Вы действительно хотите удалить из базы полисов все данные выбранной персоны?\n"
                                                    "ID = " + QString::number(id_person) + "\n"
                                                    "ФИО = " + FIO + "\n\n"
                                                    "Для того чтобы удалить запись выбранной персоны введите пароль\n") +
                                            (data_app.is_head||data_app.is_tech ? "УДАЛИТЬ" : "***")).toUpper();
        if (str.isEmpty()) {
            return;
        } else if (str!="УДАЛИТЬ" && str!="ELFKBNM") {
            QMessageBox::warning(this,"Отказ","Неправильный пароль");
            return;
        }

        db.transaction();

        try {

            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            // проверка зависимых таблиц
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            // -------------------
            // PERSONS_PHOTO
            // -------------------
            QString sql_test_photo = "select count(*) from persons_photo where id_person=" + QString::number(id_person) + " ; ";
            QSqlQuery *query_test_photo = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_test_photo, "Подсчёт числа фото персоны", *query_test_photo, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При подсчёте числа фотографий/подписей персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }
            query_test_photo->next();
            int cnt_photo = query_test_photo->value(0).toInt();
            if (cnt_photo>0) {
                if (QMessageBox::question(this, "У выбранной персоны есть фотографии",
                                          "Для выбранной персоны в базе данных есть записи " + QString::number(cnt_photo) + " фотографий/подписей.\n\n"
                                          "Для удаления персоны надо удалить эти данные.\n\n"
                                          "Удалить эти фотографии/подписи?",
                                          QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
                    QString sql_del_photo = "delete from persons_photo where id_person =" + QString::number(id_person) + " ; ";
                    QSqlQuery *query_del_photo = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_del_photo, "Удаление фотографий персоны", *query_del_photo, true, db, data_app)) {
                        db.rollback();
                        QMessageBox::critical(this, "Ошибка БД",
                                              "При удалении фотографий/подписей персоны произошла ошибка.\n\n"
                                              "Операция отменена.");
                        return;
                    }
                } else {
                    db.rollback();
                    QMessageBox::critical(this, "Операция отменена", "Все сделанные изменения отменены.");
                    return;
                }
            }

            // -------------------
            // PERSONS_DOCS
            // -------------------
            QString sql_test_docs = "select count(*) from persons_docs where id_person=" + QString::number(id_person) + " ; ";
            QSqlQuery *query_test_docs = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_test_docs, "Подсчёт числа фото персоны", *query_test_docs, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При подсчёте числа документов персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }
            query_test_docs->next();
            int cnt_docs = query_test_docs->value(0).toInt();
            if (cnt_docs>0) {
                if (QMessageBox::question(this, "У выбранной персоны есть документы",
                                          "Для выбранной персоны в базе данных есть записи " + QString::number(cnt_docs) + " документов.\n\n"
                                          "Для удаления персоны надо удалить эти данные.\n\n"
                                          "Удалить эти документы?",
                                          QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
                    QString sql_del_docs = "delete from persons_docs where id_person =" + QString::number(id_person) + " ; ";
                    QSqlQuery *query_del_docs = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_del_docs, "Удаление документов персоны", *query_del_docs, true, db, data_app)) {
                        db.rollback();
                        QMessageBox::critical(this, "Ошибка БД",
                                              "При удалении документов персоны произошла ошибка.\n\n"
                                              "Операция отменена.");
                        return;
                    }
                } else {
                    db.rollback();
                    QMessageBox::critical(this, "Операция отменена", "Все сделанные изменения отменены.");
                    return;
                }
            }

            // -------------------
            // vizits
            // -------------------
            QString sql_test_vizits = "select count(*) from vizits where id_person=" + QString::number(id_person) + " ; ";
            QSqlQuery *query_test_vizits = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_test_vizits, "Подсчёт числа визитов персоны", *query_test_vizits, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При подсчёте числа визитов персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }
            query_test_vizits->next();
            int cnt_vizits = query_test_vizits->value(0).toInt();
            if (cnt_vizits>0) {
                if (QMessageBox::question(this, "У выбранной персоны записаны визиты",
                                          "Для выбранной персоны в базе данных есть записи " + QString::number(cnt_vizits) + " визитов.\n\n"
                                          "Для удаления персоны надо удалить эти данные.\n\n"
                                          "Удалить записи этих визитов?",
                                          QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
                    QString sql_del_vizits = "delete from vizits where id_person =" + QString::number(id_person) + " ; ";
                    QSqlQuery *query_del_vizits = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_del_vizits, "Удаление визитов персоны", *query_del_vizits, true, db, data_app)) {
                        db.rollback();
                        QMessageBox::critical(this, "Ошибка БД",
                                              "При удалении визитов персоны произошла ошибка.\n\n"
                                              "Операция отменена.");
                        return;
                    }
                } else {
                    db.rollback();
                    QMessageBox::critical(this, "Операция отменена", "Все сделанные изменения отменены.");
                    return;
                }
            }

            // -------------------
            // PERSONS_OLD
            // -------------------
            QString sql_test_old = "select count(*) from persons_old where id_person=" + QString::number(id_person) + " ; ";
            QSqlQuery *query_test_old = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_test_old, "Подсчёт числа старых записей персоны", *query_test_old, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При подсчёте числа старых записей персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }
            query_test_old->next();
            int cnt_old = query_test_old->value(0).toInt();
            if (cnt_old>0) {
                if (QMessageBox::question(this, "У выбранной персоны есть старые записи",
                                          "Для выбранной персоны в базе данных есть записи " + QString::number(cnt_old) + " старых записей.\n\n"
                                          "Для удаления персоны надо удалить эти данные.\n\n"
                                          "Удалить эти старые записи?",
                                          QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
                    QString sql_del_old = "delete from persons_old where id_person =" + QString::number(id_person) + " ; ";
                    QSqlQuery *query_del_old = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_del_old, "Удаление старых записей персоны", *query_del_old, true, db, data_app)) {
                        db.rollback();
                        QMessageBox::critical(this, "Ошибка БД",
                                              "При удалении старых записей персоны произошла ошибка.\n\n"
                                              "Операция отменена.");
                        return;
                    }
                } else {
                    db.rollback();
                    QMessageBox::critical(this, "Операция отменена", "Все сделанные изменения отменены.");
                    return;
                }
            }

            // -------------------
            // PERSONS_ASSIG
            // -------------------
            QString sql_test_assig = "select count(*) from persons_assig where id_person=" + QString::number(id_person) + " ; ";
            QSqlQuery *query_test_assig = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_test_assig, "Подсчёт числа записей прикрепления персоны", *query_test_assig, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При подсчёте числа записей прикрепления персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }
            query_test_assig->next();
            int cnt_assig = query_test_assig->value(0).toInt();
            if (cnt_assig>0) {
                if (QMessageBox::question(this, "У выбранной персоны есть записи прикрепления персоны",
                                          "Для выбранной персоны в базе данных есть записи " + QString::number(cnt_assig) + " записей прикрепления персоны.\n\n"
                                          "Для удаления персоны надо удалить эти данные.\n\n"
                                          "Удалить эти записи прикрепления?",
                                          QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
                    QString sql_del_assig = "delete from persons_assig where id_person =" + QString::number(id_person) + " ; ";
                    QSqlQuery *query_del_assig = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_del_assig, "Удаление записей прикрепления персоны", *query_del_assig, true, db, data_app)) {
                        db.rollback();
                        QMessageBox::critical(this, "Ошибка БД",
                                              "При удалении записей прикрепления персоны произошла ошибка.\n\n"
                                              "Операция отменена.");
                        return;
                    }
                } else {
                    db.rollback();
                    QMessageBox::critical(this, "Операция отменена", "Все сделанные изменения отменены.");
                    return;
                }
            }

            // -------------------
            // BLANKS_VS
            // -------------------
            QString sql_test_bvs = "select count(*) from blanks_vs where id_person=" + QString::number(id_person) + " ; ";
            QSqlQuery *query_test_bvs = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_test_bvs, "Подсчёт числа бланков ВС персоны", *query_test_bvs, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При подсчёте числа бланков ВС персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }
            query_test_bvs->next();
            int cnt_bvs = query_test_bvs->value(0).toInt();
            if (cnt_bvs>0) {
                if (QMessageBox::question(this, "У выбранной персоны есть бланков ВС",
                                          "Для выбранной персоны в базе данных есть записи " + QString::number(cnt_bvs) + " записей бланков ВС.\n\n"
                                          "Для удаления персоны надо отвязать эти бланки ВС от персоны.\n\n"
                                          "Отвязать эти бланки ВС от удаляемой персоны?\n"
                                          "(Бланки будут помечены как испорченные)",
                                          QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
                    QString sql_upd_bvs = "update blanks_vs "
                                          "   set id_person=NULL,"
                                          "       id_polis=NULL, "
                                          "       status=-5, "
                                          "       date_spent = coalesce(date_spent, CURRENT_DATE) "
                                          " where id_person =" + QString::number(id_person) + " ; ";
                    QSqlQuery *query_upd_bvs = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_upd_bvs, "Удаление бланков ВС персоны", *query_upd_bvs, true, db, data_app)) {
                        db.rollback();
                        QMessageBox::critical(this, "Ошибка БД",
                                              "При отвязке бланков ВС от персоны произошла ошибка.\n\n"
                                              "Операция отменена.");
                        return;
                    }
                } else {
                    db.rollback();
                    QMessageBox::critical(this, "Операция отменена", "Все сделанные изменения отменены.");
                    return;
                }
            }

            // -------------------
            // BLANKS_POL
            // -------------------
            QString sql_test_bpol = "select count(*) from blanks_pol where id_person=" + QString::number(id_person) + " ; ";
            QSqlQuery *query_test_bpol = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_test_bpol, "Подсчёт числа бланков полисов персоны", *query_test_bpol, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При подсчёте числа бланков полисов персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }
            query_test_bpol->next();
            int cnt_bpol = query_test_bpol->value(0).toInt();
            if (cnt_bpol>0) {
                if (QMessageBox::question(this, "У выбранной персоны есть полисы",
                                          "Для выбранной персоны в базе данных есть записи " + QString::number(cnt_bpol) + " бланков полисов единого образца.\n\n"
                                          "Для удаления персоны надо отвязать эти бланки полисов от персоны.\n\n"
                                          "Отвязать эти бланки от удаляемой персоны?\n(Бланки будут помечены как утерянные)",
                                          QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
                    QString sql_del_bpol = "update blanks_pol set id_person=NULL, id_polis=NULL, status=-3 where id_person =" + QString::number(id_person) + " ; ";
                            //"delete from blanks_pol where id_person =" + QString::number(id_person) + " ; ";
                    QSqlQuery *query_del_bpol = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_del_bpol, "Удаление бланков полисов персоны", *query_del_bpol, true, db, data_app)) {
                        db.rollback();
                        QMessageBox::critical(this, "Ошибка БД",
                                              "При удалении бланков полисов персоны произошла ошибка.\n\n"
                                              "Операция отменена.");
                        return;
                    }
                } else {
                    db.rollback();
                    QMessageBox::critical(this, "Операция отменена", "Все сделанные изменения отменены.");
                    return;
                }
            }

            /*// -------------------
            // POLISES_HISTORY
            // -------------------
            QString sql_test_pol_hist = "select count(*) from polises_history "
                                        " where id_polis in "
                                        "   (select id from polises where id_person=" + QString::number(id_person) + ") ; ";
            QSqlQuery *query_test_pol_hist = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_test_pol_hist, "Подсчёт числа записей старых полисов персоны", *query_test_pol_hist, true)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При подсчёте числа записей старых полисов персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }
            query_test_pol_hist->next();
            int cnt_pol_hist = query_test_pol_hist->value(0).toInt();
            if (cnt_pol_hist>0) {
                if (QMessageBox::question(this, "У выбранной персоны есть записи старых полисов",
                                          "Для выбранной персоны в базе данных есть записи " + QString::number(cnt_pol_hist) + " старых записей полисов.\n\n"
                                          "Для удаления персоны надо удалить эти данные.\n\n"
                                          "Удалить эти старые записи полисов?",
                                          QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
                    QString sql_del_pol_hist = "delete from polises_history "
                                               " where id_polis in "
                                               "   (select id from polises where id_person=" + QString::number(id_person) + ") ; ";
                    QSqlQuery *query_del_pol_hist = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_del_pol_hist, "Удаление полисов персоны", *query_del_pol_hist, true)) {
                        db.rollback();
                        QMessageBox::critical(this, "Ошибка БД",
                                              "При удалении полисов персоны произошла ошибка.\n\n"
                                              "Операция отменена.");
                        return;
                    }
                } else {
                    db.rollback();
                    QMessageBox::critical(this, "Операция отменена", "Все сделанные изменения отменены.");
                    return;
                }
            }*/

            // -------------------
            // files_r_evts
            // -------------------
            QString sql_test_r_acts = "select count(*) from files_r_evts "
                                      " where id_event in "
                                      "   (select a.id from events a join polises p on(p.id=a.id_polis) where p.id_person=" + QString::number(id_person) + ") ; ";
            QSqlQuery *query_test_r_acts = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_test_r_acts, "Подсчёт числа ссылок на отосланные в фонд файлы", *query_test_r_acts, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При подсчёте числа ссылок на отосланные в фонд файлы произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }
            query_test_r_acts->next();
            int cnt_r_acts = query_test_r_acts->value(0).toInt();
            if (cnt_r_acts>0) {
                if (QMessageBox::question(this, "У выбранной персоны есть ссылки на отосланные в фонд файлы",
                                          "Для выбранной персоны в базе данных есть записи " + QString::number(cnt_r_acts) + " ссылок на отосланные в фонд файлы.\n\n"
                                          "Для удаления персоны надо удалить эти данные.\n\n"
                                          "Удалить эти ссылки на отосланные в фонд файлы?",
                                          QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
                    QString sql_del_r_acts = "delete from files_r_evts "
                                             " where id_event in "
                                             "   (select a.id from events a join polises p on(p.id=a.id_polis) where p.id_person=" + QString::number(id_person) + ") ; ";
                    QSqlQuery *query_del_r_acts = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_del_r_acts, "Удаление полисов персоны", *query_del_r_acts, true, db, data_app)) {
                        db.rollback();
                        QMessageBox::critical(this, "Ошибка БД",
                                              "При удалении ссылок на отосланные в фонд файлы произошла ошибка.\n\n"
                                              "Операция отменена.");
                        return;
                    }
                } else {
                    db.rollback();
                    QMessageBox::critical(this, "Операция отменена", "Все сделанные изменения отменены.");
                    return;
                }
            }

            // -------------------
            // eventS
            // -------------------
            QString sql_test_acts = "select count(*) from events "
                                    " where id_polis in "
                                    "   (select id from polises where id_person=" + QString::number(id_person) + ") ; ";
            QSqlQuery *query_test_acts = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_test_acts, "Подсчёт числа событий полисов персоны", *query_test_acts, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При подсчёте числа событий полисов персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }
            query_test_acts->next();
            int cnt_acts = query_test_acts->value(0).toInt();
            if (cnt_acts>0) {
                if (QMessageBox::question(this, "У выбранной персоны есть сохранённые события",
                                          "Для выбранной персоны в базе данных сохранены записи " + QString::number(cnt_acts) + " событий.\n\n"
                                          "Для удаления персоны надо удалить эти данные.\n\n"
                                          "Удалить эти события?",
                                          QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
                    QString sql_del_acts = "delete from events "
                                           " where id_polis in "
                                           "   (select id from polises where id_person=" + QString::number(id_person) + ") ; ";
                    QSqlQuery *query_del_acts = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_del_acts, "Удаление событий полисов персоны", *query_del_acts, true, db, data_app)) {
                        db.rollback();
                        QMessageBox::critical(this, "Ошибка БД",
                                              "При удалении событий полисов персоны произошла ошибка.\n\n"
                                              "Операция отменена.");
                        return;
                    }
                } else {
                    db.rollback();
                    QMessageBox::critical(this, "Операция отменена", "Все сделанные изменения отменены.");
                    return;
                }
            }

            // -------------------
            // POLISES
            // -------------------
            QString sql_test_pol = "select count(*) from polises where id_person=" + QString::number(id_person) + " ; ";
            QSqlQuery *query_test_pol = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_test_pol, "Подсчёт числа полисов персоны", *query_test_pol, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При подсчёте числа полисов персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }
            query_test_pol->next();
            int cnt_pol = query_test_pol->value(0).toInt();
            if (cnt_pol>0) {
                if (QMessageBox::question(this, "У выбранной персоны есть полисы",
                                          "Для выбранной персоны в базе данных есть записи " + QString::number(cnt_pol) + " полисов.\n\n"
                                          "Для удаления персоны надо удалить эти данные.\n\n"
                                          "Удалить эти полисы?",
                                          QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
                    QString sql_del_pol = "delete from polises where id_person =" + QString::number(id_person) + " ; ";
                    QSqlQuery *query_del_pol = new QSqlQuery(db);
                    if (!mySQL.exec(this, sql_del_pol, "Удаление полисов персоны", *query_del_pol, true, db, data_app)) {
                        db.rollback();
                        QMessageBox::critical(this, "Ошибка БД",
                                              "При удалении полисов персоны произошла ошибка.\n\n"
                                              "Операция отменена.");
                        return;
                    }
                } else {
                    db.rollback();
                    QMessageBox::critical(this, "Операция отменена", "Все сделанные изменения отменены.");
                    return;
                }
            }

            // ---------------------------------
            // !! СОБСТВЕННО УДАЛЕНИЕ ПЕРСОНЫ !!
            // ---------------------------------
            //QString sql_del_pers = "delete from persons where id=" + QString::number(id_person) + " ; ";
            QString sql_del_pers = "update persons set status=-666 where id=" + QString::number(id_person) + " ; ";
            QSqlQuery *query_del_pers = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_del_pers, "Удаление персоны", *query_del_pers, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При удалении персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }

            // Коммит изменений
            db.commit();

            refresh_persons_tab();

        } catch (...) {
            db.rollback();
            QMessageBox::critical(this, "Непредвиденная ошибка", "Проверьте соединение с базой данных");
        }
    } else {
        QMessageBox::warning(this, "Ничего не выбрано", "Выберите строку персоны для удаления.");
    }
}


void persons_wnd::on_bn_pers_pol_change_clicked() {
    if (data_app.is_call || data_app.is_locl) {
        // недоступно в ПВП
        ui->group_person_docs->setChecked(false);
        QApplication::processEvents();
        QMessageBox::warning(this, "Доступно только в головном офисе",
                             "Редактирование данных застрахованных доступно только в головном офисе");
        return;
    }

    delete  change_polis_w;
    s_data_polis data_polis;

    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_events || !ui->tab_polises->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите полис, события которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
        return;
    }

    // проверим выделенную строку персоны
    QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes_pers.size()>0) {
        QModelIndex index_pers = indexes_pers.front();

        // данные застрахованного
        int id_person = model_persons.data(model_persons.index(index_pers.row(), 0), Qt::EditRole).toInt();
        int id_polis  = model_persons.data(model_persons.index(index_pers.row(),65), Qt::EditRole).toInt();

        // проверим выделенную строку полиса
        QModelIndexList indexes_pol = ui->tab_polises->selectionModel()->selection().indexes();

        if (indexes_pol.size()>0) {
            QModelIndex index_pol = indexes_pol.front();

            // данные застрахованного
            data_polis.id = model_polises.data(model_polises.index(index_pol.row(), 0), Qt::EditRole).toInt();

            data_polis.pol_v = model_polises.data(model_polises.index(index_pol.row(), 6), Qt::EditRole).toInt();
            data_polis.has_enp = !(model_polises.data(model_polises.index(index_pol.row(), 4), Qt::EditRole).isNull());
            data_polis.enp = model_polises.data(model_polises.index(index_pol.row(), 4), Qt::EditRole).toString();
            if (data_polis.enp.trimmed().simplified().length()<16) {
                data_polis.has_enp = false;
                data_polis.enp = data_polis.enp.trimmed().simplified();
            }
            data_polis.has_pol_sernum = !(model_polises.data(model_polises.index(index_pol.row(), 11), Qt::EditRole).isNull());
            data_polis.pol_ser = model_polises.data(model_polises.index(index_pol.row(), 10), Qt::EditRole).toString();
            if (data_polis.pol_ser.trimmed().simplified().length()<1) {
                data_polis.pol_ser = data_polis.pol_ser.trimmed().simplified();
            }
            data_polis.pol_num = model_polises.data(model_polises.index(index_pol.row(), 11), Qt::EditRole).toString();
            if (data_polis.pol_num.trimmed().simplified().length()<3) {
                data_polis.has_pol_sernum = false;
                data_polis.pol_ser = data_polis.pol_ser.trimmed().simplified();
                data_polis.pol_num = data_polis.pol_num.trimmed().simplified();
            }
            data_polis.has_vs_num = !(model_polises.data(model_polises.index(index_pol.row(), 9), Qt::EditRole).isNull());
            data_polis.vs_num = model_polises.data(model_polises.index(index_pol.row(), 9), Qt::EditRole).toString();
            if (data_polis.vs_num.trimmed().simplified().length()<2) {
                data_polis.has_vs_num = false;
                data_polis.vs_num = data_polis.vs_num.trimmed().simplified();
            }
            data_polis.has_uec_num = !(model_polises.data(model_polises.index(index_pol.row(), 12), Qt::EditRole).isNull());
            data_polis.uec_num = model_polises.data(model_polises.index(index_pol.row(), 12), Qt::EditRole).toString();
            if (data_polis.uec_num.trimmed().simplified().length()<2) {
                data_polis.has_uec_num = false;
                data_polis.uec_num = data_polis.uec_num.trimmed().simplified();
            }
            data_polis.has_tfoms_date = !(model_polises.data(model_polises.index(index_pol.row(), 35), Qt::EditRole).isNull());
            data_polis.tfoms_date = model_polises.data(model_polises.index(index_pol.row(), 35), Qt::EditRole).toDate();
            data_polis.has_date_sms_pol = !(model_polises.data(model_polises.index(index_pol.row(), 36), Qt::EditRole).isNull());
            data_polis.date_sms_pol = model_polises.data(model_polises.index(index_pol.row(), 36), Qt::EditRole).toDate();

            data_polis.has_date_begin = !(model_polises.data(model_polises.index(index_pol.row(), 13), Qt::EditRole).isNull());
            data_polis.date_begin = model_polises.data(model_polises.index(index_pol.row(), 13), Qt::EditRole).toDate();
            data_polis.has_date_end = !(model_polises.data(model_polises.index(index_pol.row(), 14), Qt::EditRole).isNull());
            data_polis.date_end = model_polises.data(model_polises.index(index_pol.row(), 14), Qt::EditRole).toDate();
            data_polis.has_date_stop = !(model_polises.data(model_polises.index(index_pol.row(), 15), Qt::EditRole).isNull());
            data_polis.date_stop = model_polises.data(model_polises.index(index_pol.row(), 15), Qt::EditRole).toDate();
            data_polis.in_erp = model_polises.data(model_polises.index(index_pol.row(), 16), Qt::EditRole).toInt();    // 0 - нет, 1 - да
            data_polis.order_num = model_polises.data(model_polises.index(index_pol.row(), 17), Qt::EditRole).toString();
            data_polis.order_date = model_polises.data(model_polises.index(index_pol.row(), 18), Qt::EditRole).toDate();
            data_polis.f_polis = model_polises.data(model_polises.index(index_pol.row(), 19), Qt::EditRole).toInt();      // форма бланка

            data_polis.has_date_activate = !(model_polises.data(model_polises.index(index_pol.row(), 37), Qt::EditRole).isNull());
            data_polis.date_activate     = model_polises.data(model_polises.index(index_pol.row(), 37), Qt::EditRole).toDate();
            data_polis.has_date_get2hand = !(model_polises.data(model_polises.index(index_pol.row(), 38), Qt::EditRole).isNull());
            data_polis.date_get2hand     = model_polises.data(model_polises.index(index_pol.row(), 38), Qt::EditRole).toDate();

            data_polis._id_first_point   = model_polises.data(model_polises.index(index_pol.row(), 21), Qt::EditRole).toInt();
            data_polis._id_first_operator= model_polises.data(model_polises.index(index_pol.row(), 24), Qt::EditRole).toInt();
            data_polis._id_last_point    = model_polises.data(model_polises.index(index_pol.row(), 26), Qt::EditRole).toInt();
            data_polis._id_last_operator = model_polises.data(model_polises.index(index_pol.row(), 29), Qt::EditRole).toInt();

            data_polis.first_point_name  = model_polises.data(model_polises.index(index_pol.row(), 23), Qt::EditRole).toString();
            data_polis.first_operator_fio= model_polises.data(model_polises.index(index_pol.row(), 25), Qt::EditRole).toString();
            data_polis.last_point_name   = model_polises.data(model_polises.index(index_pol.row(), 28), Qt::EditRole).toString();
            data_polis.last_operator_fio = model_polises.data(model_polises.index(index_pol.row(), 30), Qt::EditRole).toString();

            data_polis.dt_ins = model_polises.data(model_polises.index(index_pol.row(), 33), Qt::EditRole).toDate();
            data_polis.dt_upd = model_polises.data(model_polises.index(index_pol.row(), 34), Qt::EditRole).toDate();

            data_polis.r_smo   = model_polises.data(model_polises.index(index_pol.row(), 41), Qt::EditRole).toInt();
            data_polis.r_polis = model_polises.data(model_polises.index(index_pol.row(), 42), Qt::EditRole).toInt();

            bool has_date_get2hand_old = data_polis.has_date_get2hand;

            change_polis_w = new change_polis_wnd(db, data_polis, data_app, settings, this);
            if (change_polis_w->exec()) {
                this->setCursor(Qt::WaitCursor);
                db.transaction();

                // если произошла отмена выдачи полиса на руки ...
                if ( has_date_get2hand_old &&
                     !data_polis.has_date_get2hand ) {

                    // запрос подтверждения
                    if ( QMessageBox::question(this, "Нужно подтверждение",
                                               "Дата выдачи полиса на руки была очищена.\n\n"
                                               "Это приведёт к тому, что у застахованного вообще не будет\n"
                                               "действующего полиса!\n\n"
                                               "Всё равно сохранить изменения?\n",
                                               QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::No ) {
                        db.rollback();
                        QMessageBox::information(this, "Операция отмменена",
                                                 "Все сделанные изменеия отменены.\n"
                                                 "В базе данных осталась старая версия записи полиса.");
                        this->setCursor(Qt::ArrowCursor);
                        return;
                    }

                }

                // если произошла выдача на руки ранее не выданного полиса единого образца ...
                if ( !has_date_get2hand_old &&
                     data_polis.has_date_get2hand ) {

                    // запрос подтверждения
                    if ( QMessageBox::question(this, "Нужно подтверждение",
                                               "В записи полиса появилась дата выдачи полиса!\n"
                                               "Вы подтверждаете, выдачу АКТИВИРОВАННОГО БЕЗ ВЫДАЧИ полиса на руки?\n\n"
                                               "   -  в случае подтверждения произойдёт закрытие действующего ВС \n"
                                               "      и действующим будет назначен этот полис;\n"
                                               "   -  в случае отказа все изменения будут отменены.",
                                               QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::No ) {
                        db.rollback();
                        QMessageBox::information(this, "Операция отмменена",
                                                 "Все сделанные изменеия отменены.\n"
                                                 "В базе данных осталась старая версия записи полиса.");
                        this->setCursor(Qt::ArrowCursor);
                        return;
                    }

                    // проверка, можно ли применять это событие и надо ли закрывать старые полисы
                    QString sql_old;
                    sql_old =  "select p.id, p.id_person, p.ocato, p.ogrn_smo, p.pol_v, f8.text as pol_v_text, p.pol_type, p.pol_ser, p.pol_num, p.vs_num, p.enp, p.date_begin, p.date_end, p.date_stop, p.in_erp, p.order_num, p.order_date, p._id_last_point, p._id_last_operator, p._id_last_event ";
                    sql_old += " from polises p left join spr_f008 f8 on (f8.code=p.pol_v)";
                    sql_old += " where p.id_person=" + QString::number(data_pers.id) + " and ";
                    sql_old += "       p.date_begin is not null and ";
                    sql_old += "       p.date_begin<=CURRENT_DATE and ";
                    sql_old += "       date_get2hand<=CURRENT_DATE and ";
                    sql_old += "       ( (p.date_end is NULL) or (p.date_end>CURRENT_DATE) ) and ";
                    sql_old += "       ( (p.date_stop is NULL) or (p.date_stop>CURRENT_DATE) ) ; ";

                    QSqlQuery *query_old = new QSqlQuery(db);
                    bool res_old = mySQL.exec(this, sql_old, QString("Новый полис - проверка, есть ли действующие старые полисы"), *query_old, true, db, data_app);
                    // проверим старые полисы
                    while (query_old->next()) {
                        s_data_polis data_old_polis;
                        data_old_polis.id = query_old->value(0).toInt();
                        data_old_polis.id_person = query_old->value(1).toInt();
                        data_old_polis.ocato = query_old->value(2).toString();
                        data_old_polis.ogrn_smo = query_old->value(3).toString();
                        data_old_polis.pol_v = query_old->value(4).toInt();
                        data_old_polis.pol_v_text = query_old->value(5).toString();
                        data_old_polis.pol_type = query_old->value(6).toString();
                        data_old_polis.has_enp = !(query_old->value(10).isNull());
                        data_old_polis.has_pol_sernum = !(query_old->value(8).isNull());
                        data_old_polis.has_vs_num = !(query_old->value(9).isNull());
                        data_old_polis.pol_ser = query_old->value(7).toString();
                        data_old_polis.pol_num = query_old->value(8).toString();
                        data_old_polis.vs_num = query_old->value(9).toString();
                        data_old_polis.enp = query_old->value(10).toString().trimmed();
                        data_old_polis.has_date_begin = !(query_old->value(11).isNull());
                        data_old_polis.has_date_end = !(query_old->value(12).isNull());
                        data_old_polis.has_date_stop = !(query_old->value(13).isNull());
                        data_old_polis.date_begin = query_old->value(11).toDate();
                        data_old_polis.date_end = query_old->value(12).toDate();
                        data_old_polis.date_stop = query_old->value(13).toDate();
                        data_old_polis.in_erp = query_old->value(14).toInt();
                        data_old_polis.order_num = query_old->value(15).toString();
                        data_old_polis.order_date = query_old->value(16).toDate();
                        data_old_polis._id_last_point = query_old->value(17).toInt();
                        data_old_polis._id_last_operator = query_old->value(18).toInt();
                        data_old_polis._id_last_event = query_old->value(19).toInt();

                        // другого действующего полиса быть не должно
                        if ((data_old_polis.pol_v==1 || data_old_polis.pol_v==3)) {
                            QMessageBox::warning(this,
                                                 "Полис единого образца уже есть!",
                                                 QString("Невозможно открыть новый полис единого образца, поскольку у застрахованного уже есть другой действующий полис единого образца:\n ") +
                                                 "тип: " + query_old->value(4).toString() + "\n" +
                                                 "серия/номер: " + query_old->value(7).toString() + " № " + query_old->value(8).toString() + "\n" +
                                                 "дата выдачи: " + query_old->value(11).toDate().toString("dd.MM.yyyy") + "\n" +
                                                 "ЕНП: " + query_old->value(10).toString() + "\n\n" +
                                                 "Операция страхования отменена.");
                            data_polis.is_ok = false;
                            delete query_old;

                            db.rollback();
                            QMessageBox::information(this, "Операция отмменена",
                                                     "Все сделанные изменеия отменены.\n"
                                                     "В базе данных осталась старая версия записи полиса.");
                            this->setCursor(Qt::ArrowCursor);
                            return;
                        }
                        // закроем действующее ВС
                        if ( data_old_polis.pol_v==2 ) {        // без выдачи полиса на руки старое ВС не закрываем
                            data_polis.id_old_polis = data_old_polis.id;
                            if (QMessageBox::question(this,
                                                      "Закрыть ВС ?",
                                                      QString("У застрахованного есть действующее временное свидетельство: \n") +
                                                      "номер ВС: " + query_old->value(9).toString() + "\n" +
                                                      "дата выдачи: " + query_old->value(11).toDate().toString("dd.MM.yyyy") + "\n" +
                                                      "ЕНП: " + query_old->value(10).toString() + "\n\n" +
                                                      "Событие П060 предполагает закрытие ВС и открытие нового полиса единого образца. \n\nЗакрыть ВС ?",
                                                      QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Yes)==QMessageBox::Yes) {
                                // проверим состояние старого полиса
                                int close_stat = 2;
                                QStringList list;
                                list.append("ВС предоставлено и изымается");
                                list.append("ВС утеряно / испорчено по вине застрахованного");
                                if (QInputDialog::getItem(this, "Статус закрываемого ВС", "Выберите статус закрываемого ВС:", list, 0, false)=="полис ВС предоставлен и изымается")
                                    close_stat = 2;
                                else close_stat = 3;

                            } else {
                                // отмена операции
                                QMessageBox::warning(this, "Операция страхования отменена",
                                                     "При наличии действующего полиса единого образца выдача нового полиса единого образца невозможна.\n\n"
                                                     "При необходимости закройте действующий полис по событию П021 и повторите операцию.");
                                data_polis.is_ok = false;
                                delete query_old;

                                db.rollback();
                                QMessageBox::information(this, "Операция отмменена",
                                                         "Все сделанные изменеия отменены.\n"
                                                         "В базе данных осталась старая версия записи полиса.");
                                this->setCursor(Qt::ArrowCursor);
                                return;
                            }
                        }
                    }
                    delete query_old;
                }

                // заменим данные бланка ВС
                QString sql_polis;
                if (data_polis.pol_v==2) {
                    sql_polis += "update blanks_vs "
                                 "   set vs_num=" + QString(data_polis.has_vs_num ? QString("'" + data_polis.vs_num + "'") : "NULL") + " "
                                 " where id_polis=" + QString::number(data_polis.id) + " ; ";
                }
                // заменим данные бланка полиса
                if (data_polis.pol_v==3) {
                    sql_polis += "update blanks_pol "
                                 "   set pol_ser=" + QString(data_polis.has_pol_sernum ? QString("'" + data_polis.pol_ser + "'") : "NULL") + ", "
                                 "       pol_num=" + QString(data_polis.has_pol_sernum ? QString("'" + data_polis.pol_num + "'") : "NULL") + " "
                                 " where id_polis=" + QString::number(data_polis.id) + " ; ";
                }
                if (!data_app.is_tech) {
                    // поправим внешние ключи события
                    if (data_polis.pol_v==3) {
                        sql_polis += "update events "
                                     " set id_operator=" + QString::number(data_polis._id_first_operator) + " "
                                     + (data_app.point_rights<3 ? ("     id_point=" + QString::number(data_polis._id_first_point) + ", ") : "" ) +
                                     " where id_polis=" + QString::number(data_polis.id) + " "
                                     "   and status in(0,1) ; ";
                    }
                }
                // заменим данные полиса
                sql_polis += "update polises "
                             "   set enp=" + QString(data_polis.has_enp ? QString("'" + data_polis.enp + "'") : "NULL") + ", "
                             "       r_smo=" + QString::number(data_polis.r_smo) + ", "
                             "       r_polis=" + QString::number(data_polis.r_polis) + ", "
                             "       pol_v=" + QString::number(data_polis.pol_v) + ", "
                             "       f_polis=" + QString::number(data_polis.f_polis) + ", "
                             "       vs_num="  + QString(data_polis.has_vs_num ? QString("'" + data_polis.vs_num + "'") : "NULL") + ", "
                             "       pol_ser=" + QString(data_polis.has_pol_sernum ? QString("'" + data_polis.pol_ser + "'") : "NULL") + ", "
                             "       pol_num=" + QString(data_polis.has_pol_sernum ? QString("'" + data_polis.pol_num + "'") : "NULL") + ", "
                             "       uec_num=" + QString(data_polis.has_uec_num ? QString("'" + data_polis.uec_num + "'") : "NULL") + ", "
                             "       date_begin=" + QString(data_polis.has_date_begin ? QString("'" + data_polis.date_begin.toString("yyyy-MM-dd") + "'") : "NULL") + ", "
                             "       date_end=" + QString(data_polis.has_date_end ? QString("'" + data_polis.date_end.toString("yyyy-MM-dd") + "'") : "NULL") + ", "
                             "       date_stop=" + QString(data_polis.has_date_stop ? QString("'" + data_polis.date_stop.toString("yyyy-MM-dd") + "'") : "NULL") + ", "
                             "       date_activate=" + QString(data_polis.has_date_activate ? QString("'" + data_polis.date_activate.toString("yyyy-MM-dd") + "'") : "NULL") + ", "
                             "       date_get2hand=" + QString(data_polis.has_date_get2hand ? QString("'" + data_polis.date_get2hand.toString("yyyy-MM-dd") + "'") : "NULL") + ", "
                             "       _id_first_point=" + QString::number(data_polis._id_first_point) + ", "
                             "       _id_first_operator=" + QString::number(data_polis._id_first_operator) + ", ";
                if (!data_app.is_tech) {
                    sql_polis += "     _id_last_point=" + QString::number(data_app.id_point) + ", "
                                 "     _id_last_operator=" + QString::number(data_app.id_operator) + ", ";
                }
                sql_polis += "       in_erp=" + QString::number(data_polis.in_erp) + " "
                             " where id=" + QString::number(data_polis.id) + " ; ";
                QSqlQuery *query_polis = new QSqlQuery(db);
                bool res_polis = mySQL.exec(this, sql_polis, QString("Правка полиса вручную"), *query_polis, true, db, data_app);

                if (!res_polis) {
                    delete query_polis;
                    db.rollback();
                    QMessageBox::warning(this, "Ошибка при правке полиса", "При правке полиса вручную без отправки в ТФОМС произошла неожиданная ошибка");
                } else {
                    delete query_polis;
                    db.commit();
                }

                // обновим статус страхования персоны
                QString sql_insure = "select * from update_pers_links(" + QString::number(id_person) + ",CURRENT_DATE) ; ";
                QSqlQuery *query_insure = new QSqlQuery(db);
                bool res_insure = mySQL.exec(this, sql_insure, QString("Обновим статус страхования персоны"), *query_insure, true, db, data_app);

                refresh_polises_tab(id_person, id_polis);
                this->setCursor(Qt::ArrowCursor);

            }
        } else {
            QMessageBox::warning(this, "Полис не выбран!", "Сначала выберите полис, событие/визит которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
        }
    } else {
        QMessageBox::warning(this, "Человек не выбран!", "Сначала выберите застрахованного, полис которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
    }
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_tab_polises_activated(const QModelIndex &index) {
    on_bn_pers_pol_change_clicked();
}

void persons_wnd::on_show_protokols_clicked() {
    if (protocols_w==NULL) {
        protocols_w = new protocols_wnd(db, data_app, settings, this, this);
    }
    protocols_w->show();
}

void persons_wnd::on_act_list_terr_triggered() {
    // откроем окно "Бланки полисов"
    delete list_persons_terrs_w;
    list_persons_terrs_w = new list_persons_terrs_wnd(db, data_app, settings, this);
    list_persons_terrs_w->exec();
}

void persons_wnd::on_act_list_medorgs_triggered() {
    // откроем окно "Бланки полисов"
    delete list_assig_medorgs_w;
    list_assig_medorgs_w = new list_assig_medorgs_wnd(db, data_app, settings, this);
    list_assig_medorgs_w->exec();
}


void persons_wnd::select_person_in_tab(int id_person) {

    ui->ch_pers_polis->setChecked(false);
    ui->ch_pers_polis_2->setChecked(false);
    ui->ch_pers_old_vs->setChecked(false);
    ui->ch_pers_blanks->setChecked(false);
    ui->ch_pers_errors->setChecked(false);
    ui->ch_pers_actNget->setChecked(false);
    //ui->ch_pers_assig->setChecked(false);
    ui->ch_pers_assig_2->setChecked(false);
    ui->ch_pers_assig_ter->setChecked(false);
    ui->ch_pers_assig_ter_2->setChecked(false);
    ui->ch_pers_assig_errors->setChecked(false);
    ui->ch_pers_addr_reg->setChecked(false);
    ui->ch_pers_addr_reg_2->setChecked(false);
    ui->ch_pol_end->setChecked(false);
    ui->ch_pers_assig_mo->setChecked(false);
    ui->ch_pers_assig_mt->setChecked(false);
    ui->ch_pers_date->setChecked(false);
    ui->ch_pers_day->setChecked(false);
    ui->ch_pers_month->setChecked(false);
    ui->ch_pers_year->setChecked(false);
    ui->ch_pers_dates->setChecked(false);
    ui->ch_pol_date->setChecked(false);
    ui->ch_pol_day->setChecked(false);
    ui->ch_pol_month->setChecked(false);
    ui->ch_pol_year->setChecked(false);
    ui->ch_pol_dates->setChecked(false);
    ui->ch_pers_point->setChecked(false);
    ui->ch_pers_operator->setChecked(false);
    ui->ch_pers_category->setChecked(false);
    ui->ch_pers_status_f->setChecked(false);
    ui->ch_pers_tfoms_ok->setChecked(false);
    ui->ch_pers_tfoms_no->setChecked(false);

    ui->line_pers_fam->clear();
    ui->line_pers_im->clear();
    ui->line_pers_ot->clear();
    ui->line_pers_snils->clear();
    ui->combo_pers_sex->setCurrentIndex(0);
    ui->date_pers_birth->setDate(QDate(1900,1,1));
    ui->date_pers_birth_2->setDate(QDate(1900,1,1));



    if ( ui->ch_folder->isChecked()           ||
         ui->ch_tab_limit->isChecked()        ||
         ui->ch_pers_polis->isChecked()       ||
         ui->ch_pers_polis_2->isChecked()     ||
         ui->ch_pers_old_vs->isChecked()      ||
         ui->ch_pers_blanks->isChecked()      ||
         ui->ch_pers_errors->isChecked()      ||
         ui->ch_pers_actNget->isChecked()     ||
         //ui->ch_pers_assig->isChecked()       ||
         ui->ch_pers_assig_2->isChecked()     ||
         ui->ch_pers_assig_ter->isChecked()   ||
         ui->ch_pers_assig_ter_2->isChecked() ||
         ui->ch_pers_assig_errors->isChecked()||
         ui->ch_pers_addr_reg->isChecked()    ||
         ui->ch_pers_addr_reg_2->isChecked()  ||
         ui->ch_pol_end->isChecked()          ||
         ui->ch_pers_assig_mo->isChecked()    ||
         ui->ch_pers_assig_mt->isChecked()    ||
         ui->ch_pers_date->isChecked()        ||
         ui->ch_pers_day->isChecked()         ||
         ui->ch_pers_month->isChecked()       ||
         ui->ch_pers_year->isChecked()        ||
         ui->ch_pers_dates->isChecked()       ||
         ui->ch_pol_date->isChecked()         ||
         ui->ch_pol_day->isChecked()          ||
         ui->ch_pol_month->isChecked()        ||
         ui->ch_pol_year->isChecked()         ||
         ui->ch_pol_dates->isChecked()        ||
         ui->ch_pers_point->isChecked()       ||
         ui->ch_pers_operator->isChecked()    ||
         ui->ch_pers_category->isChecked()    ||
         ui->ch_pers_status_f->isChecked()    ||
         ui->ch_pers_tfoms_ok->isChecked()      ||
         ui->ch_pers_tfoms_no->isChecked()    )
    {
        ui->ch_folder->setChecked(false);
        ui->ch_tab_limit->setChecked(false);
        ui->ch_pers_polis->setChecked(false);
        ui->ch_pers_polis_2->setChecked(false);
        ui->ch_pers_old_vs->setChecked(false);
        ui->ch_pers_blanks->setChecked(false);
        ui->ch_pers_errors->setChecked(false);
        ui->ch_pers_actNget->setChecked(false);
        //ui->ch_pers_assig->setChecked(false);
        ui->ch_pers_assig_2->setChecked(false);
        ui->ch_pers_assig_ter->setChecked(false);
        ui->ch_pers_assig_ter_2->setChecked(false);
        ui->ch_pers_assig_errors->setChecked(false);
        ui->ch_pers_addr_reg->setChecked(false);
        ui->ch_pers_addr_reg_2->setChecked(false);
        ui->ch_pol_end->setChecked(false);
        ui->ch_pers_assig_mo->setChecked(false);
        ui->ch_pers_assig_mt->setChecked(false);
        ui->ch_pers_date->setChecked(false);
        ui->ch_pers_day->setChecked(false);
        ui->ch_pers_month->setChecked(false);
        ui->ch_pers_year->setChecked(false);
        ui->ch_pers_dates->setChecked(false);
        ui->ch_pol_date->setChecked(false);
        ui->ch_pol_day->setChecked(false);
        ui->ch_pol_month->setChecked(false);
        ui->ch_pol_year->setChecked(false);
        ui->ch_pol_dates->setChecked(false);
        ui->ch_pers_point->setChecked(false);
        ui->ch_pers_operator->setChecked(false);
        ui->ch_pers_category->setChecked(false);
        ui->ch_pers_status_f->setChecked(false);
        ui->ch_pers_tfoms_ok->setChecked(false);
        ui->ch_pers_tfoms_no->setChecked(false);

        refresh_persons_tab();
    }
    // получим индекс выделяемой записи
    QModelIndexList index_list = model_persons.match(model_persons.index(0,0),Qt::DisplayRole,id_person,-1,Qt::MatchExactly);

    if (index_list.size()>0) {
        // выберем строку
        for (int i=0; i<index_list.size(); i++) {
            /*int row = index_list.at(i).row();*/
            int col = index_list.at(i).column();
            /*int val = index_list.at(i).data().toInt();*/
            if (col==0) {
                ui->tab_persons->selectionModel()->select(index_list.at(i),QItemSelectionModel::ClearAndSelect|QItemSelectionModel::Rows);

                // прокрутим таблицу до этой строки
                QScrollBar *scroll = ui->tab_persons->verticalScrollBar();
                scroll->setMinimum(0);
                int max = model_persons.rowCount() - scroll->pageStep();
                scroll->setMaximum(max);
                int pos = index_list.at(i).row() - scroll->pageStep()/5;
                scroll->setValue(pos);

                refresh_polises_tab(id_person, -1);

                break;
            }
        }
    }
}

void persons_wnd::select_polis_in_tab(int id_polis) {
    // получим индекс выделяемой записи
    QModelIndexList index_list = model_polises.match(model_polises.index(0,0),Qt::DisplayRole,id_polis,-1,Qt::MatchExactly);

    if (index_list.size()>0) {
        // выберем строку
        for (int i=0; i<index_list.size(); i++) {
            /*int row = index_list.at(i).row();*/
            int col = index_list.at(i).column();
            /*int val = index_list.at(i).data().toInt();*/
            if (col==0) {
                ui->tab_polises->selectionModel()->select(index_list.at(i),QItemSelectionModel::ClearAndSelect|QItemSelectionModel::Rows);

                // прокрутим таблицу до этой строки
                QScrollBar *scroll = ui->tab_polises->verticalScrollBar();
                scroll->setMinimum(0);
                scroll->setMaximum(model_polises.rowCount() - scroll->pageStep());
                scroll->setValue(index_list.at(i).row() - scroll->pageStep()/5);

                refresh_events_tab(id_polis);

                break;
            }
        }
    }
}

void persons_wnd::select_event_in_tab(int id_event) {
    // получим индекс выделяемой записи
    QModelIndexList index_list = model_events.match(model_events.index(0,0),Qt::DisplayRole,id_event,-1,Qt::MatchExactly);

    if (index_list.size()>0) {
        // выберем строку
        for (int i=0; i<index_list.size(); i++) {
            /*int row = index_list.at(i).row();*/
            int col = index_list.at(i).column();
            /*int val = index_list.at(i).data().toInt();*/
            if (col==8) {
                ui->tab_events->selectionModel()->select(index_list.at(i),QItemSelectionModel::ClearAndSelect|QItemSelectionModel::Rows);

                // прокрутим таблицу до этой строки
                QScrollBar *scroll = ui->tab_events->verticalScrollBar();
                scroll->setMinimum(0);
                scroll->setMaximum(model_polises.rowCount() - scroll->pageStep());
                scroll->setValue(index_list.at(i).row() - scroll->pageStep()/5);

                break;
            }
        }
    }
}

void persons_wnd::on_ch_pers_status_clicked(bool checked) {
    if (checked) {
        QString str = QInputDialog::getText(this,"Введите пароль",
                                            QString("Вы действительно хотитье изменить статус и/или даты страхования выбранной персоны?\n\n"
                                            "Для непосредственной правки статуса застрахованного введите пароль\n") +
                                            (data_app.is_head||data_app.is_tech ? "СТАТУС" : "***")).toUpper();
        if (str!="СТАТУС" && str!="CNFNEC") {
            ui->ch_pers_status->setChecked(false);
            ui->ch_insure_begin->setEnabled(false);
            ui->ch_insure_end->setEnabled(false);
            ui->date_insure_begin->setVisible(false);
            ui->date_insure_end->setVisible(false);
            ui->date_insure_begin->setEnabled(false);
            ui->date_insure_end->setEnabled(false);
            QMessageBox::warning(this,"Отказ","Неправильный пароль");
            return;
        }
    }
    ui->combo_pers_status->setEnabled(checked);
    ui->ch_insure_begin->setEnabled(checked);
    ui->ch_insure_end->setEnabled(checked);
    ui->date_insure_begin->setVisible(checked && ui->ch_insure_begin->isChecked());
    ui->date_insure_end->setVisible(checked && ui->ch_insure_end->isChecked());
    ui->date_insure_begin->setEnabled(checked && ui->ch_insure_begin->isChecked());
    ui->date_insure_end->setEnabled(checked && ui->ch_insure_end->isChecked());
}

void persons_wnd::on_ch_insure_begin_clicked(bool checked) {
    ui->date_insure_begin->setVisible(checked && ui->ch_insure_begin->isChecked());
    ui->date_insure_begin->setEnabled(checked && ui->ch_insure_begin->isChecked());
    data_pers.has_date_insure_begin = checked;

    if (!checked) {
        // надо сбросить значение?
        this->setCursor(Qt::WaitCursor);
        // проверим выделенную строку
        QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

        if (indexes_pers.size()>0) {
            this->setCursor(Qt::WaitCursor);
            //QModelIndex index_pers = indexes_pers.front();

            db.transaction();

            QSqlQuery *query = new QSqlQuery(db);
            QString sql = "update persons "
                          "   set _date_insure_begin=NULL"
                          " where id=" + QString::number(data_pers.id) + " ; ";
            if (!(mySQL.exec(this, sql, QString("сброс даты начала страхования"), *query, true, db, data_app))) {
                QMessageBox::warning(this, "Ошибка при обновлении записи",
                                     "При обновлении записи произошла неожиданная ошибка.\n" + sql + "\n\nОперация отменена.");

                data_pers.has_date_insure_begin = true;
                ui->date_insure_begin->setDate(data_pers._date_insure_begin);
                ui->date_insure_begin->setVisible(true);
                ui->date_insure_begin->setEnabled(true);
                ui->ch_insure_begin->setChecked(true);
                db.rollback();
                this->setCursor(Qt::ArrowCursor);
                return;
            }
            if (QMessageBox::question(this, "Нужно подтверждение",
                                      "Вы действительно хотите для человека \n\n" + data_pers.fam + " " + data_pers.im + " " + data_pers.ot + " " + "\n"
                                      "сбросить дату начала страхования?",
                                      QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::No) {

                data_pers.has_date_insure_begin = true;
                ui->date_insure_begin->setDate(data_pers._date_insure_begin);
                ui->date_insure_begin->setVisible(true);
                ui->date_insure_begin->setEnabled(true);
                ui->ch_insure_begin->setChecked(true);
                db.rollback();
                this->setCursor(Qt::ArrowCursor);
                return;
            }
            db.commit();

            this->setCursor(Qt::ArrowCursor);
            refresh_persons_tab();
            return;
        } else {
            QMessageBox::warning(this, "Ничего не выбрано",
                                 "Для ручной правки даты страхования персоны надо выбрать строку этого человекав таблице персон.");
        }
        this->setCursor(Qt::ArrowCursor);
    }
}

void persons_wnd::on_ch_insure_end_clicked(bool checked) {
    ui->date_insure_end->setVisible(checked && ui->ch_insure_end->isChecked());
    ui->date_insure_end->setEnabled(checked && ui->ch_insure_end->isChecked());
    data_pers.has_date_insure_end = checked;

    if (!checked) {
        // надо сбросить значение?
        this->setCursor(Qt::WaitCursor);
        // проверим выделенную строку
        QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

        if (indexes_pers.size()>0) {
            this->setCursor(Qt::WaitCursor);
            /*QModelIndex index_pers = indexes_pers.front();*/

            db.transaction();

            QSqlQuery *query = new QSqlQuery(db);
            QString sql = "update persons "
                          "   set _date_insure_end=NULL"
                          " where id=" + QString::number(data_pers.id) + " ; ";
            if (!(mySQL.exec(this, sql, QString("сброс даты начала страхования"), *query, true, db, data_app))) {
                QMessageBox::warning(this, "Ошибка при обновлении записи",
                                     "При обновлении записи произошла неожиданная ошибка.\n" + sql + "\n\nОперация отменена.");

                data_pers.has_date_insure_end = true;
                ui->date_insure_end->setDate(data_pers._date_insure_end);
                ui->date_insure_end->setVisible(true);
                ui->date_insure_end->setEnabled(true);
                ui->ch_insure_end->setChecked(true);
                db.rollback();
                this->setCursor(Qt::ArrowCursor);
                return;
            }
            if (QMessageBox::question(this, "Нужно подтверждение",
                                      "Вы действительно хотите для человека \n\n" + data_pers.fam + " " + data_pers.im + " " + data_pers.ot + " " + "\n"
                                      "сбросить дату окончания страхования?",
                                      QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::No) {

                data_pers.has_date_insure_end = true;
                ui->date_insure_end->setDate(data_pers._date_insure_end);
                ui->date_insure_end->setVisible(true);
                ui->date_insure_end->setEnabled(true);
                ui->ch_insure_end->setChecked(true);
                db.rollback();
                this->setCursor(Qt::ArrowCursor);
                return;
            }
            db.commit();

            this->setCursor(Qt::ArrowCursor);
            refresh_persons_tab();
            return;
        } else {
            QMessageBox::warning(this, "Ничего не выбрано",
                                 "Для ручной правки даты страхования персоны надо выбрать строку этого человекав таблице персон.");
        }
        this->setCursor(Qt::ArrowCursor);
    }
}


void persons_wnd::on_combo_pers_status_activated(int index) {
    this->setCursor(Qt::WaitCursor);
    // проверим выделенную строку
    QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes_pers.size()>0) {
        this->setCursor(Qt::WaitCursor);
        QModelIndex index_pers = indexes_pers.front();

        int status_old = data_pers.status;

        data_pers.status = ui->combo_pers_status->currentData().toInt();
        if (data_pers.status>=0) {
            QMessageBox::warning(this, "Не будет сохранено",
                                 "Вручную можно установить только варианты статуса, соответствующие снятию застрахованного с учёта.");
        } else {
            db.transaction();

            if (QMessageBox::question(this, "Нужно подтверждение",
                                      "Вы действительно хотите для человека \n\n" + data_pers.fam + " " + data_pers.im + " " + data_pers.ot + " " + "\n"
                                      "установить новый статус \n\n\"" + ui->combo_pers_status->currentText() + "\"?",
                                      QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::No) {

                data_pers.status = model_persons.data(model_persons.index(index_pers.row(), 22), Qt::EditRole).toInt();  // persons.status
                ui->combo_pers_status->setCurrentIndex(ui->combo_pers_status->findData(data_pers.status));
                db.rollback();
                this->setCursor(Qt::ArrowCursor);
                return;
            }

            // попробуем закрыть действующие полисы
            QString sql_close_pol;
            sql_close_pol =  "select p.id, p.pol_v, p.vs_num, p.pol_ser, p.pol_num, p.date_begin, p.date_end, p.date_stop ";
            sql_close_pol += " from persons e "
                             "     join polises p on( e.id=p.id_person and "
                             "         /*(date_begin<=CURRENT_DATE) and "
                             "         (p.date_end is NULL or p.date_end>CURRENT_DATE) and*/ "
                             "         (date_stop is NULL or date_stop>CURRENT_DATE) ) "
                             "     left join spr_f008 f on(f.code=p.pol_v)";
            sql_close_pol += " where e.id=" + QString::number(data_pers.id) + " ; ";

            QSqlQuery *query_close_pol = new QSqlQuery(db);
            /*bool res =*/ mySQL.exec(this, sql_close_pol, QString("Проверка полисов застрахованного"), *query_close_pol, true, db, data_app);
            while (query_close_pol->next()) {

                // зададим для полиса date_stop
                QString id_polis= QString::number(query_close_pol->value(0).toInt());
                QString pol_v   = QString::number(query_close_pol->value(1).toInt());
                QString vs_num  = query_close_pol->value(2).toString();
                QString pol_ser = query_close_pol->value(3).toString();
                QString pol_num = query_close_pol->value(4).toString();
                /*QDate date_begin = query_close_pol->value(5).toDate();
                QDate date_end   = query_close_pol->value(6).toDate();
                QDate date_stop  = query_close_pol->value(7).toDate();*/

                QString sql;
                sql += "update polises ";
                sql += "   set date_stop=min_date(CURRENT_DATE, date_stop) ";
                sql += " where id=" + id_polis + " ; ";
                QSqlQuery *query = new QSqlQuery(db);
                bool res = mySQL.exec(this, sql, QString("Закрытие полиса в связи с расстрахованием персоны"), *query, true, db, data_app);

                if (!res) {
                    delete query;
                    db.rollback();
                    this->setCursor(Qt::ArrowCursor);
                    QMessageBox::warning(this, "Ошибка при закрытии полиса", "При закрытии полиса в связи с расстрахованием персоны произошла неожиданная ошибка");
                    return;
                } else {
                    delete query;

                    // обновим статус бланка ВС - сделаем вид, что бланк изъят ... я хз, правильно ли, но ничего другого пока не придумал ...
                    QString sql_v = "update blanks_vs "
                                    "   set status=-2, "
                                    "       date_spent = coalesce(date_spent, CURRENT_DATE), "
                                    "       date_waste = coalesce(date_spent, CURRENT_DATE) "
                                    " where vs_num='" + vs_num + "' "
                                    "   and id_polis=" + id_polis + " ; ";

                    QSqlQuery *query_v = new QSqlQuery(db);
                    /*bool res_v =*/ mySQL.exec(this, sql_v, QString("Правка статуса бланка ВС"), *query_v, true, db, data_app);
                    delete query_v;

                    // обновим статус бланка полиса - сделаем вид, что бланк изъят ... я хз, правильно ли, но ничего другого пока не придумал ...
                    QString sql_b = "update blanks_pol "
                                    "   set status=-2, "
                                    "       date_spent = coalesce(date_spent, CURRENT_DATE), "
                                    "       date_waste = coalesce(date_spent, CURRENT_DATE) "
                                    " where pol_ser" + QString(pol_ser.isEmpty() ? " is NULL " : QString("='" + ("0000"+pol_ser).right(4) + "' ")) + " "
                                    "   and pol_num='" + pol_num + "' "
                                    "   and id_polis=" + id_polis + " ; ";

                    QSqlQuery *query_b = new QSqlQuery(db);
                    /*bool res_b =*/ mySQL.exec(this, sql_b, QString("Правка статуса бланка полиса"), *query_b, true, db, data_app);
                    delete query_b;
                }
            }

            if (status_old>0 && ui->combo_pers_status->currentData().toInt()<0) {
                // сформируем событие на закрытие полиса
                QString event_code = "";
                QString event_comment = "";
                switch (ui->combo_pers_status->currentData().toInt()) {
                case -10:
                    event_code = "П022";
                    event_comment = "застрахованный умер";
                    break;
                case -3:
                    event_code = "П021";
                    event_comment = "переезд на другую территорию";
                    break;
                case -2:
                    event_code = "П021";
                    event_comment = "застрахованный сменил СМО";
                    break;
                case -1:
                    event_code = "П025";
                    event_comment = "больше нет действующего полиса";
                    break;
                case -5:
                    event_code = "П023";
                    event_comment = "ФФОМС - нарушение правил страхования";
                    break;
                case -4:
                    event_code = "П024";
                    event_comment = "ТФОМС - закрыт ТФОМС";
                    break;
                case -6:
                    event_code = "П023";
                    event_comment = "ТФОМС - закрыт в связи с дублированием";
                    break;
                default:
                    event_code = "П021";
                    event_comment = " - другие причины - ";
                    break;
                };
                // удалим старые события на закрытие этого полиса
                QString sql_s= "delete from events a "
                               " where id_polis in "
                               "   ( select p.id  from persons e  join polises p on(p.id=e.id_polis) "
                               "     where e.id=" + QString::number(data_pers.id) + " ) "
                               "   and left(event_code,3)='П02' ; "
                // добавим новое событие на закрытие этого полиса
                               "insert into events(id_point, id_operator, id_polis, id_vizit, event_code, event_dt, event_time, status, comment, id_person, id_person_old, id_udl, id_drp) "
                               "select " + QString::number(data_app.id_point) + ", "
                               "       " + QString::number(data_app.id_operator) + ", "
                               "       p.id, "
                               "       -1, "
                               "       '" + event_code + "', "
                               "       '" + QDateTime::currentDateTime().toString("yyyy-MM-dd hh:mm:ss") + "', "
                               "       '" + QTime::currentTime().toString("hh:mm:ss") + "', "
                               "       -1, "
                               "       '" + event_comment + "', "
                               "       e.id, "
                               "       o.id, "
                               "       e.id_udl, "
                               "       e.id_drp "
                               "  from persons e "
                               "       join polises p on(p.id=e.id_polis) "
                               "  left join persons_old o on(o.id_person=e.id) "
                               " where e.id=" + QString::number(data_pers.id) + " ; ";

                QSqlQuery *query_s= new QSqlQuery(db);
                bool res_s= mySQL.exec(this, sql_s, QString("Сформируем событие закрытия полиса"), *query_s, true, db, data_app);
                delete query_s;

                if (!res_s) {
                    delete query_s;
                    db.rollback();
                    this->setCursor(Qt::ArrowCursor);
                    QMessageBox::warning(this, "Ошибка при генерации события закрытия полиса", "При генерации события закрытия полиса в связи с расстрахованием персоны произошла неожиданная ошибка");
                    return;
                }
            }

            // сохраним новый статус
            QSqlQuery *query = new QSqlQuery(db);
            QString sql = "update persons "
                          " set status=" + QString::number(data_pers.status) + ", "
                          "     _id_last_point=" + QString::number(data_app.id_point) + ", "
                          "     _id_last_operator=" + QString::number(data_app.id_operator) + ", "
                          "     _date_insure_end=min_date(_date_insure_end, CURRENT_DATE) "
                          " where id=" + QString::number(data_pers.id) + " ; ";
            if (!(mySQL.exec(this, sql, QString("Список статусов персоны"), *query, true, db, data_app))) {
                QMessageBox::warning(this, "Ошибка при обновлении записи",
                                     "При обновлении записи произошла неожиданная ошибка.\n" + sql + "\n\nОперация отменена.");
                data_pers.status = model_persons.data(model_persons.index(index_pers.row(), 21), Qt::EditRole).toInt();  // persons.status
                ui->combo_pers_status->setCurrentIndex(ui->combo_pers_status->findData(data_pers.status));
                db.rollback();
                this->setCursor(Qt::ArrowCursor);
                return;
            }

            db.commit();

            this->setCursor(Qt::ArrowCursor);
            refresh_persons_tab();
            return;
        }
    } else {
        QMessageBox::warning(this, "Ничего не выбрано",
                             "Для ручной правки статуса персоны надо выбрать строку этого человекав таблице персон.");
    }
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_date_insure_begin_editingFinished() {
    // проверим, есть ли что менять
    if ( data_pers._date_insure_begin!=ui->date_insure_begin->date() &&
         ui->date_insure_begin->date()>QDate(1920,1,1) ) {

        this->setCursor(Qt::WaitCursor);
        // проверим выделенную строку
        QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

        if (indexes_pers.size()>0) {
            this->setCursor(Qt::WaitCursor);
            QModelIndex index_pers = indexes_pers.front();

            data_pers._date_insure_begin = ui->date_insure_begin->date();
            if (data_pers._date_insure_begin<QDate(2014,1,1)) {
                QMessageBox::warning(this, "Не будет сохранено",
                                     "Дата начала страхования в системе не может быть раньше 01.01.2014 г.");
            } else {
                // сохраним новый дату
                db.transaction();
                QSqlQuery *query = new QSqlQuery(db);
                QString sql = "update persons "
                              "   set _date_insure_begin=" + (ui->ch_insure_begin->isChecked() ? QString("'" + data_pers._date_insure_begin.toString("yyyy-MM-dd") + "'") : "NULL" ) + ", "
                              "       _id_last_point=" + QString::number(data_app.id_point) + ", "
                              "       _id_last_operator=" + QString::number(data_app.id_operator) + " "
                              " where id=" + QString::number(data_pers.id) + " ; ";
                if (!(mySQL.exec(this, sql, QString("новая дата начала страхования"), *query, true, db, data_app))) {
                    QMessageBox::warning(this, "Ошибка при обновлении записи",
                                         "При обновлении записи произошла неожиданная ошибка.\n" + sql + "\n\nОперация отменена.");

                    data_pers._date_insure_begin = model_persons.data(model_persons.index(index_pers.row(), 68), Qt::EditRole).toDate();  // persons._date_insure_begin
                    ui->date_insure_begin->setDate(data_pers._date_insure_begin);
                    db.rollback();
                    this->setCursor(Qt::ArrowCursor);
                    return;
                }
                if (QMessageBox::question(this, "Нужно подтверждение",
                                          "Вы действительно хотите для человека \n\n" + data_pers.fam + " " + data_pers.im + " " + data_pers.ot + " " + "\n"
                                          "установить новую дату начала страхования \n\n" + ui->date_insure_begin->date().toString("dd.MM.yyyy") + " ?",
                                          QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::No) {

                    data_pers._date_insure_begin = model_persons.data(model_persons.index(index_pers.row(), 68), Qt::EditRole).toDate();  // persons._date_insure_begin
                    ui->date_insure_begin->setDate(data_pers._date_insure_begin);
                    db.rollback();
                    this->setCursor(Qt::ArrowCursor);
                    return;
                }
                db.commit();

                this->setCursor(Qt::ArrowCursor);
                refresh_persons_tab();
                return;
            }
        } else {
            QMessageBox::warning(this, "Ничего не выбрано",
                                 "Для ручной правки даты страхования персоны надо выбрать строку этого человекав таблице персон.");
        }
        this->setCursor(Qt::ArrowCursor);
    }
}

void persons_wnd::on_date_insure_end_editingFinished() {
    // проверим, есть ли что менять
    if ( data_pers._date_insure_end!=ui->date_insure_end->date() &&
         ui->date_insure_end->date()>QDate(1920,1,1) ) {

        this->setCursor(Qt::WaitCursor);
        // проверим выделенную строку
        QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

        if (indexes_pers.size()>0) {
            this->setCursor(Qt::WaitCursor);
            QModelIndex index_pers = indexes_pers.front();

            data_pers._date_insure_end = ui->date_insure_end->date();
            if ( data_pers._date_insure_end<=data_pers._date_insure_begin ||
                 data_pers._date_insure_end>QDate::currentDate() ) {
                QMessageBox::warning(this, "Не будет сохранено",
                                     "Дата окончания страхования в системе не может быть раньше даты начала страхования или позже текущей даты " + QDate::currentDate().toString("dd.MM.yyyy") + " г.");
            } else {
                // сохраним новый дату
                db.transaction();
                QSqlQuery *query = new QSqlQuery(db);
                QString sql = "update persons "
                              "   set _date_insure_end=" + (ui->ch_insure_end->isChecked() ? QString("'" + data_pers._date_insure_end.toString("yyyy-MM-dd") + "'") : "NULL" ) + ", "
                              "       _id_last_point=" + QString::number(data_app.id_point) + ", "
                              "       _id_last_operator=" + QString::number(data_app.id_operator) + " "
                              " where id=" + QString::number(data_pers.id) + " ; ";
                if (!(mySQL.exec(this, sql, QString("новая дата начала страхования"), *query, true, db, data_app))) {
                    QMessageBox::warning(this, "Ошибка при обновлении записи",
                                         "При обновлении записи произошла неожиданная ошибка.\n" + sql + "\n\nОперация отменена.");

                    data_pers._date_insure_end = model_persons.data(model_persons.index(index_pers.row(), 69), Qt::EditRole).toDate();  // persons._date_insure_end
                    ui->date_insure_end->setDate(data_pers._date_insure_end);
                    db.rollback();
                    this->setCursor(Qt::ArrowCursor);
                    return;
                }
                if (QMessageBox::question(this, "Нужно подтверждение",
                                          "Вы действительно хотите для человека \n\n" + data_pers.fam + " " + data_pers.im + " " + data_pers.ot + " " + "\n"
                                          "установить новую дату окончания страхования \n\n" + ui->date_insure_end->date().toString("dd.MM.yyyy") + " ?",
                                          QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::No) {

                    data_pers._date_insure_end = model_persons.data(model_persons.index(index_pers.row(), 69), Qt::EditRole).toDate();  // persons._date_insure_end
                    ui->date_insure_end->setDate(data_pers._date_insure_end);
                    db.rollback();
                    this->setCursor(Qt::ArrowCursor);
                    return;
                }
                db.commit();

                this->setCursor(Qt::ArrowCursor);
                refresh_persons_tab();
                return;
            }
        } else {
            QMessageBox::warning(this, "Ничего не выбрано",
                                 "Для ручной правки даты страхования персоны надо выбрать строку этого человекав таблице персон.");
        }
        this->setCursor(Qt::ArrowCursor);
    }
}


void persons_wnd::refresh_pers_category() {
    this->setCursor(Qt::WaitCursor);

    QString sql = "";
    sql += "select cast(s.code as text) as code, '('||s.code||')  '||s.text as name "
           " from spr_v013 s "
           " order by s.code ; ";
    QSqlQuery *query = new QSqlQuery(db);
    query->exec( sql );
    ui->combo_pers_category->clear();

    // заполнение списка пунктов выдачи
    ui->combo_pers_category->addItem(" - все категории - ", "1,2,3,4,5,6,7,8,9,10,11,12,13,14");
    ui->combo_pers_category->addItem(" + Все граждане Российской Федерации", "1,6");
    ui->combo_pers_category->addItem(" + Все беженцы", "5,10");
    ui->combo_pers_category->addItem(" + Все иностранные граждане и лица Б/Г", "2,3,4,7,8,9");
    ui->combo_pers_category->addItem(" + Все граждане стран-членов ЕАЭС", "11,12,13,14");
    while (query->next()) {
        ui->combo_pers_category->addItem( query->value(1).toString(),
                                       QString::number(query->value(0).toInt()) );
    }
    query->finish();
    delete query;
    ui->combo_pers_category->setCurrentIndex(0);

    this->setCursor(Qt::ArrowCursor);
    /*
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающего списка категорий застрахованных
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select code, '('||code||')  '||text||'  ' "
                  " from public.spr_v013 s "
                  " order by code ; ";
    mySQL.exec(this, sql, QString("Список категорий застрахованных"), *query, true, db, data_app);
    ui->combo_pers_category->clear();
    while (query->next()) {
        ui->combo_pers_category->addItem(query->value(1).toString(), query->value(0).toInt());
    }
    delete query;
    ui->combo_pers_category->setCurrentIndex(0);
    this->setCursor(Qt::ArrowCursor);
    */
}


void persons_wnd::refresh_pers_statuses() {
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающего списка статусов персоны
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select code, '('||code||')  '||text||'  ' "
                  "  from public.spr_pers_status s "
                  " where s.code>=-10 "
                  " order by code desc ; ";
    mySQL.exec(this, sql, QString("Список статусов персоны"), *query, true, db, data_app);
    ui->combo_pers_status->clear();
    ui->combo_pers_status_f->clear();
    while (query->next()) {
        ui->combo_pers_status->addItem(query->value(1).toString(), query->value(0).toInt());
        ui->combo_pers_status_f->addItem(query->value(1).toString(), query->value(0).toInt());
    }
    // для лиц с истёкшим УДЛ
    ui->combo_pers_status_f->addItem(" !!!  Застрахованные с истёкшим УДЛ  !!! ", -11);

    delete query;
    ui->combo_pers_status->setCurrentIndex(-1);
    ui->combo_pers_status_f->setCurrentIndex(ui->combo_pers_status_f->findData(1));
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_bn_guten_Morgen_clicked() {
    this->setCursor(Qt::WaitCursor);
    // принудительное обновление стстусов застрахованных
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select * from update_pers_links(NULL) ;";

    Gutten_Morgen_w = NULL;
    delete Gutten_Morgen_w;
    Gutten_Morgen_w = new beep_Guten_Morgen_wnd();
    Gutten_Morgen_w->show();
    QApplication::processEvents();

        if (!(mySQL.exec(this, sql, QString("Обновим статусы застрахованных"), *query, true, db, data_app))) {
            QMessageBox::warning(this, "Ошибка при обновлении статусов застрахованных",
                                 "При обновлении статусов застрахованных произошла неожиданная ошибка.\n" + sql + "\n\nОперация отменена.");
        } else {
            query->next();
            int cnt = query->value(0).toInt();
            if (cnt==10000) {
                QMessageBox::warning(this, "Надо повторить",
                                     "Обновлены статусы " + QString::number(cnt) + " застрахованных.\n\n"
                                     "Нажмите на кнопку ещё раз.");
            } else {
                refresh_persons_tab();
                QMessageBox::warning(this, "Доброе утро !!!",
                                     "Доброе утро.\n\n"
                                     "Обновлены статусы " + QString::number(cnt) + " застрахованных.");
            }
            ui->bn_guten_Morgen->setVisible(false);
        }
    Gutten_Morgen_w->hide();
    QApplication::processEvents();
    delete Gutten_Morgen_w;
    Gutten_Morgen_w = NULL;

    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_bn_pers_pol_drop_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_polises || !ui->tab_polises->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите человека, полисы которого вы хотите просмотреть или поправить без отправки в ТФОМС.");
        return;
    }

    if (data_app.is_call || data_app.is_locl) {
        // недоступно в ПВП
        ui->group_person_docs->setChecked(false);
        QApplication::processEvents();
        QMessageBox::warning(this, "Доступно только в головном офисе",
                             "Редактирование данных застрахованных доступно только в головном офисе");
        return;
    }

    // проверим выделенную строку
    QModelIndexList indexes = ui->tab_polises->selectionModel()->selection().indexes();

    if (indexes.size()>0) {
        this->setCursor(Qt::WaitCursor);
        QModelIndex index = indexes.front();

        QString pss;
        do {
            pss = QInputDialog::getText(this,"Введите пароль администратора",
                                        "Для удаления записи полиса надо ввести пароль администраторы базы полисов.\n"
                                        "Пустая строка - отмена удаления записи.",
                                        QLineEdit::Password);
            if (pss.isEmpty())
                return;
        } while (pss!="650325");


        db.transaction();

        // зададим для полиса date_stop и in_erp
        QString id = QString::number(model_polises.data(model_polises.index(index.row(), 0), Qt::EditRole).toInt());
        int pol_v  = model_polises.data(model_polises.index(index.row(), 6), Qt::EditRole).toInt();
        /*int f_polis  = model_polises.data(model_polises.index(index.row(),19), Qt::EditRole).toInt();*/
        QString vs_num  = model_polises.data(model_polises.index(index.row(), 9), Qt::EditRole).toString();
        QString pol_ser = model_polises.data(model_polises.index(index.row(),10), Qt::EditRole).toString();
        QString pol_num = model_polises.data(model_polises.index(index.row(),11), Qt::EditRole).toString();
        int id_person = model_polises.data(model_polises.index(index.row(),20), Qt::EditRole).toInt();
        QDate date_end  = ( model_polises.data(model_polises.index(index.row(),14), Qt::EditRole).isNull() ?
                                QDate(2020,1,1) : model_polises.data(model_polises.index(index.row(),14), Qt::EditRole).toDate() );
        QDate date_stop = ( model_polises.data(model_polises.index(index.row(),15), Qt::EditRole).isNull() ?
                                QDate(2020,1,1) : model_polises.data(model_polises.index(index.row(),15), Qt::EditRole).toDate() );

        //  удалим ссылки на события
        QString sql_r = "delete from files_r_evts "
                        " where id_event in (select id from events where id_polis=" + id + ") ; ";
        QSqlQuery *query_r = new QSqlQuery(db);
        /*bool res_r =*/ mySQL.exec(this, sql_r, QString("Удаление события, связанных с удаляемым полисом"), *query_r, true, db, data_app);
        delete query_r;

        //  удалим события
        QString sql_a = "delete from events "
                        " where id_polis=" + id + " ; ";
        QSqlQuery *query_a = new QSqlQuery(db);
        /*bool res_a =*/ mySQL.exec(this, sql_a, QString("Удаление события, связанных с удаляемым полисом"), *query_a, true, db, data_app);
        delete query_a;

        // обновим статус бланка полиса - сделаем вид, что бланк изъят ... я хз, правильно ли, но ничего другого пока не придумал ...
        QString sql_b = "update blanks_pol "
                        "   set status=0, "
                        "       date_spent = NULL "
                        " where pol_ser" + QString(pol_ser.isEmpty() ? " is NULL " : QString("='" + ("0000"+pol_ser).right(4) + "' ")) + " and "
                        "       pol_num='" + pol_num + "' and "
                        "       id_polis=" + id + " ; ";
        QSqlQuery *query_b = new QSqlQuery(db);
        /*bool res_b =*/ mySQL.exec(this, sql_b, QString("Освобождение бланка полиса, связанного с удаляемым полисом"), *query_b, true, db, data_app);
        delete query_b;

        QString sql;
        sql += "delete from polises ";
        sql += " where id=" + id + " ; ";
        QSqlQuery *query = new QSqlQuery(db);
        bool res = mySQL.exec(this, sql, QString("Освобождение бланка полиса, связанного с удаляемым полисом"), *query, true, db, data_app);

        if (!res) {
            delete query;
            db.rollback();
            QMessageBox::warning(this, "Ошибка при удалении полиса", "При удалении полиса вручную без отправки в ТФОМС произошла неожиданная ошибка.");
        } else {
            delete query;

            //  пометим бланк ВС как испорченный... я хз, правильно ли, но ничего другого пока не придумал ...
            QString sql_v = "update blanks_vs "
                            "   set status=-1, "
                            "       id_polis=NULL,"
                            "       date_spent = coalesce(date_spent, CURRENT_DATE) "
                            " where vs_num='" + vs_num + "' and "
                            "       id_polis=" + id + " ; ";

            QSqlQuery *query_v = new QSqlQuery(db);
            /*bool res_v =*/ mySQL.exec(this, sql_v, QString("Удаление бланка ВС, связанного с удаляемым полисом"), *query_v, true, db, data_app);
            delete query_v;

            // поправим статус персоны
            if (pol_v==2 && (date_end>=QDate::currentDate() || date_stop>=QDate::currentDate()) ) {
                //  у персоны было ВС - сменим статус на "0 - не застрахован"
                QString sql_stat = "update persons "
                                   "   set status=0, "
                                   "       _id_last_point=" + QString::number(data_app.id_point) + ", "
                                   "       _id_last_operator=" + QString::number(data_app.id_operator) + " "
                                   " where id=" + QString::number(id_person) + " ; ";
                QSqlQuery *query_stat = new QSqlQuery(db);
                /*bool res_stat =*/ mySQL.exec(this, sql_stat, QString("Удаление бланка ВС, связанного с удаляемым полисом"), *query_stat, true, db, data_app);
                delete query_stat;

                refresh_persons_tab();
            }

            // проверим выделенную строку
            int id_person = -1;
            QModelIndexList indexes = ui->tab_persons->selectionModel()->selection().indexes();

            if ( indexes.size()>0 ) {
                QModelIndex index = indexes.front();

                // ID застрахованного
                id_person = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();       // e.id
            }

            // обновим статус страхования персоны
            QString sql_insure = "select * from update_pers_links(" + QString::number(id_person) + ",CURRENT_DATE) ; ";
            QSqlQuery *query_insure = new QSqlQuery(db);
            bool res_insure = mySQL.exec(this, sql_insure, QString("Обновим статус страхования персоны"), *query_insure, true, db, data_app);

            db.commit();
            refresh_polises_tab(id_person, -1);
            this->setCursor(Qt::ArrowCursor);
        }

        this->setCursor(Qt::ArrowCursor);
    } else {
        QMessageBox::warning(this, "Ничего не выбрано!", "Ничего не выбрано!");
    }
}

void persons_wnd::on_show_add_blanks_clicked() {
    // откроем окно сканера штрихкодов
    delete add_blank_scan_w;
    add_blank_scan_w = new add_blank_scan_wnd(db, data_app, settings, this);
    add_blank_scan_w->exec();
}

void persons_wnd::on_act_spoiled_vs_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if ( data_app.ocato=="14000"
         && !data_app.is_head
         && !data_app.is_tech ) {
        QMessageBox::warning(this, ("Доступно только в головном офисе!"), ("Добавление испорченных бланков ВС доступно только в головном офисе!"));
        return;
    }

    QString sp_vs = QInputDialog::getText(this,"Введите номер испорченного бланка","Введите номер испорченного бланка:").trimmed().replace(" ", "").replace("-", "").left(10);
    long i64 = sp_vs.toLong();

    if (QMessageBox::warning(this,
                             "Нужно подтверждение",
                             "Вы действительно хотите пометить как \"испорченный\" бланк ВС с номером \n\n" + QString::number(i64) + " ?",
                             QMessageBox::Yes|QMessageBox::No,
                             QMessageBox::No)==QMessageBox::No) {
        return;
    }

    db.transaction();
    this->setCursor(Qt::WaitCursor);

    // проверим, попадает ли номер ВС в открытый интервал
    QString sql_int;
    sql_int= "select v.id as id_vs_inteval_pt "
             " from  vs_intervals_pt v "
             " where v.id_point=" + QString::number(data_app.id_point) + " and "
             "       v.date_open<=CURRENT_DATE and "
             "       ( (v.date_close is NULL) or (v.date_close>CURRENT_DATE) ) and "
             "       " + QString::number(i64) + " between v.vs_from and v.vs_to ; ";
    QSqlQuery *query_int = new QSqlQuery(db);
    mySQL.exec(this, sql_int, QString("проверка номера ВС по открытым диапазонам"), *query_int, true, db, data_app);
    if (query_int->size()<1) {
        QMessageBox::warning(this,
                             "Этот бланк ВС был выделен для другого ПВП!",
                             "Введённый номер ВС не входит ни в один из интервалов номеров ВС данного пункта выдачи. "
                             "Отметить как \"испорченный\" бланк ВС можно только на том пункте выдачи, для которого он выделялся.\n\n"
                             "Операция отменена.");
        //data_polis.is_ok = false;
        delete query_int;
        this->setCursor(Qt::ArrowCursor);
        return;
    }
    delete query_int;

    // проверим, есть ли испорченный ВС в базе
    QString sql_ts;
    sql_ts = "select b.vs_num "
              " from blanks_vs b "
              " where b.vs_num=" + QString::number(i64) + " ; ";
    QSqlQuery* query_ts = new QSqlQuery(db);
    bool res_ts = mySQL.exec(this, sql_ts, QString("Проверка, есть ли испорченный ВС в базе"), *query_ts, true, db, data_app);
    if (!res_ts) {
        this->setCursor(Qt::ArrowCursor);
        QMessageBox::critical(this,
                              "Ошибка при проверке испорченного ВС!",
                              "При проверке номера испорченного бланка ВС произошла непредвиденная ошибка!\n\n"
                              "Бланк не помечен.");
        //data_polis.is_ok = false;
        delete query_ts;
        return;
    }
    if (query_ts->size()==0) {
            this->setCursor(Qt::ArrowCursor);
            QMessageBox::critical(this,
                                  "Такого номера ВС нет в базе!",
                                  "Такого номера ВС нет в базе\n\n"
                                  "Исправьте номер ВС и, при необходимости, повторите операцию.");
            //data_polis.is_ok = false;
            delete query_ts;
            return;
        //}
    }
    delete query_ts;

    // проверим, не выдан ли испорченный ВС на руки
    QString sql_tst;
    sql_tst = "select b.vs_num, '('||b.status||') '||s.text as text "
              " from  blanks_vs b left join spr_blank_status s on(b.status=s.code) "
              " where b.vs_num=" + QString::number(i64) + " and b.status in(1,2,3,4); ";
    QSqlQuery* query_tst = new QSqlQuery(db);
    bool res_tst = mySQL.exec(this, sql_tst, QString("Проверка, не выдан ли на руки \"испорченный\" бланк ВС"), *query_tst, true, db, data_app);
    if (!res_tst) {
        this->setCursor(Qt::ArrowCursor);
        QMessageBox::critical(this,
                              "Ошибка при проверке \"испорченного\" ВС!",
                              "При проверке номера \"испорченного\" бланка ВС произошла непредвиденная ошибка!\n\n"
                              "Бланк не помечен.");
        //data_polis.is_ok = false;
        delete query_tst;
        return;
    }
    if (query_tst->size()>0 && query_tst->next()) {
        QString status = query_tst->value(1).toString();
        if (QMessageBox::warning(this,
                                 "\"Испорченный\" бланк ВС выдан на руки!",
                                 "Бланк ВС с указанным номером уже использован со статусом:\n" +
                                 status + "\n\n"
                                 "ВНИМАНИЕ! Бланки ВС являются бланками строгой отчётности.\n\n"
                                 " - Если бланк уже выдан - застрахованный должен вернуть его в СМО.\n"
                                 " - Пока этот банк у застрахованного, помечать его как испорченный не рекомендуется.\n\n"
                                 "Пометить этот бланк ВС как испорченный, а полис закрыть?", QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::No) {
            //data_polis.is_ok = false;
            this->setCursor(Qt::ArrowCursor);
            delete query_tst;
            return;
        }
    }
    delete query_tst;

    // пометим бланк ВС как испорченный
    QString sql_sp_blank_vs =
            "update blanks_vs b "
            "   set status=-1, "
            "       date_spent = coalesce(date_spent, CURRENT_DATE), "
            "       id_operator=" + QString::number(data_app.id_operator) + " "
            " where b.vs_num=" + QString::number(i64) + " ; ";
    QSqlQuery *query_sp_blank_vs = new QSqlQuery(db);
    bool res_sp_blank_vs = mySQL.exec(this, sql_sp_blank_vs, QString("Пометка испорченного бланка ВС"), *query_sp_blank_vs, true, db, data_app);
    if (!res_sp_blank_vs) {
        this->setCursor(Qt::ArrowCursor);
        QMessageBox::warning(this,
                             "Не удалось добавить \"испорченный\" бланк ВС!",
                             "При попытке добавить \"испорченный\" бланк ВС произошла ошибка!\n\nБланк не помечен.");
        delete query_sp_blank_vs;
        db.rollback();
        return;
    }
    delete query_sp_blank_vs;

    // закроем, если есть, полис с этим номером ВС
    QString sql_close_polis =
            "update polises p "
            "   set date_stop = CURRENT_DATE,"
            "       _id_last_point=" + QString::number(data_app.id_point) + ", "
            "       _id_last_operator=" + QString::number(data_app.id_operator) + " "
            " where p.pol_v=2 "
            "   and p.vs_num=" + QString::number(i64) + " ; ";
    QSqlQuery *query_close_polis = new QSqlQuery(db);
    bool res_close_polis = mySQL.exec(this, sql_close_polis, QString("Закроем полис по номеру испорченного ВС"), *query_close_polis, true, db, data_app);
    if (!res_close_polis) {
        this->setCursor(Qt::ArrowCursor);
        QMessageBox::warning(this,
                             "Не удалось закрыть полис по номеру испорченного ВС!",
                             "При попытке закрыть полис по номеру испорченного ВС произошла ошибка!\n\nБланк не помечен.");
        delete query_close_polis;
        db.rollback();
        return;
    }
    delete query_close_polis;

    db.commit();
    this->setCursor(Qt::ArrowCursor);
    //refresh_polises_tab();

    QMessageBox::information(this, "Бланк ВС отмечен как испорченный",
                          "Бланк ВС отмечен как испорченный.");
}

void persons_wnd::on_act_assig2_triggered() {
    // откроем окно "Выгрузка прикреплений по МО"
    delete export_assig_bystep_w;
    export_assig_bystep_w = new export_assig_bystep_wnd(db, data_app, settings, this);
    export_assig_bystep_w->exec();
}

void persons_wnd::on_act_name_to_sex_triggered() {
    delete  name_to_sex_w;
    name_to_sex_w = new name_to_sex_wnd(db, data_app, settings, this);
    name_to_sex_w->exec();
}

void persons_wnd::on_act_namepat_to_sex_triggered() {
    delete  namepat_to_sex_w;
    namepat_to_sex_w = new namepat_to_sex_wnd(db, data_app, settings, this);
    namepat_to_sex_w->exec();
}

bool persons_wnd::reg_assig_by_terr_gap(QString ocato, int subj, int dstr, int city, int nasp, int strt, int house, QString corp, int sex, int age) {
    // проверим наличие готовой записи в таблице
    QString sql_tst =
            "select count(*) "
            " from assig_by_terr_gaps g "
            " where g.ocato='"+ ocato + "' " +
            "   and g.subj="  + QString::number(subj) +
            "   and g.dstr="  + QString::number(dstr) +
            "   and g.city="  + QString::number(city) +
            "   and g.nasp="  + QString::number(nasp) +
            "   and g.strt="  + QString::number(strt) +
            "   and g.house=" + QString::number(house)+
            "   and g.sex="   + QString::number(sex)  +
            "   and g.age="   + QString::number(age)  +
            "   and g.corp='" + corp + "' ; ";

    QSqlQuery* query_tst = new QSqlQuery(db);
    bool res_tst = mySQL.exec(this, sql_tst, QString("Проверка на наличие готовой записи в таблице необработанных автоприкреплений"), *query_tst, true, db, data_app);
    if (!res_tst) {
        this->setCursor(Qt::ArrowCursor);
        QMessageBox::critical(this,
                              "Ошибка при проверке на наличие готовой записи в таблице необраблоанных автоприкреплений!",
                              "При проверке на наличие готовой записи в таблице необработанных автоприкреплений произошла непредвиденная ошибка!\n");
        //data_polis.is_ok = false;
        delete query_tst;
        return false;
    }
    if (query_tst->size()>0 && query_tst->next()) {
        int cnt = query_tst->value(0).toInt();
        if (cnt<=0) {
            // добавим запись в таблицу необработанных автоприкреплений
            QString sql_add =
                    "insert into assig_by_terr_gaps(ocato, subj, dstr, city, nasp, strt, house, corp, sex, age, id_point, id_operator, dt_ins) "
                    " values('" + ocato + "', " +
                    "        " + QString::number(subj) + ", " +
                    "        " + QString::number(dstr) + ", " +
                    "        " + QString::number(city) + ", " +
                    "        " + QString::number(nasp) + ", " +
                    "        " + QString::number(strt) + ", " +
                    "        " + QString::number(house)+ ", " +
                    "        '" + corp + "', "
                    "        " + QString::number(sex)  + ", " +
                    "        " + QString::number(age)  + ", " +
                    "        " + QString::number(data_app.id_point) + ", " +
                    "        " + QString::number(data_app.id_operator)+ ", " +
                    "        CURRENT_TIMESTAMP) ; ";

            QSqlQuery* query_add = new QSqlQuery(db);
            bool res_add = mySQL.exec(this, sql_add, QString("Добавление записи в таблицу необработанных автоприкреплений"), *query_add, true, db, data_app);
            if (!res_add) {
                this->setCursor(Qt::ArrowCursor);
                QMessageBox::critical(this,
                                      "Ошибка при добавлении записи в таблицу необработанных автоприкреплений!",
                                      "При добавлении записи в таблицу необработанных автоприкреплений произошла непредвиденная ошибка!\n");
                delete query_add;
                return false;
            }
        } else {
            // добавление записи не требуется
        }
    } else {
        // запрос почему-то ничего не вернул ...
        // это странно :(
    }
    return true;
}

bool persons_wnd::reg_assig_by_terr_ok(QString ocato, int subj, int dstr, int city, int nasp, int strt, int house, QString corp, int sex, int age) {
    // проверим наличие готовой записи в таблице
    QString sql_del =
            "delete "
            " from assig_by_terr_gaps g "
            " where g.ocato='"+ ocato + "' " +
            "   and g.subj="  + QString::number(subj) +
            "   and g.dstr="  + QString::number(dstr) +
            "   and g.city="  + QString::number(city) +
            "   and g.nasp="  + QString::number(nasp) +
            "   and g.strt="  + QString::number(strt) +
            "   and g.house=" + QString::number(house)+
            "   and g.sex="   + QString::number(sex)  +
            "   and g.age="   + QString::number(age)  +
            "   and g.corp='" + corp + "' ; ";

    QSqlQuery* query_del = new QSqlQuery(db);
    bool res_del = mySQL.exec(this, sql_del, QString("Удаление записей из таблицы необработанных автоприкреплений"), *query_del, true, db, data_app);
    if (!res_del) {
        this->setCursor(Qt::ArrowCursor);
        QMessageBox::critical(this,
                              "Ошибка при удалении записей из таблицы необработанных автоприкреплений!",
                              "При удалении записей из таблицы необработанных автоприкреплений произошла непредвиденная ошибка!\n");
        //data_polis.is_ok = false;
        delete query_del;
        return false;
    }
    return true;
}

void persons_wnd::on_bn_pers_assig_gaps_clicked() {
    QString d_subj;
    QString d_dstr;
    QString d_city;
    QString d_nasp;
    QString d_strt;
    int d_house;
    QString d_corp;

    if (ui->ch_pers_pan_reg->isChecked()) {
        /*if (ui->ln_pers_pan_reg_hous->text().isEmpty() || ui->ln_pers_pan_reg_hous->text().toInt()==0) {
            QMessageBox::warning(this, "Недостаточно данных",
                                 "Номер дома не может быть пустым или 0!");
            return;
        }*/
        // получим адресную информацию по адресу регистрации застрахованного
        d_subj = QString(/*"00" +*/ ui->ln_pers_pan_reg_subj->text()).right(2);
        d_dstr = QString(/*"000" +*/ ui->ln_pers_pan_reg_dstr->text()).right(3);
        d_city = QString(/*"000" +*/ ui->ln_pers_pan_reg_city->text()).right(3);
        d_nasp = QString(/*"000" +*/ ui->ln_pers_pan_reg_nasp->text()).right(3);
        d_strt = QString(/*"0000" +*/ ui->ln_pers_pan_reg_strt->text()).right(4);

        d_house = ui->ln_pers_pan_reg_hous->text().trimmed().toInt();
        d_corp = ui->ln_pers_pan_reg_corp->text();

    } else if (ui->ch_pers_pan_liv->isChecked()) {
        /*if (ui->ln_pers_pan_liv_hous->text().isEmpty() || ui->ln_pers_pan_liv_hous->text().toInt()==0) {
            QMessageBox::warning(this, "Недостаточно данных",
                                 "Номер дома не может быть пустым или 0!");
            return;
        }*/
        // получим адресную информацию по адресу фактического проживания застрахованного
        d_subj = QString(/*"00" +*/ ui->ln_pers_pan_liv_subj->text()).right(2);
        d_dstr = QString(/*"000" +*/ ui->ln_pers_pan_liv_dstr->text()).right(3);
        d_city = QString(/*"000" +*/ ui->ln_pers_pan_liv_city->text()).right(3);
        d_nasp = QString(/*"000" +*/ ui->ln_pers_pan_liv_nasp->text()).right(3);
        d_strt = QString(/*"0000" +*/ ui->ln_pers_pan_liv_strt->text()).right(4);

        d_house = ui->ln_pers_pan_liv_hous->text().trimmed().toInt();
        d_corp = ui->ln_pers_pan_liv_corp->text();
    }

    s_data_assig data_assig;
    data_assig.subj = d_subj.toInt();
    data_assig.dstr = d_dstr.toInt();
    data_assig.city = d_city.toInt();
    data_assig.nasp = d_nasp.toInt();
    data_assig.strt = d_strt.toInt();
    data_assig.house = d_house;
    data_assig.corp = d_corp;

    assig_gaps_wnd *w = new assig_gaps_wnd(db, db_FIAS, data_app, settings, data_assig);
    //w->setWindowState( w->windowState() | Qt::WindowFullScreen);
    w->exec();
}

void persons_wnd::on_act_assig_gaps_triggered() {
    s_data_assig data_assig;
    data_assig.subj = 0;
    data_assig.dstr = 0;
    data_assig.city = 0;
    data_assig.nasp = 0;
    data_assig.strt = 0;
    data_assig.house = 0;
    data_assig.corp = "";

    assig_gaps_wnd *w = new assig_gaps_wnd(db, db_FIAS, data_app, settings, data_assig);
    //w->setWindowState( w->windowState() | Qt::WindowFullScreen);
    w->exec();
}

void persons_wnd::get_pers_to_TFOMS_data_from_perstab(s_data_quest2fond &data_quest) {
    data_quest.id_person = -1;
    data_quest.fam = "";
    data_quest.im  = "";
    data_quest.ot  = "";
    data_quest.w   = -1;
    data_quest.date_birth  = QDate(1900,1,1);
    data_quest.snils  = "";
    data_quest.id_udl  = -1;
    data_quest.id_polis = -1;
    data_quest.doc_type = -1;
    data_quest.doc_ser = "";
    data_quest.doc_num = "";
    data_quest.pol_v = -1;
    data_quest.pol_ser = "";
    data_quest.pol_num = "";
    data_quest.date_begin = QDate(1900,1,1);
    data_quest.date_end = QDate(1900,1,1);
    data_quest.QOGRN = "";
    data_quest.SUO = -1;
    data_quest.OGRNSMO = "";

    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите полис, события которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
        return;
    }

    // проверим выделенную строку персоны
    QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes_pers.size()>0) {
        QModelIndex index_pers = indexes_pers.front();

        // данные застрахованного
        data_quest.id_person = model_persons.data(model_persons.index(index_pers.row(), 0), Qt::EditRole).toInt();
        data_quest.guid = model_persons.data(model_persons.index(index_pers.row(), 1), Qt::EditRole).toString();
        data_quest.note = model_persons.data(model_persons.index(index_pers.row(), 2), Qt::EditRole).toString();
        data_quest.fam  = model_persons.data(model_persons.index(index_pers.row(), 3), Qt::EditRole).toString();
        data_quest.im   = model_persons.data(model_persons.index(index_pers.row(), 4), Qt::EditRole).toString();
        data_quest.ot   = model_persons.data(model_persons.index(index_pers.row(), 5), Qt::EditRole).toString();
        data_quest.w    = model_persons.data(model_persons.index(index_pers.row(), 6), Qt::EditRole).toInt();
        data_quest.date_birth  = model_persons.data(model_persons.index(index_pers.row(), 7), Qt::EditRole).toDate();
        data_quest.date_death  = model_persons.data(model_persons.index(index_pers.row(), 8), Qt::EditRole).toDate();
        data_quest.snils       = model_persons.data(model_persons.index(index_pers.row(), 9), Qt::EditRole).toString();
        data_quest.id_udl      = model_persons.data(model_persons.index(index_pers.row(), 63), Qt::EditRole).toInt();
        data_quest.id_polis    = model_persons.data(model_persons.index(index_pers.row(), 65), Qt::EditRole).toInt();

        // данные документа
        QString sql_udl = "select doc_type, doc_ser, doc_num "
                          " from persons_docs d "
                          " where d.id=" + QString::number(data_quest.id_udl) + " ; ";
        QSqlQuery *query_udl = new QSqlQuery(db);
        bool res_udl = query_udl->exec(sql_udl);
        if (!res_udl) {
            delete query_udl;
            QMessageBox::warning(this, "Ошибка получения данных документа застрахованного",
                                 "При попытке получить данные УДЛ застрахованного произошла ошибка!\n\n"
                                 + sql_udl + "\n\n"
                                 "Операция отменена");
            //QFile::remove(dbf_file_name);
            return;
        }
        if (query_udl->next()) {
            data_quest.doc_type = query_udl->value(0).toInt();
            data_quest.doc_ser = query_udl->value(1).toString();
            data_quest.doc_num = query_udl->value(2).toString();
        }
        delete query_udl;

        // данные полиса
        QString sql_polis = "select p.pol_ser, p.pol_num, p.vs_num, p.enp, p.pol_v, p.date_begin, p.date_end, p.date_stop "
                            " from polises p "
                            " where p.id=" + QString::number(data_quest.id_polis) + " ; ";
        QSqlQuery *query_polis = new QSqlQuery(db);
        bool res_polis = query_polis->exec(sql_polis);
        if (!res_polis) {
            delete query_polis;
            QMessageBox::warning(this, "Ошибка получения данных полиса застрахованного",
                                 "При попытке получить данные полиса застрахованного произошла ошибка!\n\n"
                                 + sql_polis + "\n\n"
                                 "Операция отменена");
            //QFile::remove(dbf_file_name);
            return;
        }
        if (query_polis->next()) {
            data_quest.pol_v = query_polis->value(4).toInt();
            data_quest.pol_ser = query_polis->value(0).toString();
            switch (data_quest.pol_v) {
            case 1:
                data_quest.pol_ser = query_polis->value(0).toString();
                data_quest.pol_num = query_polis->value(1).toString();
                break;
            case 2:
                data_quest.pol_ser = "";
                data_quest.pol_num = query_polis->value(2).toString();
                break;
            case 3:
                data_quest.pol_ser = "";
                data_quest.pol_num = query_polis->value(3).toString();
                break;
            default:
                data_quest.pol_ser = query_polis->value(0).toString();
                data_quest.pol_num = query_polis->value(1).toString();
                break;
            };
            data_quest.date_begin = query_polis->value(5).toDate();
            data_quest.date_end = query_polis->value(6).toDate();
        }
        delete query_polis;

        // остальные данные
        data_quest.QOGRN = data_app.smo_ogrn;
        data_quest.SUO = -1;
        data_quest.OGRNSMO = data_app.smo_ogrn;
    }
}

void persons_wnd::get_pers_to_TFOMS_data_from_controls(s_data_quest2fond &data_quest) {
    data_quest.id_person = -1;
    data_quest.fam = "";
    data_quest.im  = "";
    data_quest.ot  = "";
    data_quest.w   = -1;
    data_quest.date_birth  = QDate(1900,1,1);
    data_quest.snils  = "";
    data_quest.id_udl  = -1;
    data_quest.id_polis = -1;
    data_quest.doc_type = -1;
    data_quest.doc_ser = "";
    data_quest.doc_num = "";
    data_quest.pol_v = -1;
    data_quest.pol_ser = "";
    data_quest.pol_num = "";
    data_quest.date_begin = QDate(1900,1,1);
    data_quest.date_end = QDate(1900,1,1);
    data_quest.QOGRN = "";
    data_quest.SUO = -1;
    data_quest.OGRNSMO = "";

    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    // данные застрахованного
    data_quest.id_person = -1;
    data_quest.fam = ui->ln_pers_pan_fam->text().trimmed().simplified().toUpper();
    data_quest.im  = ui->ln_pers_pan_im->text().trimmed().simplified().toUpper();
    data_quest.ot  = ui->ln_pers_pan_ot->text().trimmed().simplified().toUpper();
    data_quest.w   = ui->combo_pers_pan_sex->currentIndex();
    data_quest.date_birth  = ui->date_pers_pan_birth->date();
    data_quest.snils  = ui->line_pers_pan_snils->text().replace(" ", "").replace("-", "").trimmed().simplified();
    data_quest.id_udl  = data_pers.id_udl;
    data_quest.id_polis = data_pers.id_polis;

    // данные документа
    QString sql_udl = "select doc_type, doc_ser, doc_num "
                      " from persons_docs d "
                      " where d.id=" + QString::number(data_pers.id_udl) + " ; ";
    QSqlQuery *query_udl = new QSqlQuery(db);
    bool res_udl = query_udl->exec(sql_udl);
    if (!res_udl) {
        delete query_udl;
        QMessageBox::warning(this, "Ошибка получения данных документа застрахованного",
                             "При попытке получить данные УДЛ застрахованного произошла ошибка!\n\n"
                             + sql_udl + "\n\n"
                             "Операция отменена");
        //QFile::remove(dbf_file_name);
        return;
    }
    if (query_udl->next()) {
        data_quest.doc_type = query_udl->value(0).toInt();
        data_quest.doc_ser = query_udl->value(1).toString();
        data_quest.doc_num = query_udl->value(2).toString();
    }
    delete query_udl;

    // данные полиса
    QString sql_polis = "select p.pol_ser, p.pol_num, p.vs_num, p.enp, p.pol_v, p.date_begin, p.date_end, p.date_stop "
                        " from polises p "
                        " where p.id=" + QString::number(data_pers.id_polis) + " ; ";
    QSqlQuery *query_polis = new QSqlQuery(db);
    bool res_polis = query_polis->exec(sql_polis);
    if (!res_polis) {
        delete query_polis;
        QMessageBox::warning(this, "Ошибка получения данных полиса застрахованного",
                             "При попытке получить данные полиса застрахованного произошла ошибка!\n\n"
                             + sql_polis + "\n\n"
                             "Операция отменена");
        //QFile::remove(dbf_file_name);
        return;
    }
    if (query_polis->next()) {
        data_quest.pol_v = query_polis->value(4).toInt();
        data_quest.pol_ser = query_polis->value(0).toString();
        switch (data_quest.pol_v) {
        case 1:
            data_quest.pol_ser = query_polis->value(0).toString();
            data_quest.pol_num = query_polis->value(1).toString();
            break;
        case 2:
            data_quest.pol_ser = "";
            data_quest.pol_num = query_polis->value(2).toString();
            break;
        case 3:
            data_quest.pol_ser = "";
            data_quest.pol_num = query_polis->value(3).toString();
            break;
        default:
            data_quest.pol_ser = query_polis->value(0).toString();
            data_quest.pol_num = query_polis->value(1).toString();
            break;
        };
        data_quest.date_begin = query_polis->value(5).toDate();
        data_quest.date_end = query_polis->value(6).toDate();
    }
    delete query_polis;

    // остальные данные
    data_quest.QOGRN = data_app.smo_ogrn;
    data_quest.SUO = -1;
    data_quest.OGRNSMO = data_app.smo_ogrn;
}




void persons_wnd::on_bn_to_TFOMS_clicked() {
    s_data_quest2fond data_quest;

    if (ui->show_pers_data->isChecked()) {
        get_pers_to_TFOMS_data_from_controls(data_quest);
    } else {
        get_pers_to_TFOMS_data_from_perstab(data_quest);
    }
    data_quest.mode = 1;

    // откроем окошко для генерации запроса в ТФОМС
    //delete quest2fond_w;
    quest2fond_w = new quest2fond_wnd(db, data_quest, data_app, settings, this);
    quest2fond_w->exec();
}

void persons_wnd::on_bn_from_TFOMS_clicked() {
    s_data_quest2fond data_quest;

    if (ui->show_pers_data->isChecked()) {
        get_pers_to_TFOMS_data_from_controls(data_quest);
    } else {
        get_pers_to_TFOMS_data_from_perstab(data_quest);
    }
    data_quest.mode = 2;

    // откроем окошко для генерации запроса в ТФОМС
    //delete quest2fond_w;
    quest2fond_w = new quest2fond_wnd(db, data_quest, data_app, settings, this);
    quest2fond_w->exec();
}

void persons_wnd::on_bn_to_TFOMS_2_clicked() {
    s_data_quest2fond data_quest;

    if (ui->show_pers_data->isChecked()) {
        get_pers_to_TFOMS_data_from_controls(data_quest);
    } else {
        get_pers_to_TFOMS_data_from_perstab(data_quest);
    }
    data_quest.mode = 1;

    // откроем окошко для генерации запроса в ТФОМС
    //delete quest2fond_w;
    quest2fond_w = new quest2fond_wnd(db, data_quest, data_app, settings, this);
    quest2fond_w->exec();
}

void persons_wnd::on_bn_from_TFOMS_2_clicked() {
    s_data_quest2fond data_quest;

    if (ui->show_pers_data->isChecked()) {
        get_pers_to_TFOMS_data_from_controls(data_quest);
    } else {
        get_pers_to_TFOMS_data_from_perstab(data_quest);
    }
    data_quest.mode = 2;

    // откроем окошко для генерации запроса в ТФОМС
    //delete quest2fond_w;
    quest2fond_w = new quest2fond_wnd(db, data_quest, data_app, settings, this);
    quest2fond_w->exec();
}

void persons_wnd::on_bn_toCSV_clicked() {
    QString fname_s = QFileDialog::getSaveFileName(this,
                                                   "Куда сохранить файл?",
                                                   QString(),
                                                   "файлы данных (*.csv);;простой текст (*.txt)");
    if (fname_s.isEmpty()) {
        QMessageBox::warning(this,
                             "Не выбрано имя файла",
                             "Имя цедевого файла не задано.\n\n"
                             "Операция отменена.");
        return;
    }
    if (QFile::exists(fname_s)) {
        if (QMessageBox::question(this,
                                  "Удалить старый файл?",
                                  "Файл уже существует.\n"
                                  "Удалить старый файл для того чтобы сохранить новый?",
                                  QMessageBox::Yes|QMessageBox::Cancel)==QMessageBox::Yes) {
            if (!QFile::remove(fname_s)) {
                QMessageBox::warning(this,
                                     "Ошибка при удалении старого файла",
                                     "При удалении старого файла произошла непредвиденная ошибка.\n\n"
                                     "Операция отменена.");
                return;
            }
        }
    }


    // сохраним данные в файл
    QFile file;
    file.setFileName(fname_s);

    if (!file.open(QIODevice::WriteOnly)) {
        QMessageBox::warning(this,
                             "Ошибка создания файла",
                             "При создании целевого файла произошла ошибка.\n\n"
                             "Операция отменена.");
        return;
    }

    // подготовим поток для сохранения файла
    QTextStream stream(&file);
    QString codec_name = "Windows-1251";
    QTextCodec *codec = QTextCodec::codecForName(codec_name.toLocal8Bit());
    stream.setCodec(codec);


    QString head;
    int cnt_head = model_persons.columnCount();
    for (int i=0; i<cnt_head; i++) {
        if (ui->tab_persons->columnWidth(i)>1) {
            head += model_persons.headerData(i,Qt::Horizontal).toString().replace("\n"," ");
            if (i<cnt_head-1)  head += ";";
        }
    }
    stream << head << "\n";

    // переберём полученные данные и сохраним в файл
    QSqlQuery *query_export = new QSqlQuery(db);
    query_export->exec( sql_pers_flds + sql_pers_from );
    while (query_export->next()) {
        for (int j=0; j<cnt_head; j++) {
            if (ui->tab_persons->columnWidth(j)>1) {
                /*QString value = query_export->value(j).toString().trimmed().replace(";",",");
                if (!value.isEmpty()) {
                    if (j==51)  stream << "'";
                    stream << value;
                    if (j==51)  stream << "'";
                }
                if (j<cnt_head-1)  stream << ";";*/

                QString value;
                if (query_export->value(j).type()==QMetaType::QDate) {
                    value = query_export->value(j).toDate().toString("dd.MM.yyyy");
                } else {
                    value = query_export->value(j).toString().trimmed().replace(";",",");
                }
                if (!value.isEmpty()) {
                    //stream << "'";
                    stream << value;
                    //stream << "'";
                }
                if (j<cnt_head-1)  stream << ";";
            }
        }
        stream << "\n";
    }
    file.close();

    // ===========================
    // собственно открытие шаблона
    // ===========================
    // открытие полученного ODT
    /*long result = (long)*/ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_s.utf16()), 0, 0, SW_NORMAL);
}

void persons_wnd::on_bn_pays2mo_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Нажмите кнопку [Поиск] и выберите человека из списка.");
        return;
    }

    s_data_req_pays2mo data_req_pays2mo;

    if (ui->show_pers_data->isChecked()) {
        QMessageBox::warning(this, "Вернитесь в таблицу застрахованных",
                             "Формирование справки о стоимости услуг ЛПУ возможно только для записи, выбранной непосредственно в таблице застрахованных.");
        return;
    } else {
        // проверим выделенную строку
        QModelIndexList indexes = ui->tab_persons->selectionModel()->selection().indexes();

        if (indexes.size()>0) {
            this->setCursor(Qt::WaitCursor);
            QModelIndex index = indexes.front();

            // данные застрахованного
            data_req_pays2mo.id_person  = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();       // e.id
            data_req_pays2mo.guid       = model_persons.data(model_persons.index(index.row(), 1), Qt::EditRole).toString();    // e.guid
            data_req_pays2mo.note       = model_persons.data(model_persons.index(index.row(), 2), Qt::EditRole).toString();    // e.note
            data_req_pays2mo.fam        = model_persons.data(model_persons.index(index.row(), 3), Qt::EditRole).toString();    // e.fam
            data_req_pays2mo.im         = model_persons.data(model_persons.index(index.row(), 4), Qt::EditRole).toString();    // e.im
            data_req_pays2mo.ot         = model_persons.data(model_persons.index(index.row(), 5), Qt::EditRole).toString();    // e.ot
            data_req_pays2mo.sex        = model_persons.data(model_persons.index(index.row(), 6), Qt::EditRole).toInt();       // e.sex
            data_req_pays2mo.date_birth = model_persons.data(model_persons.index(index.row(), 7), Qt::EditRole).toDate();      // e.date_birth

            data_req_pays2mo.phone_cell = model_persons.data(model_persons.index(index.row(),13), Qt::EditRole).toString();    // e.phone_cell
            data_req_pays2mo.phone_home = model_persons.data(model_persons.index(index.row(),15), Qt::EditRole).toString();    // e.phone_home

            // определим данные УДЛ
            QString sql_udl = "select d.doc_type, s.text as doc_name, d.doc_ser, d.doc_num, d.doc_date, d.org_code, d.doc_org "
                              " from persons_docs d "
                              "      left join spr_f011 s on(d.doc_type=s.code) "
                              " where d.id in (select * from get_pers_udl(" + QString::number(data_pers.id) + ", NULL) ) ; ";
            QSqlQuery *query_udl = new QSqlQuery(db);
            bool res_udl = mySQL.exec(this, sql_udl, QString("Получение данных УДЛ застрахованного"), *query_udl, true, db, data_app);
            if (!res_udl) {
                delete query_udl;
                this->setCursor(Qt::ArrowCursor);
                QMessageBox::warning(this, "Ошибка при чтении данных УДЛ застрахованного", "При чтении данных УДЛ застрахованного произошла неожиданная ошибка");
            }
            query_udl->next();
            data_req_pays2mo.udl_type = query_udl->value(0).toInt();
            data_req_pays2mo.udl_name = query_udl->value(1).toString();
            data_req_pays2mo.udl_ser  = query_udl->value(2).toString();
            data_req_pays2mo.udl_num  = query_udl->value(3).toString();
            data_req_pays2mo.udl_date = query_udl->value(4).toDate();
            data_req_pays2mo.udl_code = query_udl->value(5).toString();
            data_req_pays2mo.udl_org  = query_udl->value(6).toString();

            delete query_udl;

            // откроем окошко для генерации запроса в ТФОМС
            print_pays2mo_w = new print_pays2mo_wnd(db, data_app, data_req_pays2mo, data_pers, data_doc, settings, this);
            if (print_pays2mo_w->exec()) {
            } else {
            }

        } else {
            QMessageBox::warning(this, "Ничего не выбрано!", "Выберите из таблицы персон застрахованного, для которого надо сформировать справку о стоимости медицинских услуг.");
        }
        this->setCursor(Qt::ArrowCursor);
    }
}

void persons_wnd::on_act_pays2mo_pnt_triggered() {
    delete print_pays2mo_rep_pt_w;
    print_pays2mo_rep_pt_w = new print_pays2mo_rep_pt_wnd(db, true, data_app, settings, this);
    print_pays2mo_rep_pt_w->exec();
}

void persons_wnd::on_act_match_TFOMS_triggered() {
    // подключимся к ODBC
    db_ODBC = QSqlDatabase::addDatabase("QODBC", "INKO_DBF");
    db_ODBC.setConnectOptions();
    // имя источника данных
    db_ODBC.setDatabaseName("INKO_DBF");
    while (!db_ODBC.open()) {
        if (QMessageBox::warning(this, "Не найден ODBC-источник данных INKO_DBF",
                                 QString("Источник данных должен использовать папку, указанную в параметре программы \"path_dbf\":\n"
                                 "При попытке подключиться к испточнику данных ODBC \"INKO_DBF\" операционная система вернула отказ. \n"
                                 "Этот источник данных необходим для генерации и чтения dbf-файлов обмена с ТФОМС. \n"
                                 "Если такого источника данных нет - создайте его.\n\n")
                                 + data_app.path_dbf + "\n\n"
                                 "Попробовать снова?", QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes)==QMessageBox::No) {
            return;
        }
    }

    delete match_tfoms_w;

    s_data_match data_match;
    data_match.date_match.setDate(QDate::currentDate().year(), QDate::currentDate().month(),1);
    data_match.pack_name = "";

    match_tfoms_w = new match_TFOMS_wnd(db_ODBC, data_match, data_app);
    if (!match_tfoms_w->exec())
        return;

    QString pack_name = data_match.pack_name;
    if (pack_name.isEmpty()) {
        db_ODBC.close();
        return;
    }

    this->setCursor(Qt::WaitCursor);

    // выберем все данные
    QString sql_tfoms = "select * "
                        "  from " + pack_name + " ; ";
    QSqlQuery *query_tfoms = new QSqlQuery(db_ODBC);
    bool res_tfoms = query_tfoms->exec(sql_tfoms);
    QString err = db_ODBC.lastError().databaseText();
    if (!res_tfoms) {
        delete query_tfoms;
        QMessageBox::warning(this, "Ошибка чтения данных ТФОМС",
                             "При попытке прочитать данные ТФОМС произошла ошибка!\n\n"
                             + sql_tfoms + "\n\n"
                             "Операция отменена");
        db_ODBC.close();
        QSqlDatabase::removeDatabase("INKO_DBF");
        return;
    }

    // удалим, если есть, старые данные
    QString sql_clear = "delete from match_tfoms where pack_name='" + pack_name + "' ; ";
    QSqlQuery *query_clear = new QSqlQuery(db);
    /*bool res_clear =*/ query_clear->exec(sql_clear);
    delete query_clear;

    // зальём новые данные
    QSqlRecord rec = query_tfoms->record();
    while (query_tfoms->next()) {
        // поля
        QString sql_ins = "insert into match_tfoms (pack_name, ";
        int n = rec.count();
        for (int i=0; i<n; i++) {
            sql_ins += rec.fieldName(i);
            if (i<n-1)
                sql_ins += ", ";
        }
        sql_ins += ") ";

        // значения
        sql_ins += "values ('" + pack_name + "', ";
        for (int i=0; i<n; i++) {
            if (query_tfoms->value(i).isNull()) {
                sql_ins += "NULL";
            } else {
                sql_ins += "'" + query_tfoms->value(i).toString() + "'";
            }
            if (i<n-1)
                sql_ins += ", ";
        }
        sql_ins += ") ";

        // добавим сроку
        QSqlQuery *query_ins = new QSqlQuery(db);
        bool res_ins = query_ins->exec(sql_ins);
        QString err = db_ODBC.lastError().databaseText();
        if (!res_ins) {
            delete query_ins;
            QMessageBox::warning(this, "Ошибка добавления данных от ТФОМС",
                                 "При попытке добавить строку данных от ТФОМС произошла ошибка!\n\n"
                                 + sql_ins + "\n\n"
                                 "Операция отменена");
            db_ODBC.close();
            QSqlDatabase::removeDatabase("INKO_DBF");
            return;
        }
        delete query_ins;
    }
    delete query_tfoms;


    // сопоставим данные ТФОМС с записями в таблице персон
    QString sql_fnd = "update match_tfoms "
                      "   set fam = upper(trim(fam)), "
                      "       im  = upper(trim(im)), "
                      "       ot  = upper(trim(ot)), "
                      "       ss    = replace(replace(trim(   ss),' ',''),'-',''), "
                      "       pfrss = replace(replace(trim(pfrss),' ',''),'-','') "
                      " where pack_name='" + pack_name + "' ; "

                      "delete from persons_find ; "

                      "insert into persons_find(id_person, id_other) "
                      "select e.id, m.id_ "
                      "  from persons e"
                      "  left join match_tfoms m "
                      "         on( m.pack_name='" + pack_name + "' and "
                      "              ( (e.fam=m.fam and e.im=m.im and (e.ot is NULL or m.ot is NULL or e.ot=m.ot) and e.date_birth=m.dr and e.enp is not NULL and m.enp is not NULL and e.enp=m.enp) "
                      "             or (e.date_birth=m.dr and e.enp is not NULL and m.enp is not NULL and e.enp=m.enp) "
                      "             or (e.fam=m.fam and e.im=m.im and (e.ot is NULL or m.ot is NULL or e.ot=m.ot) and e.date_birth=m.dr and e.snils is not NULL and coalesce(m.ss, m.pfrss) is not NULL and e.snils=coalesce(m.ss, m.pfrss)) "
                      "             or (e.fam=m.fam and e.im=m.im and (e.ot is NULL or m.ot is NULL or e.ot=m.ot) and e.date_birth=m.dr) "
                      "           ) ) "
                      " where e.dt_ins<='" + data_match.date_match.toString("yyyy-MM-dd") + "' "
                      "   and st_person(e.id, '" + data_match.date_match.toString("yyyy-MM-dd") + "')>-100 ; ";

    QSqlQuery *query_fnd = new QSqlQuery(db);
    bool res_fnd = mySQL.exec(this, sql_fnd, QString("Сопоставление данных ТФОМС и ИНКО"), *query_fnd, true, db, data_app);
    if (!res_fnd) {
        delete query_fnd;
        this->setCursor(Qt::ArrowCursor);
        QMessageBox::warning(this, "Ошибка сопоставления данных ТФОМС и ИНКО", "При сопоставлении данных ТФОМС и ИНКО произошла неожиданная ошибка");
    }
    delete query_fnd;


    // выберем данные людей, которых нет в полученном файле
    QString sql_match  =  " select * \n"
                          "    from ( \n"
                          "      select (case when t.id is null \n"
                          "                   then 'есть в ИНКО, нет в фонде ' \n"
                          "                   else ' ' end) \n"
                          "           ||(case when p.pol_v<>t.poltp \n"
                          "                   then ('ИНКО - ' \n"
                          "                         || case p.pol_v \n"
                          "                              when 1 then 'старый' \n"
                          "                              when 2 then 'ВС' \n"
                          "                              when 3 then 'ЕНП' \n"
                          "                              else cast (p.pol_v as text) end \n"
                          "                         || ', фонд - ' \n"
                          "                         || case t.poltp \n"
                          "                              when 1 then 'старый' \n"
                          "                              when 2 then 'ВС' \n"
                          "                              when 3 then 'ЕНП' \n"
                          "                              else cast (p.pol_v as text) end ) \n"
                          "                   else ('ДАТА ' \n"
                          "                         || case \n"
                          "                              when (t.dstop<>p.date_stop ) then ('DSTOP - изъятие полиса  '||t.dstop||' (фонд) <>  '||p.date_stop ||' (ИНКО) ') \n"
                          "                              when (t.dend <>p.date_end  ) then ('DEND  - план окончания  '||t.dend ||' (фонд) <>  '||p.date_end  ||' (ИНКО) ') \n"
                          "                              when (t.dbeg <>p.date_begin) then ('DBEG  - открытия полиса '||t.dbeg ||' (фонд) <>  '||p.date_begin||' (ИНКО) ') \n"
                          "                              else ' - ??? - ' end ) \n"
                          "                   end \n"
                          "             ) as comment, \n"
                          "            t.*, e.id as id_person, e.category, e.fam as e_fam, e.im as e_im, e.ot as e_ot, e.sex, e.date_birth, e.plc_birth, e.oksm_birth, e.oksm_c, e.date_death, e.snils, e.status, \n"
                          "            p.pol_v, p.vs_num, p.pol_ser, p.pol_num, p.enp, p.date_begin, p.date_end, p.date_stop, p.date_activate, p.date_get2hand, \n"
                          "            evt.event_code, f.file_name, f.date_send \n"
                          "       from persons e \n"
                          "       left join persons_find fnd on( e.id=fnd.id_person ) \n"
                          "     left join match_tfoms t on( t.pack_name='" + pack_name + "' and t.id_=fnd.id_other ) \n"
                          "       left join events evt on(evt.id= /*последнее событие*/ \n"
                          "                  ( select max(ev2.id) \n"
                          "                      from events ev2 \n"
                          "                      left join polises p2 on(p2.id=ev2.id_polis) \n"
                          "                     where p2.id_person=e.id \n"
                          "                       and ev2.event_code not in('П021','П022','П023','П024','П025','П040') ) ) \n"
                          "       left join polises p on(p.id=evt.id_polis) /*последний полис*/ \n"
                          "       left join files_out_i f on( f.id= /*файл, в котором ушло последнее событие*/ \n"
                          "                  ( select max(r.id_file_i) \n"
                          "                      from files_r_evts r \n"
                          "                     where r.id_event=evt.id ) ) \n"
                          "      where e.status in(1,2,3,4,11,12,13,14) \n"
                          "      and e.dt_ins<='" + data_match.date_match.toString("yyyy-MM-dd") + "' \n"
                          "  union \n"
                          "     select ('нет в ИНКО, фонд - '|| \n"
                          "             case cast(t.poltp as text) \n"
                          "               when '1' then 'старый' \n"
                          "               when '2' then 'ВС' \n"
                          "               when '3' then 'ЕНП' \n"
                          "               else cast(t.poltp as text) end ||' ') as comment, \n"
                          "            t.*, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \n"
                          "            NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL \n"
                          "       from match_tfoms t \n"
                          "       left join persons_find fnd on( t.id_=fnd.id_other ) \n"
                          "       left join persons e on( e.id=fnd.id_person ) \n"
                          "      where t.pack_name=' + pack_name + ' \n"
                          "        and e.id is NULL \n"
                          "   ) q \n"
                          "  order by q.comment DESC, q.date_begin, fam, im, ot, e_fam, e_im, e_ot ; ";
    /*
                  "select * \n"
                        "  from ( \n"
                        "    select (case when t.id is null \n"
                        "                 then 'есть в ИНКО, нет в фонде ' \n"
                        "                 else ' ' end) \n"
                        "         ||(case when p.pol_v<>t.poltp \n"
                        "                 then ('ИНКО - '||case cast(p.pol_v as text) \n"
                        "                                    when '1' then 'старый' \n"
                        "                                    when '2' then 'ВС' \n"
                        "                                    when '3' then 'ЕНП' \n"
                        "                                    else cast (p.pol_v as text) end || ', фонд - '|| \n"
                        "                                      case cast(t.poltp as text) \n"
                        "                                        when '1' then 'старый' \n"
                        "                                        when '2' then 'ВС' \n"
                        "                                        when '3' then 'ЕНП' \n"
                        "                                        else \n"
                        "                                          case "
                        "                                            when t.dbeg<>p.date_begin then 'ДАТА DSTOP - изъятие полиса  '||t.dstop||' (фонд) <>  '||p.date_stop ||' (ИНКО) ' \n"
                        "                                            when t.dbeg<>p.date_begin then 'ДАТА DEND  - план окончания  '||t.dend ||' (фонд) <>  '||p.date_end  ||' (ИНКО) ' \n"
                        "                                            when t.dbeg<>p.date_begin then 'ДАТА DBEG  - открытия полиса '||t.dbeg ||' (фонд) <>  '||p.date_begin||' (ИНКО) ' \n""
                        "                                          end ) ||' ' \n"
                        "                 else ' ' end) as comment, \n"
                        "          t.*, e.id as id_person, e.category, e.fam as e_fam, e.im as e_im, e.ot as e_ot, e.sex, e.date_birth, e.plc_birth, e.oksm_birth, e.oksm_c, e.date_death, e.snils, e.status, \n"
                        "          p.pol_v, p.vs_num, p.pol_ser, p.pol_num, p.enp, p.date_begin, p.date_end, p.date_stop, p.date_activate, p.date_get2hand, \n"
                        "          evt.event_code, f.file_name, f.date_send \n"
                        "     from persons e \n"
                        "     left join persons_find fnd on( e.id=fnd.id_person ) \n"
                        "     left join match_tfoms t on( t.pack_name='" + pack_name + "' and t.id_=fnd.id_other ) \n"
                        "     left join events evt on(evt.id= /*последнее событие* / \n"
                        "                ( select max(ev2.id) \n"
                        "                    from events ev2 \n"
                        "                    left join polises p2 on(p2.id=ev2.id_polis) \n"
                        "                   where p2.id_person=e.id \n"
                        "                     and ev2.event_code not in('П021','П022','П023','П024','П025','П040') ) ) \n"
                        "     left join polises p on(p.id=evt.id_polis) /*последний полис* / \n"
                        "     left join files_out_i f on( f.id= /*файл, в котором ушло последнее событие* / \n"
                        "                ( select max(r.id_file_i) \n"
                        "                    from files_r_evts r \n"
                        "                   where r.id_event=evt.id ) ) \n"
                        "    where e.status in(1,2,3,4,11,12,13,14) \n"
                        "      and e.dt_ins<='" + data_match.date_match.toString("yyyy-MM-dd") + "' \n"
                        "union \n"
                        "   select ('нет в ИНКО, фонд - '|| \n"
                        "           case cast(t.poltp as text) \n"
                        "             when '1' then 'старый' \n"
                        "             when '2' then 'ВС' \n"
                        "             when '3' then 'ЕНП' \n"
                        "             else cast(t.poltp as text) end ||' ') as comment, \n"
                        "          t.*, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \n"
                        "          NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL \n"
                        "     from match_tfoms t \n"
                        "     left join persons_find fnd on( t.id_=fnd.id_other ) \n"
                        "     left join persons e on( e.id=fnd.id_person ) \n"
                        "    where t.pack_name='" + pack_name + "' \n"
                        "      and e.id is NULL \n"
                        " ) q \n"
                        "order by q.comment DESC, q.date_begin, fam, im, ot, e_fam, e_im, e_ot ; ";
        */

    delete show_tab_w;
    this->setCursor(Qt::ArrowCursor);

    show_tab_w = new show_tab_wnd("Сверка списка закстрахованных с ТФОМС на " + data_match.date_match.toString("yyyy-MM-dd"),
                                  sql_match, db, data_app, this);
    show_tab_w->show();
}

void persons_wnd::on_ch_stateless_clicked(bool checked) {
    if (checked) {
        if (QMessageBox::question(this, "Нужно подтверждение",
                                  "Вы действительно хотите отметить застрахованного как лицо без гражданства?",
                                  QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::Yes) {
            ui->ch_stateless->setChecked(true);

            ui->label_8->setEnabled(false);
            ui->spin_pers_pan_oksm_c->setEnabled(false);
            ui->label_11->setEnabled(false);
            ui->combo_pers_pan_oksm_cname->setEnabled(false);
            ui->spin_pers_pan_oksm_c->setValue(0);

        } else {
            ui->ch_stateless->setChecked(false);

            ui->label_8->setEnabled(true);
            ui->spin_pers_pan_oksm_c->setEnabled(true);
            ui->label_11->setEnabled(true);
            ui->combo_pers_pan_oksm_cname->setEnabled(true);
            if (data_pers.oksm_c<=0)
                data_pers.oksm_c = ui->combo_pers_pan_oksm_cname->findData(643);
            ui->spin_pers_pan_oksm_c->setValue(data_pers.oksm_c);
        }

    } else {
        ui->ch_stateless->setChecked(false);

        ui->label_8->setEnabled(true);
        ui->spin_pers_pan_oksm_c->setEnabled(true);
        ui->label_11->setEnabled(true);
        ui->combo_pers_pan_oksm_cname->setEnabled(true);
        if (data_pers.oksm_c<=0)
            data_pers.oksm_c = ui->combo_pers_pan_oksm_cname->findData(643);
        ui->spin_pers_pan_oksm_c->setValue(data_pers.oksm_c);
    }
    b_need_save(true);
}

void persons_wnd::on_act_match_assigs_triggered() {

    // подключимся к ODBC
    db_ODBC = QSqlDatabase::addDatabase("QODBC", "INKO_DBF");
    db_ODBC.setConnectOptions();
    // имя источника данных
    db_ODBC.setDatabaseName("INKO_DBF");
    while (!db_ODBC.open()) {
        if (QMessageBox::warning(this, "Не найден ODBC-источник данных INKO_DBF",
                                 QString("Источник данных должен использовать папку, указанную в параметре программы \"path_dbf\":\n"
                                 "При попытке подключиться к испточнику данных ODBC \"INKO_DBF\" операционная система вернула отказ. \n"
                                 "Этот источник данных необходим для генерации и чтения dbf-файлов обмена с ТФОМС. \n"
                                 "Если такого источника данных нет - создайте его.\n\n")
                                 + data_app.path_dbf + "\n\n"
                                 "Попробовать снова?", QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes)==QMessageBox::No) {
            return;
        }
    }


    delete match_assig_tfoms_w;

    s_data_match_assig data_match_assig;
    data_match_assig.date_assig = QDate::currentDate().addDays(-1);
    data_match_assig.pack_name = "";

    match_assig_tfoms_w = new match_assig_TFOMS_wnd(db_ODBC,data_match_assig);
    if (!match_assig_tfoms_w->exec())
        return;

    // надо в папке _DBF_ выбрать файл, полученный от ТФОМС
    //QString filename = QFileDialog::getOpenFileName(this, "Выберите в папке _DBF_ полученный от ТФОМС файл *.dbf",
    //                                                data_app.path_dbf, "DBF-files (*.dbf)"/*, QFileDialog::ReadOnly*/);
    //QFileInfo fi(filename);
    //QString pack_name = fi.baseName();

    QString pack_name = data_match_assig.pack_name;
    /*QDate assig_date = data_match_assig.date_assig;*/
    if (pack_name.isEmpty()) {
        db_ODBC.close();
        return;
    }


    this->setCursor(Qt::WaitCursor);

    // выберем все данные
    QString sql_tfoms = "select * "
                        " from " + pack_name + " ; ";
    QSqlQuery *query_tfoms = new QSqlQuery(db_ODBC);
    bool res_tfoms = query_tfoms->exec(sql_tfoms);
    QString err = db_ODBC.lastError().databaseText();
    if (!res_tfoms) {
        delete query_tfoms;
        QMessageBox::warning(this, "Ошибка чтения данных ТФОМС",
                             "При попытке прочитать данные ТФОМС произошла ошибка!\n\n"
                             + sql_tfoms + "\n\n"
                             "Операция отменена");
        db_ODBC.close();
        QSqlDatabase::removeDatabase("INKO_DBF");
        this->setCursor(Qt::ArrowCursor);
        return;
    }

    // удалим, если есть, старые данные
    QString sql_clear = "delete from match_assig where pack_name='" + pack_name + "' ; ";
    QSqlQuery *query_clear = new QSqlQuery(db);
    /*bool res_clear =*/ query_clear->exec(sql_clear);
    delete query_clear;

    // зальём новые данные
    QSqlRecord rec = query_tfoms->record();
    while (query_tfoms->next()) {
        // поля
        QString sql_ins = "insert into match_assig (pack_name, ";
        int n = rec.count();
        for (int i=0; i<n; i++) {
            sql_ins += rec.fieldName(i);
            if (i<n-1)
                sql_ins += ", ";
        }
        sql_ins += ") ";

        // значения
        sql_ins += "values ('" + pack_name + "', ";
        for (int i=0; i<n; i++) {
            if (query_tfoms->value(i).isNull()) {
                sql_ins += "NULL";
            } else {
                sql_ins += "'" + query_tfoms->value(i).toString() + "'";
            }
            if (i<n-1)
                sql_ins += ", ";
        }
        sql_ins += ") ";

        // добавим сроку
        QSqlQuery *query_ins = new QSqlQuery(db);
        bool res_ins = query_ins->exec(sql_ins);
        QString err = db_ODBC.lastError().databaseText();
        if (!res_ins) {
            delete query_ins;
            QMessageBox::warning(this, "Ошибка добавления данных от ТФОМС",
                                 "При попытке добавить строку данных от ТФОМС произошла ошибка!\n\n"
                                 + sql_ins + "\n\n"
                                 "Операция отменена");
            db_ODBC.close();
            QSqlDatabase::removeDatabase("INKO_DBF");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        delete query_ins;
    }
    delete query_tfoms;

    db.transaction();

    // получим старые и новые параметры прикрепления
    QString sql_assig = "select e.id as id_person, "
                        "       a.code_mo as o_code_mo, a.snils_mt as o_snils_mt, a.assig_date as o_assig_date, a.assig_type as o_assig_type, a.status as o_status, "
                        "       m.lpu as n_code_mo, m.ss_doctor as n_snils_mt, m.lpudt as n_assig_date, 1 as n_assig_type "
                        " from persons e "
                        "      left join persons_assig a on (a.id_person=e.id and a.is_actual=0) "
                        "      left join match_assig m "
                        "          on ( (e.fam=m.fam and e.im=m.im and COALESCE(e.ot,'')=COALESCE(m.ot,'') and e.date_birth=m.dr) "
                        "             or(COALESCE(e.snils,'')=COALESCE(m.ss)) "
                        "             or(COALESCE(e.enp,'')  =COALESCE(m.enp)) "
                        "             ) "
                        " where st_person(e.id, '" + data_match_assig.date_assig.toString("yyyy-MM-dd") + "')>-100 ; ";
                    // проверка не только прикреплённых, но и не прикреплённых в ТФОМС
                        //" where m.lpu is not NULL ; ";
    QSqlQuery *query_assig = new QSqlQuery(db);
    bool res_assig = query_assig->exec(sql_assig);
    QString err1 = db.lastError().databaseText();
    if (!res_assig) {
        delete query_assig;
        QMessageBox::warning(this, "Ошибка при попытке получить старые и новые данные прикреплений",
                             "При опытке получить старые и новые данные прикреплений произошла ошибка!\n\n"
                             + sql_assig + "\n\n"
                             "Операция отменена");
        db.rollback();
        this->setCursor(Qt::ArrowCursor);
        return;
    }

    while (query_assig->next()) {
        int id_person = query_assig->value(0).toInt();
        QString o_code_mo  = query_assig->value("o_code_mo").toString();
        QString n_code_mo  = query_assig->value("n_code_mo").toString();
        QString o_snils_mt = query_assig->value("o_snils_mt").toString();
        QString n_snils_mt = query_assig->value("n_snils_mt").toString();
        /*int o_assig_type = query_assig->value("o_assig_type").toInt();*/
        int n_assig_type = query_assig->value("n_assig_type").toInt();
        /*QDate o_assig_date = query_assig->value("o_assig_date").toDate();*/
        QDate n_assig_date = query_assig->value("n_assig_date").toDate();
        int o_status = query_assig->value("o_status").toInt();
        if (  o_code_mo.isEmpty() &&
             !n_code_mo.isEmpty() ) {
            // это новая запись - просто добавим
            QString sql_ins = "update persons_assig "
                              "   set is_actual = is_actual +1 "
                              " where id_person = " + QString::number(id_person) + " ; "

                              "insert into persons_assig (id_person, code_mo, snils_mt, assig_type, assig_date, is_actual, status) "
                              " values ( " + QString::number(id_person) + ", "
                              "         '" + n_code_mo + "', "
                              "         '" + n_snils_mt + "', "
                              "          " + QString::number(n_assig_type) + ", "
                              "         '" + n_assig_date.toString("yyyy-MM-dd") + "', "
                              "          0, "
                              "          0 ) ; ";
            QSqlQuery *query_ins = new QSqlQuery(db);
            bool res_ins = query_ins->exec(sql_ins);
            QString err1 = db.lastError().databaseText();
            if (!res_ins) {
                delete query_ins;
                QMessageBox::warning(this, "Ошибка при попытке добавить новое прикрепление",
                                     "При попытке добавить новое прикрепление произошла ошибка!\n\n"
                                     + sql_ins + "\n\n"
                                     "Операция отменена");
                db.rollback();
                this->setCursor(Qt::ArrowCursor);
                return;
            }
            delete query_ins;
        }
        else if ( !o_code_mo.isEmpty() &&
                  !n_code_mo.isEmpty() &&
                  o_code_mo==n_code_mo &&
                  o_snils_mt.isEmpty() &&
                  !n_snils_mt.isEmpty() ) {
            // изменим у себя СНИЛС врача по данным ТФОМС
            QString sql_upd = "update persons_assig "
                              "   set snils_mt='" + n_snils_mt + "', "
                              "       status=0 "
                              " where id_person=" + QString::number(id_person) +
                              "   and is_actual=0 ; ";
            QSqlQuery *query_upd = new QSqlQuery(db);
            bool res_upd = query_upd->exec(sql_upd);
            QString err1 = db.lastError().databaseText();
            if (!res_upd) {
                delete query_upd;
                QMessageBox::warning(this, "Ошибка при попытке изменить СНИЛС врача",
                                     "При попытке изменить СНИЛС врача произошла ошибка!\n\n"
                                     + sql_upd + "\n\n"
                                     "Операция отменена");
                db.rollback();
                this->setCursor(Qt::ArrowCursor);
                return;
            }
            delete query_upd;
        }
        else if ( !o_code_mo.isEmpty() &&
                  !n_code_mo.isEmpty() &&
                  o_code_mo!=n_code_mo &&
                  o_status==0) {
            // вероятно у нас более свежие данные прикрепления - пометим запись на переотправку как изменённую
            QString sql_send = "update persons_assig "
                               "   set status=1 "
                               " where id_person = " + QString::number(id_person) + " "
                               "   and is_actual = 0; ";
            QSqlQuery *query_send = new QSqlQuery(db);
            bool res_send = query_send->exec(sql_send);
            QString err1 = db.lastError().databaseText();
            if (!res_send) {
                delete query_send;
                QMessageBox::warning(this, "Ошибка при попытке пометить прикрепление на переотправку",
                                     "При попытке пометить прикрепление на переотправку произошла ошибка!\n\n"
                                     + sql_send + "\n\n"
                                     "Операция отменена");
                db.rollback();
                this->setCursor(Qt::ArrowCursor);
                return;
            }
            delete query_send;
        }
        else if ( !o_code_mo.isEmpty() &&
                  n_code_mo.isEmpty() &&
                  o_status<2 ) {
            // записи нет в ТФОМС - пометим на отправку
            QString sql_send = "update persons_assig "
                               "   set status=2 "
                               " where id_person = " + QString::number(id_person) + " "
                               "   and is_actual = 0; ";
            QSqlQuery *query_send = new QSqlQuery(db);
            bool res_send = query_send->exec(sql_send);
            QString err1 = db.lastError().databaseText();
            if (!res_send) {
                delete query_send;
                QMessageBox::warning(this, "Ошибка при попытке пометить прикрепление на отправку",
                                     "При попытке пометить прикрепление на отправку произошла ошибка!\n\n"
                                     + sql_send + "\n\n"
                                     "Операция отменена");
                db.rollback();
                this->setCursor(Qt::ArrowCursor);
                return;
            }
            delete query_send;
        }
    }


    delete query_assig;
    db.commit();
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_ch_folder_clicked(bool checked) {
    ui->combo_folder->setVisible(checked);
    ui->ch_folder_closed->setVisible(checked);
    ui->bn_folder_new->setVisible(checked);
    ui->bn_folder_open_close->setVisible(checked);
    ui->bn_folder_empty->setVisible(checked);
    ui->bn_folder_del->setVisible(checked);
    ui->line_28->setVisible(checked);
    ui->line_29->setVisible(checked);

    // сохраним данные в settings
    settings.beginGroup("flags");
    data_app.use_folders = ui->ch_folder->isChecked();
    settings.setValue("use_folders", data_app.use_folders);
    data_app.default_folder = ui->combo_folder->currentText();
    settings.setValue("default_folder", data_app.default_folder.toUtf8());
    settings.endGroup();
    settings.sync();

    refresh_persons_tab();
}

void persons_wnd::on_ch_folder_closed_clicked(bool checked) {
    refresh_folders();
    if (checked) {
        ui->bn_folder_open_close->setText(" Открыть ");
    } else {
        ui->bn_folder_open_close->setText(" Закрыть ");
    }

    // сохраним данные в settings
    settings.beginGroup("flags");
    data_app.use_folders = ui->ch_folder->isChecked();
    settings.setValue("use_folders", data_app.use_folders);
    data_app.default_folder = ui->combo_folder->currentText();
    settings.setValue("default_folder", data_app.default_folder.toUtf8());
    settings.endGroup();
    settings.sync();

    refresh_persons_tab();
}

void persons_wnd::on_bn_folder_new_clicked() {
    s_data_folder data_folder;
    data_folder.id = -1;
    data_folder.folder_name = "";
    data_folder.date_open = QDate::currentDate();
    data_folder.date_open = QDate(1900,1,1);
    data_folder.status = 1;

    delete folder_w;
    folder_w = new folder_wnd(db, data_folder, this->data_app, this->settings, this);

    if (folder_w->exec()) {
        refresh_folders();
    }
}

void persons_wnd::on_bn_folder_open_close_clicked() {
    s_data_folder data_folder;
    data_folder.id = ui->combo_folder->currentData().toInt();

    if (data_folder.id<1) {
        QMessageBox::warning(this, "Выберите папку",
                              "Выберите папку, статус которой хотите изменить.");
        return;
    }

    db.transaction();

    if (ui->ch_folder_closed->isChecked()) {
        if (QMessageBox::question(this, "Нужно подтверждение",
                                  "Вы действительно хотите открыть закрытую папку \n\n"
                                  "\"" + ui->combo_folder->currentText() + "\" ?\n\n"
                                  "После этого в папку можно будет добавлять новые данные.",
                                  QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Cancel) {
            // отмена операции
            return;
        }
        // откроем закрытую папку
        QString sql_upd = "update folders "
                          "   set status=1, "
                          "       date_close=NULL "
                          " where id=" + QString::number(data_folder.id) + " ; ";
        QSqlQuery *query_upd = new QSqlQuery(db);
        bool res_upd = query_upd->exec(sql_upd);
        QString err1 = db.lastError().databaseText();
        if (!res_upd) {
            delete query_upd;
            QMessageBox::warning(this, "Ошибка при попытке открыть папку",
                                 "При опытке открыть папку произошла ошибка!\n\n"
                                 + sql_upd + "\n\n"
                                 "Операция отменена");
            db.rollback();
            return;
        }
    } else {
        if (QMessageBox::question(this, "Нужно подтверждение",
                                  "Вы действительно хотите закрыть папку \n\n"
                                  "\"" + ui->combo_folder->currentText() + "\" ?\n\n"
                                  "В закрытую папку нельзя добавлять новые данные.",
                                  QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Cancel) {
            // отмена операции
            return;
        }
        // закроем открытую папку
        QString sql_upd = "update folders "
                          "   set status=0, "
                          "       date_close='" + QDate::currentDate().toString("yyyy-MM-dd") + "' "
                          " where id=" + QString::number(data_folder.id) + " ; ";
        QSqlQuery *query_upd = new QSqlQuery(db);
        bool res_upd = query_upd->exec(sql_upd);
        QString err1 = db.lastError().databaseText();
        if (!res_upd) {
            delete query_upd;
            QMessageBox::warning(this, "Ошибка при попытке закрыть папку",
                                 "При опытке закрыть папку произошла ошибка!\n\n"
                                 + sql_upd + "\n\n"
                                 "Операция отменена");
            db.rollback();
            return;
        }
    }
    db.commit();

    refresh_folders();
}

void persons_wnd::on_bn_folder_empty_clicked() {
    s_data_folder data_folder;
    data_folder.id = ui->combo_folder->currentData().toInt();

    if (data_folder.id<1) {
        QMessageBox::warning(this, "Выберите папку",
                              "Выберите папку, которую хотите опустошить.");
        return;
    }

    db.transaction();

    data_folder.id = ui->combo_folder->currentData().toInt();

    if (ui->ch_folder_closed->isChecked()) {
        if (QMessageBox::question(this, "Нужно подтверждение",
                                  "Вы действительно хотите опустошить ЗАКРЫТУЮ папку \n\n"
                                  "\"" + ui->combo_folder->currentText() + "\" ?\n\n"
                                  "Все записи из этой папки будут перенесены в основной массив.\n"
                                  "Это необратимая операция. Назад в папку записи могут быть перенесены только по одной, вручную.",
                                  QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Cancel) {
            // отмена операции
            return;
        }
        // опустошим папку
        QString sql_upd = "update persons "
                          "   set id_folder = NULL "
                          " where id_folder=" + QString::number(data_folder.id) + " ; ";
        QSqlQuery *query_upd = new QSqlQuery(db);
        bool res_upd = query_upd->exec(sql_upd);
        QString err1 = db.lastError().databaseText();
        if (!res_upd) {
            delete query_upd;
            QMessageBox::warning(this, "Ошибка при попытке опустошить папку",
                                 "При опытке опустошить папку произошла ошибка!\n\n"
                                 + sql_upd + "\n\n"
                                 "Операция отменена");
            db.rollback();
            return;
        }
    } else {
        if (QMessageBox::question(this, "Нужно подтверждение",
                                  "Вы действительно хотите опустошить ОТКРЫТУЮ папку \n\n"
                                  "\"" + ui->combo_folder->currentText() + "\" ?\n\n"
                                  "Все записи из этой папки будут перенесены в основной массив.\n"
                                  "Это необратимая операция. Назад в папку записи могут быть перенесены только по одной, вручную.",
                                  QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Cancel) {
            // отмена операции
            return;
        }
        // опустошим папку
        QString sql_upd = "update persons "
                          "   set id_folder = NULL "
                          " where id_folder=" + QString::number(data_folder.id) + " ; ";
        QSqlQuery *query_upd = new QSqlQuery(db);
        bool res_upd = query_upd->exec(sql_upd);
        QString err1 = db.lastError().databaseText();
        if (!res_upd) {
            delete query_upd;
            QMessageBox::warning(this, "Ошибка при попытке опустошить папку",
                                 "При опытке опустошить папку произошла ошибка!\n\n"
                                 + sql_upd + "\n\n"
                                 "Операция отменена");
            db.rollback();
            return;
        }
    }
    db.commit();
}

void persons_wnd::on_bn_folder_del_clicked() {
    s_data_folder data_folder;
    data_folder.id = ui->combo_folder->currentData().toInt();

    if (data_folder.id<1) {
        QMessageBox::warning(this, "Выберите папку",
                              "Выберите папку, которую хотите опустошить.");
        return;
    }

    db.transaction();

    if (QMessageBox::question(this, "Нужно подтверждение",
                              "Вы действительно хотите удалить папку \n\n"
                              "\"" + ui->combo_folder->currentText() + "\" ?\n\n"
                              "Все записи из этой папки будут перенесены в основной массив, \nа сама папка - удалена.\n"
                              "Это необратимая операция.",
                              QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Cancel) {
        // отмена операции
        return;
    }
    // опустошим папку
    QString sql_upd = "update persons "
                      "   set id_folder = NULL "
                      " where id_folder=" + QString::number(data_folder.id) + " ; ";
    QSqlQuery *query_upd = new QSqlQuery(db);
    bool res_upd = query_upd->exec(sql_upd);
    QString err1 = db.lastError().databaseText();
    if (!res_upd) {
        delete query_upd;
        QMessageBox::warning(this, "Ошибка при попытке опустошить папку",
                             "При опытке опустошить папку произошла ошибка!\n\n"
                             + sql_upd + "\n\n"
                             "Операция отменена");
        db.rollback();
        return;
    }
    // удалим папку
    QString sql_del = "update folders "
                      "   set status=-1, "
                      "       date_del='" + QDate::currentDate().toString("yyyy-MM-dd") + "' "
                      " where id=" + QString::number(data_folder.id) + " ; ";
    QSqlQuery *query_del = new QSqlQuery(db);
    bool res_del = query_del->exec(sql_del);
    QString err2 = db.lastError().databaseText();
    if (!res_del) {
        delete query_del;
        QMessageBox::warning(this, "Ошибка при попытке удалить папку",
                             "При опытке удалить папку произошла ошибка!\n\n"
                             + sql_del + "\n\n"
                             "Операция отменена");
        db.rollback();
        return;
    }
    db.commit();

    refresh_folders();
    refresh_persons_tab();
}

void persons_wnd::on_act_medorgs_triggered() {
    s_data_assig data_assig;
    data_assig.code_mo = "";

    medorgs_wnd *w = new medorgs_wnd(db, data_app, settings, data_assig);
    w->setWindowState( w->windowState() | Qt::WindowFullScreen);
    w->exec();
}

void persons_wnd::on_ch_tab_limit_clicked(bool checked) {
    ui->spin_tab_limit->setEnabled(checked);
    // если фильтр есть - обновим таблицу
    if (checked)  refresh_persons_tab();
}

void persons_wnd::on_spin_tab_limit_editingFinished() {
    refresh_persons_tab();
}

void persons_wnd::on_act_import_names_triggered() {
    // надо в папке _DBF_ выбрать файл, полученный от ТФОМС
m_im:
    QString filename = QFileDialog::getOpenFileName(this, "Выберите в папке _DBF_ полученный от ТФОМС файл имён: IM.dbf",
                                                    data_app.path_dbf, "DBF-files (*.dbf)"/*, QFileDialog::ReadOnly*/);
    QFileInfo fi(filename);
    QString pack_name = fi.baseName().trimmed().toUpper();
    if (pack_name.isEmpty())
        return;

    // проверка правильности имени файла
    if (pack_name!="IM" && QMessageBox::question(this, "Требуется подтверждение",
                                                 "Имя выбранного DBF-файла не совпадает со стандартным именем файла имён: \"IM.dbf\"\n\nВы действительно хотите загрузить данные из этого файла в таблицу сопоставления имени и пола застрахованного?",
                                                 QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::No) {
        goto m_im;
    }
    // подключимся к ODBC
    db_ODBC = QSqlDatabase::addDatabase("QODBC", "INKO_DBF");
    db_ODBC.setConnectOptions();
    // имя источника данных
    db_ODBC.setDatabaseName("INKO_DBF");
    while (!db_ODBC.open()) {
        if (QMessageBox::warning(this, "Не найден ODBC-источник данных INKO_DBF",
                                 QString("Источник данных должен использовать папку, указанную в параметре программы \"path_dbf\":\n"
                                 "При попытке подключиться к источнику данных ODBC \"INKO_DBF\" операционная система вернула отказ. \n"
                                 "Этот источник данных необходим для генерации и чтения dbf-файлов обмена с ТФОМС. \n"
                                 "Если такого источника данных нет - создайте его.\n\n")
                                 + data_app.path_dbf + "\n\n"
                                 "Попробовать снова?", QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes)==QMessageBox::No) {
            return;
        }
    }

    // выберем все данные
    QString sql_tfoms = "select caption, w "
                        " from " + pack_name + " ; ";
    QSqlQuery *query_tfoms = new QSqlQuery(db_ODBC);
    bool res_tfoms = query_tfoms->exec(sql_tfoms);
    QString err = db_ODBC.lastError().databaseText();
    if (!res_tfoms) {
        delete query_tfoms;
        QMessageBox::warning(this, "Ошибка чтения данных ТФОМС",
                             "При попытке прочитать данные ТФОМС произошла ошибка!\n\n"
                             + sql_tfoms + "\n\n"
                             "Операция отменена");
        db_ODBC.close();
        QSqlDatabase::removeDatabase("INKO_DBF");
        return;
    }


    // подготовка таблицы для импорта данных
    QString sql_prep = "update spr_namepat_to_sex "
                       " set name=UPPER(TRIM(name)) ; ";
    // добавим сроку
    QSqlQuery *query_prep = new QSqlQuery(db);
    bool res_prep = query_prep->exec(sql_prep);
    err = db.lastError().databaseText();
    if (!res_prep) {
        delete query_prep;
        QMessageBox::warning(this, "Ошибка подготовки таблицы для импорта данных",
                             "При попытке подготовить таблицу для импорта данных произошла ошибка!\n\n"
                             + sql_prep + "\n\n"
                             "Операция отменена");
        db_ODBC.close();
        QSqlDatabase::removeDatabase("INKO_DBF");
        return;
    }
    delete query_prep;


    // зальём новые данные
    db.transaction();

    QSqlRecord rec = query_tfoms->record();
    while (query_tfoms->next()) {
        // поля
        QString sql_ins = "insert into spr_namepat_to_sex (name, sex, status) "
                          " values ('" + query_tfoms->value(0).toString().toUpper().trimmed() + "', " + QString::number(query_tfoms->value(1).toInt()) + ", 1) ; ";
        // добавим сроку
        QSqlQuery *query_ins = new QSqlQuery(db);
        bool res_ins = query_ins->exec(sql_ins);
        QString err = db.lastError().databaseText();
        if (!res_ins) {
            delete query_ins;
            QMessageBox::warning(this, "Ошибка добавления данных от ТФОМС",
                                 "При попытке добавить строку данных от ТФОМС произошла ошибка!\n\n"
                                 + sql_ins + "\n\n"
                                 "Операция отменена");
            db_ODBC.close();
            QSqlDatabase::removeDatabase("INKO_DBF");
            return;
        }
        delete query_ins;
    }
    delete query_tfoms;


    // доработка таблицы для импорта данных
    QString sql_post = "update spr_namepat_to_sex "
                       " set name=UPPER(TRIM(name)) ; ";
    // добавим сроку
    QSqlQuery *query_post = new QSqlQuery(db);
    bool res_post = query_post->exec(sql_post);
    err = db.lastError().databaseText();
    if (!res_post) {
        delete query_post;
        QMessageBox::warning(this, "Ошибка доработки таблицы для импорта данных",
                             "При попытке доработать таблицу для импорта данных произошла ошибка!\n\n"
                             + sql_post + "\n\n"
                             "Операция отменена");
        db_ODBC.close();
        QSqlDatabase::removeDatabase("INKO_DBF");
        return;
    }
    delete query_post;

    db.commit();
}

void persons_wnd::on_act_import_namepats_triggered() {
    // надо в папке _DBF_ выбрать файл, полученный от ТФОМС
m_OT:
    QString filename = QFileDialog::getOpenFileName(this, "Выберите в папке _DBF_ полученный от ТФОМС файл отчеств: OT.dbf",
                                                    data_app.path_dbf, "DBF-files (*.dbf)"/*, QFileDialog::ReadOnly*/);
    QFileInfo fi(filename);
    QString pack_name = fi.baseName().trimmed().toUpper();
    if (pack_name.isEmpty())
        return;

    // проверка правильности имени файла
    if (pack_name!="OT" && QMessageBox::question(this, "Требуется подтверждение",
                                                 "Имя выбранного DBF-файла не совпадает со стандартным именем файла отчеств: \"OT.dbf\"\n\nВы действительно хотите загрузить данные из этого файла в таблицу сопоставления имени и пола застрахованного?",
                                                 QMessageBox::Yes|QMessageBox::No, QMessageBox::No)==QMessageBox::No) {
        goto m_OT;
    }
    // подключимся к ODBC
    db_ODBC = QSqlDatabase::addDatabase("QODBC", "INKO_DBF");
    db_ODBC.setConnectOptions();
    // имя источника данных
    db_ODBC.setDatabaseName("INKO_DBF");
    while (!db_ODBC.open()) {
        if (QMessageBox::warning(this, "Не найден ODBC-источник данных INKO_DBF",
                                 QString("Источник данных должен использовать папку, указанную в параметре программы \"path_dbf\":\n"
                                 "При попытке подключиться к источнику данных ODBC \"INKO_DBF\" операционная система вернула отказ. \n"
                                 "Этот источник данных необходим для генерации и чтения dbf-файлов обмена с ТФОМС. \n"
                                 "Если такого источника данных нет - создайте его.\n\n")
                                 + data_app.path_dbf + "\n\n"
                                 "Попробовать снова?", QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes)==QMessageBox::No) {
            return;
        }
    }

    // выберем все данные
    QString sql_tfoms = "select caption, w "
                        " from " + pack_name + " ; ";
    QSqlQuery *query_tfoms = new QSqlQuery(db_ODBC);
    bool res_tfoms = query_tfoms->exec(sql_tfoms);
    QString err = db_ODBC.lastError().databaseText();
    if (!res_tfoms) {
        delete query_tfoms;
        QMessageBox::warning(this, "Ошибка чтения данных ТФОМС",
                             "При попытке прочитать данные ТФОМС произошла ошибка!\n\n"
                             + sql_tfoms + "\n\n"
                             "Операция отменена");
        db_ODBC.close();
        QSqlDatabase::removeDatabase("INKO_DBF");
        return;
    }


    // подготовка таблицы для импорта данных
    QString sql_prep = "update spr_namepat_to_sex "
                       " set name=UPPER(TRIM(name)) ; ";
    // добавим сроку
    QSqlQuery *query_prep = new QSqlQuery(db);
    bool res_prep = query_prep->exec(sql_prep);
    err = db.lastError().databaseText();
    if (!res_prep) {
        delete query_prep;
        QMessageBox::warning(this, "Ошибка подготовки таблицы для импорта данных",
                             "При попытке подготовить таблицу для импорта данных произошла ошибка!\n\n"
                             + sql_prep + "\n\n"
                             "Операция отменена");
        db_ODBC.close();
        QSqlDatabase::removeDatabase("INKO_DBF");
        return;
    }
    delete query_prep;


    // зальём новые данные
    db.transaction();

    QSqlRecord rec = query_tfoms->record();
    while (query_tfoms->next()) {
        // поля
        QString sql_ins = "insert into spr_namepat_to_sex (name, sex, status) "
                          " values ('" + query_tfoms->value(0).toString().toUpper().trimmed() + "', " + QString::number(query_tfoms->value(1).toInt()) + ", 1) ; ";
        // добавим сроку
        QSqlQuery *query_ins = new QSqlQuery(db);
        bool res_ins = query_ins->exec(sql_ins);
        QString err = db.lastError().databaseText();
        if (!res_ins) {
            delete query_ins;
            QMessageBox::warning(this, "Ошибка добавления данных от ТФОМС",
                                 "При попытке добавить строку данных от ТФОМС произошла ошибка!\n\n"
                                 + sql_ins + "\n\n"
                                 "Операция отменена");
            db_ODBC.close();
            QSqlDatabase::removeDatabase("INKO_DBF");
            return;
        }
        delete query_ins;
    }
    delete query_tfoms;


    // доработка таблицы для импорта данных
    QString sql_post = "update spr_namepat_to_sex "
                       " set name=UPPER(TRIM(name)) ; ";
    // добавим сроку
    QSqlQuery *query_post = new QSqlQuery(db);
    bool res_post = query_post->exec(sql_post);
    err = db.lastError().databaseText();
    if (!res_post) {
        delete query_post;
        QMessageBox::warning(this, "Ошибка доработки таблицы для импорта данных",
                             "При попытке доработать таблицу для импорта данных произошла ошибка!\n\n"
                             + sql_post + "\n\n"
                             "Операция отменена");
        db_ODBC.close();
        QSqlDatabase::removeDatabase("INKO_DBF");
        return;
    }
    delete query_post;

    db.commit();
}

void persons_wnd::on_bn_minimize_clicked() {
    this->setWindowState( this->windowState() | Qt::WindowMinimized);
}

void persons_wnd::on_act_persXdistrs_to_CSV_triggered() {
    // откроем окно "Выгрузка застрахованных по районам"
    delete export_pers_by_distrs_w;
    export_pers_by_distrs_w = new export_pers_by_distrs_wnd(db, data_app, settings, this);
    export_pers_by_distrs_w->exec();
}

void persons_wnd::on_group_person_data_clicked(bool checked) {
    /*ui->ch_person->setEnabled(checked);
    ui->pan_person->setEnabled(checked);
    ui->ch_person_old->setEnabled(checked);
    ui->pan_person_old->setEnabled(checked);
    ui->ch_rep->setEnabled(checked);
    ui->pan_rep->setEnabled(checked);
    ui->ch_country->setEnabled(checked);
    ui->pan_country->setEnabled(checked);
    ui->ch_address->setEnabled(checked);
    ui->pan_address->setEnabled(checked);
    ui->ch_phones->setEnabled(checked);
    ui->pan_phones->setEnabled(checked);*/

    if (checked) {
        /*
        if ( !data_app.is_head &&
             !data_app.is_tech &&
             data_pers.date_ins!= QDate::currentDate() ) {
            // недоступно в ПВП
            ui->group_person_data->setChecked(false);
            QApplication::processEvents();
            QMessageBox::warning(this, "Доступно только в головном офисе",
                                 "Редактирование данных застрахованных не в день его первого визита доступно только в головном офисе");
            return;
        }
        */

        QList<int> sizes;
        sizes.append(0);
        sizes.append(data_app.screen_w*0.6-50);
        sizes.append(data_app.screen_w*0.4-50);
        ui->split_main->setSizes(sizes);

        ui->group_person_docs->setChecked(false);
        on_group_person_docs_clicked(false);
        on_split_main_splitterMoved(0,1);
    }
}

void persons_wnd::on_group_person_docs_clicked(bool checked) {
    /*ui->label_13->setEnabled(checked);
    ui->spin_pers_pan_category->setEnabled(checked);
    ui->combo_pers_pan_category->setEnabled(checked);
    ui->ch_docs->setEnabled(checked);
    ui->pan_docs_tab->setEnabled(checked);
    ui->ch_photo->setEnabled(checked);
    ui->pan_docs_photo->setEnabled(checked);
    ui->ch_assig->setEnabled(checked);
    ui->pan_assig->setEnabled(checked);
    ui->bn_pers_assig_mo->setEnabled(checked);
    ui->bn_pers_assig_gaps->setEnabled(checked);*/

    // разрешено в ПВП
    /*if ( !data_app.is_head &&
         !data_app.is_tech &&
         data_pers.date_ins!= QDate::currentDate() ) {
        // недоступно в ПВП
        ui->group_person_docs->setChecked(false);
        QApplication::processEvents();
        QMessageBox::warning(this, "Доступно только в головном офисе",
                             "Правка дополнительных данных застрахованных не в день его первого визита доступно только в головном офисе");
        return;
    }*/

    if (checked) {
        if ( (data_app.is_locl || data_app.is_call) &&
              data_pers.date_ins!=QDate::currentDate() ) {
            // недоступно в ПВП
            ui->group_person_docs->setChecked(false);
            QApplication::processEvents();
            QMessageBox::warning(this, "Доступно только в головном офисе",
                                 "Редактирование данных застрахованных не в день его первого визита доступно только в головном офисе");
            return;
        }
        ui->ch_assig_mt_by_medsite->setEnabled(true);

        QList<int> sizes;
        sizes.append(0);
        sizes.append(data_app.screen_w*0.4-50);
        sizes.append(data_app.screen_w*0.6-50);
        ui->split_main->setSizes(sizes);

        ui->group_person_data->setChecked(false);
        on_group_person_data_clicked(false);
        on_split_main_splitterMoved(0,1);
    }
}

void persons_wnd::on_bn_msg_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    // отключим таймер сообщений
    this->msg_f = false;
    this->msg_a = false;
    ui->lab_msg->setText("");

    // откроем окошко мессенджера
    this->msg_w = new msg_wnd(db, data_app, settings, this);
    if (this->msg_w->exec()) {
    }
}

void persons_wnd::on_ch_pers_vs_clicked(bool checked) {
    if (!checked) {
        ui->ch_pers_vs_2->setEnabled(false);
        ui->ch_pers_vs_2->setChecked(false);
        ui->line_pers_vs_2->setEnabled(false);
        ui->line_pers_vs_2->setText("");
        ui->ch_pers_vs->setText("№ ВС");
    } else {
        ui->ch_pers_vs_2->setEnabled(true);
        ui->ch_pers_vs_2->setChecked(false);
        ui->line_pers_vs_2->setEnabled(false);
        ui->line_pers_vs_2->setText("");
    }
}

void persons_wnd::on_ch_pers_vs_2_clicked(bool checked) {
    if (checked) {
        ui->ch_pers_vs->setChecked(true);
        ui->ch_pers_vs->setText("№ ВС (от)");
        ui->line_pers_vs_2->setText(ui->line_pers_vs->text());
        if (ui->line_pers_vs->text().isEmpty())
            ui->line_pers_vs->setText("1");
        if (ui->line_pers_vs_2->text().isEmpty())
            ui->line_pers_vs_2->setText("1");
    } else {
        ui->ch_pers_vs->setText("№ ВС");
        ui->line_pers_vs_2->setText("");
        if (ui->line_pers_vs->text().isEmpty())
            ui->line_pers_vs->setText("1");
    }
    ui->line_pers_vs_2->setEnabled(checked);
}

void persons_wnd::on_act_terminals_triggered() {
    QString pss;
    do {
        pss = QInputDialog::getText(this,"Введите пароль администратора",
                                    "Для открытия окна терминалов нужно ввести пароль администратора настроек.\n"
                                    "Пустая строка - отмена открытия окна терминалов",
                                    QLineEdit::Password);
        if (pss.isEmpty())
            return;
    } while (pss!="650325");

    // откроем окно "Настройки программы"
    delete  terminals_w;
    terminals_w = new terminals_wnd(db, data_app, settings, this);
    terminals_w->exec();
}

void persons_wnd::on_split_main_splitterMoved(int pos, int index) {
    const QList<int> &sizes = ui->split_main->sizes();
    // pan_person_data
    QRect rect1 = ui->pan_person_data->geometry();
    if (sizes.at(1)>0) {
        rect1.setWidth(sizes.at(1)-40);
        ui->pan_person_data->setGeometry(rect1);
        ui->pan_person_data->setGeometry(rect1);
    }
    // pan_person_docs
    QRect rect2 = ui->pan_person_docs->geometry();
    if (sizes.at(2)) {
        rect2.setWidth(sizes.at(2)-40);
        ui->pan_person_docs->setGeometry(rect2);
        ui->pan_person_docs->setGeometry(rect2);
    }
}

// обработка таймера сообщений
void persons_wnd::qik_update() {
    quick_counter ++;
    if (quick_counter>1000000) quick_counter = 0;

    if (data_app.is_head || data_app.is_tech) {
        ui->lab_info_1->setVisible(f_info_1);
        ui->lab_info_2->setVisible(f_info_2);
        ui->lab_info_3->setVisible(f_info_3);

        ui->pan_info->setVisible(f_info_1 || f_info_2 || f_info_3);

        if (f_info_1) {
            int len_1 = ui->lab_info_1->width()/5.85;
            int n_sp_1 = (len_1 - s_info_1.length())<=0 ? len_1 : (len_1 - s_info_1.length());
            QString s_sp = " ";
            QString s_sp_1 = s_sp.repeated(n_sp_1);

            int n_pos_1 = quick_counter % n_sp_1;
            QString s_info = QString(s_sp_1 + s_info_1 + s_sp_1.left(n_pos_1)).right(len_1>s_info_1.length() ? len_1 : s_info_1.length());

            ui->lab_info_1->setText(s_info.left(len_1));
        }

        if (f_info_2) {
            int len_2 = ui->lab_info_2->width()/5.85;
            int n_sp_2 = (len_2 - s_info_2.length())<=0 ? len_2 : (len_2 - s_info_2.length());
            QString s_sp = " ";
            QString s_sp_2 = s_sp.repeated(n_sp_2);

            int n_pos_2 = quick_counter % n_sp_2;
            QString s_info = QString(s_sp_2 + s_info_2 + s_sp_2.left(n_pos_2)).right(len_2>s_info_2.length() ? len_2 : s_info_2.length());

            ui->lab_info_2->setText(s_info.left(len_2));
        }

        if (f_info_3) {
            int len_3 = ui->lab_info_3->width()/5.85;
            int n_sp_3 = (len_3 - s_info_3.length())<=0 ? len_3 : (len_3 - s_info_3.length());
            QString s_sp = " ";
            QString s_sp_3 = s_sp.repeated(n_sp_3);

            int n_pos_3 = quick_counter % n_sp_3;
            QString s_info = QString(s_sp_3 + s_info_3 + s_sp_3.left(n_pos_3)).right(len_3>s_info_3.length() ? len_3 : s_info_3.length());

            ui->lab_info_3->setText(s_info.left(len_3));
        }
    }
}

void persons_wnd::on_bn_pers_history_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите перону в таблице персон.");
        return;
    }

    // проверим выделенную строку персоны
    QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes_pers.size()>0) {
        QModelIndex index_pers = indexes_pers.front();
        // данные застрахованного
        int id_person = model_persons.data(model_persons.index(index_pers.row(), 0), Qt::EditRole).toInt();
        QString FIO = model_persons.data(model_persons.index(index_pers.row(), 3), Qt::EditRole).toString() + " " +
                      model_persons.data(model_persons.index(index_pers.row(), 4), Qt::EditRole).toString() + " " +
                      model_persons.data(model_persons.index(index_pers.row(), 5), Qt::EditRole).toString() + ", " +
                      model_persons.data(model_persons.index(index_pers.row(), 7), Qt::EditRole).toDate().toString("dd.MM.yyyy") + " ";

        QString sql = "select * "
                      " from persons_history "
                      " where id=" + QString::number(id_person) + " "
                      " order by id_hist ; ";

        delete show_tab_w;
        show_tab_w = new show_tab_wnd("История изменений данных персоны - " + FIO, sql, db, data_app, this, data_app.path_out, true);
        show_tab_w->exec();
    } else {
        QMessageBox::warning(this, "Ничего не выбрано", "Ничего не выбрано");
    }
}

void persons_wnd::on_bn_polis_history_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_polises || !ui->tab_polises->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите персону и полис.");
        return;
    }

    // проверим выделенную строку персоны
    QModelIndexList indexes_pol = ui->tab_polises->selectionModel()->selection().indexes();

    if (indexes_pol.size()>0) {
        QModelIndex index_pol = indexes_pol.front();
        int id_polis = model_polises.data(model_polises.index(index_pol.row(), 0), Qt::EditRole).toInt();
        QString sernom = "ЕНП:"          + model_polises.data(model_polises.index(index_pol.row(), 4), Qt::EditRole).toString() + ", "
                         " ВС:"          + model_polises.data(model_polises.index(index_pol.row(), 9), Qt::EditRole).toString() + ", "
                         " серия/номер:" + model_polises.data(model_polises.index(index_pol.row(),10), Qt::EditRole).toString() +
                         " №"            + model_polises.data(model_polises.index(index_pol.row(),11), Qt::EditRole).toString() + ", "
                         " УЭК:"         + model_polises.data(model_polises.index(index_pol.row(),12), Qt::EditRole).toString() + " ";

        QString sql = "select * "
                      " from polises_history "
                      " where id=" + QString::number(id_polis) + " "
                      " order by id_hist ; ";

        delete show_tab_w;
        show_tab_w = new show_tab_wnd("История изменений данных полиса - " + sernom, sql, db, data_app, this, data_app.path_out, true);
        show_tab_w->exec();
    } else {
        QMessageBox::warning(this, "Ничего не выбрано", "Ничего не выбрано");
    }
}

void persons_wnd::refresh_pers_points() {
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающего списка медорганизаций
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select point_regnum, '('||point_regnum||')  '||point_name as name "
                  "  from public.points "
                  " where status=1 and point_regnum<>'000' "
                  " order by point_regnum ; ";
    mySQL.exec(this, sql, QString("Список ПВП"), *query, true, db, data_app);
    ui->combo_pers_point->clear();
    //ui->combo_pers_point->addItem(" - все ПВП - ", "нет");
    while (query->next()) {
        ui->combo_pers_point->addItem(query->value(1).toString(), query->value(0).toString());
    }
    ui->combo_pers_point->setCurrentIndex(0);
    delete query;
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_ch_pers_point_clicked(bool checked) {
    if (checked)
        refresh_pers_points();
    ui->combo_pers_point->setVisible(checked);
    refresh_pers_operators();
    refresh_persons_tab();
}

void persons_wnd::on_ch_pers_category_clicked(bool checked) {
    ui->combo_pers_category->setVisible(checked);
    refresh_persons_tab();
}

void persons_wnd::on_ch_pers_status_f_clicked(bool checked) {
    ui->combo_pers_status_f->setVisible(checked);
    ui->ch_pers_tfoms_ok->setVisible(checked);
    ui->ch_pers_tfoms_ok->setChecked(false);
    ui->ch_pers_tfoms_no->setVisible(checked);
    ui->ch_pers_tfoms_no->setChecked(false);
    refresh_persons_tab();
}

void persons_wnd::on_combo_pers_point_activated(int index) {
    refresh_pers_operators();
    refresh_persons_tab();
}

void persons_wnd::refresh_pers_operators() {
    this->setCursor(Qt::WaitCursor);
    // обновление выпадающего списка медорганизаций
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select o.id, o.oper_fio "
                  "  from operators o "
                  "       left join points p on(o.id_point=p.id) "
                  " where o.status=1 ";
    if (ui->ch_pers_point->isChecked())
        sql +=    "   and p.status=1 and p.point_regnum='" + ui->combo_pers_point->currentData().toString() + "' ";
    sql +=        " order by o.oper_fio ; ";
    mySQL.exec(this, sql, QString("Список инспекторов"), *query, true, db, data_app);
    ui->combo_pers_operator->clear();
    //ui->combo_pers_operator->addItem(" - все операторы - ", -1);
    while (query->next()) {
        ui->combo_pers_operator->addItem(query->value(1).toString(), query->value(0).toInt());
    }
    ui->combo_pers_operator->setCurrentIndex(0);
    delete query;
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_ch_pers_operator_clicked(bool checked) {
    if (checked)
        refresh_pers_operators();
    ui->combo_pers_operator->setVisible(checked);
    refresh_persons_tab();
}

void persons_wnd::on_combo_pers_operator_activated(int index) {
    refresh_persons_tab();
}

void persons_wnd::on_bn_act_history_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_events || !ui->tab_events->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите персону, полис и событие.");
        return;
    }

    // проверим выделенную строку персоны
    QModelIndexList indexes_act = ui->tab_events->selectionModel()->selection().indexes();

    if (indexes_act.size()>0) {
        QModelIndex index_act = indexes_act.front();
        int id_event = model_events.data(model_events.index(index_act.row(), 8), Qt::EditRole).toInt();
        QString act_s = "код события:  " + model_events.data(model_events.index(index_act.row(), 10), Qt::EditRole).toString() + " ";

        QString sql = "select * "
                      " from events_history "
                      " where id=" + QString::number(id_event) + " "
                      " order by id_hist ; ";

        delete show_tab_w;
        show_tab_w = new show_tab_wnd("История изменений данных события - " + act_s.toUpper(), sql, db, data_app, this, data_app.path_out, true);
        show_tab_w->exec();
    } else {
        QMessageBox::warning(this, "Ничего не выбрано", "Ничего не выбрано");
    }
}

void persons_wnd::on_bn_pers_talks_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_polises || !ui->tab_polises->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите персону и полис.");
        return;
    }

    // проверим выделенную строку персоны
    QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes_pers.size()>0) {
        s_data_talk data_talks;
        QModelIndex index_pers = indexes_pers.front();
        data_talks.id = -1;
        data_talks.pol_v = 0;
        data_talks.comment = "";
        data_talks.result = 0;
        data_talks._id_person = model_persons.data(model_persons.index(index_pers.row(), 0), Qt::EditRole).toInt();
        data_talks._id_polis = -1;
        data_talks._id_blank_pol = -1;
        data_talks.fio = model_persons.data(model_persons.index(index_pers.row(), 3), Qt::EditRole).toString() + " " +
                         model_persons.data(model_persons.index(index_pers.row(), 4), Qt::EditRole).toString() + " " +
                         model_persons.data(model_persons.index(index_pers.row(), 5), Qt::EditRole).toString() + ", " +
                         model_persons.data(model_persons.index(index_pers.row(), 7), Qt::EditRole).toDate().toString("dd.MM.yyyy");

        delete talks_w;
        talks_w = new talks_wnd(db, data_talks, data_app, this);
        talks_w->exec();

        refresh_persons_tab();
    } else {
        QMessageBox::warning(this, "Ничего не выбрано", "Выберите персону из таблицы персон");
    }
}

void persons_wnd::on_bn_pers_talk_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_polises || !ui->tab_polises->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите персону.");
        return;
    }

    // проверим выделенную строку персоны
    QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes_pers.size()>0) {
        s_data_talk data_talk;
        QModelIndex index_pers = indexes_pers.front();
        data_talk.id = -1;
        data_talk.pol_v = 0;
        data_talk.result = -999;
        data_talk.type_talk = 2;
        data_talk.date_talk = QDate::currentDate();
        data_talk._id_person = model_persons.data(model_persons.index(index_pers.row(), 0), Qt::EditRole).toInt();
        data_talk._id_polis = -1;
        data_talk._id_blank_pol = -1;
        data_talk.fio = model_persons.data(model_persons.index(index_pers.row(), 3), Qt::EditRole).toString() + " " +
                        model_persons.data(model_persons.index(index_pers.row(), 4), Qt::EditRole).toString() + " " +
                        model_persons.data(model_persons.index(index_pers.row(), 5), Qt::EditRole).toString() + ", " +
                        model_persons.data(model_persons.index(index_pers.row(), 7), Qt::EditRole).toDate().toString("dd.MM.yyyy");

        delete add_talk_w;
        add_talk_w = new add_talk_wnd(db, &data_talk, data_app, this);
        add_talk_w->exec();

        refresh_persons_tab();
    } else {
        QMessageBox::warning(this, "Ничего не выбрано", "Выберите персону из таблицы персон");
    }
}

void persons_wnd::on_act_packs_triggered() {
    s_data_pack data_pack;
    data_pack.id = -1;
    data_pack.pack_name = "";
    packs_wnd *w = new packs_wnd(db, data_app, data_pack);
    if (w->exec()) {
        //refresh_pers_pan_pack();
        //ui->combo_pers_pan_pack->setCurrentIndex(ui->combo_pers_pan_pack->findData(data_pack.id));
    }
}

void persons_wnd::on_act_statistic_triggered() {
    s_data_statistic data_statistic;
    data_statistic.id = -1;
    data_statistic.name = "";
    statistic_acts_wnd *w = new statistic_acts_wnd(db, data_app, data_statistic);
    if (w->exec()) {
        //refresh_pers_pan_pack();
        //ui->combo_pers_pan_pack->setCurrentIndex(ui->combo_pers_pan_pack->findData(data_pack.id));
    }
}

void persons_wnd::on_bn_show_tfoms_files_clicked() {
    if (tfomsFiles_w==NULL) {
        tfomsFiles_w = new tfomsFiles_wnd(db, data_app, settings, this, this);
    }
    tfomsFiles_w->show();
}

void persons_wnd::on_group_person_docs_toggled(bool arg1) {
    if (arg1 && data_pers.id<0) {
        QMessageBox::warning(this,"Запись персоны ещё не создана",
                             "Сначала создайте запись персоны, нажав кнопку [Сохранить] \nв нижней части панели \n"
                             "\"Ввод и редактирование перс. данных застрахованного\"");
        ui->group_person_docs->setChecked(false);
        on_group_person_docs_clicked(false);
        ui->show_pers_docs->setChecked(false);
        on_show_pers_docs_clicked(false);
    }
}

void persons_wnd::on_bn_to_TFOMS_all_clicked() {
    if (QMessageBox::question(this,"Нужно подтверждение",
                              "Вы действительно хотите проверить в БелТФОМС данные " + ui->lab_tab_cnt->text() + " застрахованных, согласно действующим настройкам фильтрации теблицы персон?",
                              QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Cancel) {
        QMessageBox::information(this,"Операция отменена","Ничего не изменилось.");
        return;
    }


    // подключимся к ODBC
    db_ODBC = QSqlDatabase::addDatabase("QODBC", "INKO_DBF");
    db_ODBC.setConnectOptions();
    // имя источника данных
    db_ODBC.setDatabaseName("INKO_DBF");
    while (!db_ODBC.open()) {
        if (QMessageBox::warning(this, "Не найден ODBC-источник данных INKO_DBF",
                                 QString("Источник данных должен использовать папку, указанную в параметре программы \"path_dbf\":\n"
                                 "При попытке подключиться к испточнику данных ODBC \"INKO_DBF\" операционная система вернула отказ. \n"
                                 "Этот источник данных необходим для генерации и чтения dbf-файлов обмена с ТФОМС. \n"
                                 "Если такого источника данных нет - создайте его.\n\n")
                                 + data_app.path_dbf + "\n\n"
                                 "Попробовать снова?", QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes)==QMessageBox::No) {
            return;
        }
    }

    // проверим наличие DBF-файла
    if (!QFile::exists(data_app.path_dbf + "q2fond.dbf"))
        QFile::copy(data_app.path_dbf + "q2fond_src.dbf", data_app.path_dbf + "q2fond.dbf");

    QString sql_cnt = "select count(*) "
                      " from q2fond ";

    QSqlQuery *query_cnt = new QSqlQuery(db_ODBC);
    query_cnt->exec(sql_cnt);
    query_cnt->next();
    int cnt = query_cnt->value(0).toInt();
    delete query_cnt;
    if (cnt>0) {
        if (QMessageBox::question(this,"Нужно подтверждение",
                                  "В запрос данных застрахованных для БелТФОМС уже внесено " + QString::number(cnt) + " строк данных.\n"
                                  "Предварительно очистить запрос от старых данных?",
                                  QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
            // очистим шаблон запроса
            db_ODBC.close();
            QSqlDatabase::removeDatabase("INKO_DBF");

            QFile::remove(data_app.path_dbf + "q2fond.dbf");
            QFile::copy(data_app.path_dbf + "q2fond_src.dbf", data_app.path_dbf + "q2fond.dbf");

            // подключимся к ODBC
            db_ODBC = QSqlDatabase::addDatabase("QODBC", "INKO_DBF");
            db_ODBC.setConnectOptions();
            // имя источника данных
            db_ODBC.setDatabaseName("INKO_DBF");
            while (!db_ODBC.open()) {
                if (QMessageBox::warning(this, "Не найден ODBC-источник данных INKO_DBF",
                                         QString("Источник данных должен использовать папку, указанную в параметре программы \"path_dbf\":\n"
                                         "При попытке подключиться к испточнику данных ODBC \"INKO_DBF\" операционная система вернула отказ. \n"
                                         "Этот источник данных необходим для генерации и чтения dbf-файлов обмена с ТФОМС. \n"
                                         "Если такого источника данных нет - создайте его.\n\n")
                                         + data_app.path_dbf + "\n\n"
                                         "Попробовать снова?", QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes)==QMessageBox::No) {
                    return;
                }
            }

            QString sql_del = "delete from q2fond ";

            QSqlQuery *query_del = new QSqlQuery(db_ODBC);
            query_del->exec(sql_del);
            query_del->next();
            delete query_del;
        }
    }

    // переберём строки таблицы персон
    QSqlQuery *query_send = new QSqlQuery(db);
    query_send->exec(sql_pers_lim);

    while (query_send->next()) {
        // проверим УДЛ
        int id_UDL = -1, UDL_type = 0;
        QString UDL_ser = "", UDL_num = "";
        bool has_UDL = false;
        QString sql_UDL = "select id, doc_type, doc_ser, doc_num "
                          "  from persons_docs "
                          " where id=" + QString::number(query_send->value(63).toInt()) + " ";
        QSqlQuery *query_UDL = new QSqlQuery(db);
        query_UDL->exec(sql_UDL);
        if (query_UDL->next()) {
            has_UDL  = true;
            id_UDL   = query_UDL->value(0).toInt();
            UDL_type = query_UDL->value(1).toInt();
            UDL_ser  = query_UDL->value(2).toString();
            UDL_num  = query_UDL->value(3).toString();
        }

        // добавим строку с данными запрашиваемого застрахованного
        QString sql_add = "insert into q2fond(fam, im, ot, w, dr, ss, doctype, docser, docnum, tpol, spolic, npolic, din, dout, qogrn, suo, ogrnsmo) "
                          " values (" +
                            ( !query_send->value(3).isNull() ? QString("'"+ query_send->value(3).toString().trimmed().simplified() +"'") : "NULL" ) + ", " +
                            ( !query_send->value(4).isNull() ? QString("'"+ query_send->value(4).toString().trimmed().simplified() +"'") : "NULL" ) + ", " +
                            ( !query_send->value(5).isNull() ? QString("'"+ query_send->value(5).toString().trimmed().simplified() +"'") : "NULL" ) + ", " +
                            ( !query_send->value(6).isNull() ? QString::number(query_send->value(6).toInt()) : "NULL" ) + ", " +
                            ( !query_send->value(7).isNull() ? QString("'"+ query_send->value(7).toDate().toString("yyyy-MM-dd") +"'") : "NULL" ) + ", " +
                            ( !query_send->value(9).isNull() ? QString("'"+ query_send->value(9).toString().trimmed().simplified() +"'") : "NULL" ) + ", " +
                            ( has_UDL ? QString::number(UDL_type) : "NULL" ) + ", " +
                            ( has_UDL ? QString("'"+ UDL_ser.trimmed().simplified() +"'") : "NULL" ) + ", " +
                            ( has_UDL ? QString("'"+ UDL_num.trimmed().simplified() +"'") : "NULL" ) + ", " +
                            "NULL, " +
                            "NULL, " +
                            "NULL, " +
                            "NULL, " +
                            "NULL, " +
                            data_app.smo_ogrn + ", " +
                            "NULL, " +
                            "NULL ) ";

        QSqlQuery *query_add = new QSqlQuery(db_ODBC);
        bool res_add = query_add->exec(sql_add);
        QString err = db_ODBC.lastError().databaseText();
        if (!res_add) {
            delete query_add;
            QMessageBox::warning(this, "Ошибка добавления строки",
                                 "При попытке добавить строку с данными запрашиваемого застрахованного произошла ошибка!\n\n"
                                 "Операция отменена");
            return;
        }
        delete query_add;
    }

    db_ODBC.close();
    // закроем подключение к ODBC
    QSqlDatabase::removeDatabase("INKO_DBF");
    // подключимся к ODBC
    db_ODBC = QSqlDatabase::addDatabase("QODBC", "INKO_DBF");
    db_ODBC.setConnectOptions();
    // имя источника данных
    db_ODBC.setDatabaseName("INKO_DBF");
    while (!db_ODBC.open()) {
        if (QMessageBox::warning(this, "Не найден ODBC-источник данных INKO_DBF",
                                 QString("Источник данных должен использовать папку, указанную в параметре программы \"path_dbf\":\n"
                                 "При попытке подключиться к испточнику данных ODBC \"INKO_DBF\" операционная система вернула отказ. \n"
                                 "Этот источник данных необходим для генерации и чтения dbf-файлов обмена с ТФОМС. \n"
                                 "Если такого источника данных нет - создайте его.\n\n")
                                 + data_app.path_dbf + "\n\n"
                                 "Попробовать снова?", QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes)==QMessageBox::No) {
            return;
        }
    }

    sql_cnt = "select count(*) "
              " from q2fond ";
    query_cnt = new QSqlQuery(db_ODBC);
    query_cnt->exec(sql_cnt);
    query_cnt->next();
    cnt = query_cnt->value(0).toInt();
    delete query_cnt;
    QMessageBox::information(this,"Готово!",
                             "Теперь в запрос на идентификацию новых застрахованных внесено " + QString::number(cnt) + " строк данных.\n");


    ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(data_app.path_dbf.utf16()), 0, 0, SW_NORMAL);
}

void persons_wnd::on_act_import_fias_triggered() {
    // подключимся к ODBC
    db_ODBC = QSqlDatabase::addDatabase("QODBC", "INKO_DBF");
    db_ODBC.setConnectOptions();
    // имя источника данных
    db_ODBC.setDatabaseName("INKO_DBF");
    while (!db_ODBC.open()) {
        if (QMessageBox::warning(this, "Не найден ODBC-источник данных INKO_DBF",
                                 QString("Источник данных должен использовать папку, указанную в параметре программы \"path_dbf\":\n"
                                 "При попытке подключиться к испточнику данных ODBC \"INKO_DBF\" операционная система вернула отказ. \n"
                                 "Этот источник данных необходим для генерации и чтения dbf-файлов обмена с ТФОМС. \n"
                                 "Если такого источника данных нет - создайте его.\n\n")
                                 + data_app.path_dbf + "\n\n"
                                 "Попробовать снова?", QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes)==QMessageBox::No) {
            return;
        }
    }

    // импорт ФИАС в формате DBF
    if (fiasFiles_w==NULL) {
        fiasFiles_w = new fiasFiles_wnd(db, db_ODBC, data_app, settings, this, this);
    }
    if (!fiasFiles_w->exec())
        return;
}

void persons_wnd::on_line_pers_snils_textEdited(const QString &arg1) {
    QString txt0 = arg1.trimmed(), txt = "";
    for (int i=0; i<txt0.size(); ++i) {
        if (txt.length()>=11)
            break;
        QString c = txt0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            txt += c;
        }
    }
    ui->line_pers_snils->setText(txt);
    ui->line_pers_snils->setCursorPosition(txt.length());
}
void persons_wnd::on_line_pers_assig_snils_mt_textEdited(const QString &arg1) {
    QString txt0 = arg1.trimmed(), txt = "";
    for (int i=0; i<txt0.size(); ++i) {
        if (txt.length()>=11)
            break;
        QString c = txt0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            txt += c;
        }
    }
    ui->line_pers_assig_snils_mt->setText(txt);
    ui->line_pers_assig_snils_mt->setCursorPosition(txt.length());
}

void persons_wnd::on_line_pers_vs_textEdited(const QString &arg1) {
    QString txt0 = arg1.trimmed(), txt = "";
    for (int i=0; i<txt0.size(); ++i) {
        if (txt.length()>=14)
            break;
        QString c = txt0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            txt += c;
        }
    }
    ui->line_pers_vs->setText(txt);
    ui->line_pers_vs->setCursorPosition(txt.length());
}

void persons_wnd::on_line_pers_vs_2_textEdited(const QString &arg1) {
    QString txt0 = arg1.trimmed(), txt = "";
    for (int i=0; i<txt0.size(); ++i) {
        if (txt.length()>=14)
            break;
        QString c = txt0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            txt += c;
        }
    }
    ui->line_pers_vs_2->setText(txt);
    ui->line_pers_vs_2->setCursorPosition(txt.length());
}

void persons_wnd::on_line_pers_enp_textEdited(const QString &arg1) {
    QString txt0 = arg1.trimmed(), txt = "";
    for (int i=0; i<txt0.size(); ++i) {
        if (txt.length()>=16)
            break;
        QString c = txt0.mid(i, 1);
        if ( c=="0" || c=="1" || c=="2" || c=="3" || c=="4" || c=="5" || c=="6" || c=="7" || c=="8" || c=="9" ) {
            txt += c;
        }
    }
    ui->line_pers_enp->setText(txt);
    ui->line_pers_enp->setCursorPosition(txt.length());
}

void persons_wnd::on_tab_events_clicked(const QModelIndex &index) {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_events || !ui->tab_events->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите полис, события которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
        return;
    }
    ui->ch_pers_act_resent_date->setChecked(false);

    // проверим выделенную строку полиса
    QModelIndexList indexes_pol = ui->tab_polises->selectionModel()->selection().indexes();

    if (indexes_pol.size()>0) {
        QModelIndex index_pol = indexes_pol.front();

        // данные застрахованного
        int id_polis = model_polises.data(model_polises.index(index_pol.row(), 0), Qt::EditRole).toInt();

        // проверим выделенную строку
        QModelIndexList indexes = ui->tab_events->selectionModel()->selection().indexes();

        if (indexes.size()>0) {
            QModelIndex index = indexes.front();

            // данные события
            int       event_id = model_events.data(model_events.index(index.row(), 8), Qt::EditRole).toInt();
            QDateTime event_dt = model_events.data(model_events.index(index.row(), 9), Qt::EditRole).toDateTime();
            QString event_code = model_events.data(model_events.index(index.row(),10), Qt::EditRole).toString();

            if ( event_code=="П010" ||
                 event_code=="П034" ||
                 event_code=="П035" ||
                 event_code=="П036" ||
                 event_code=="П061" ||
                 event_code=="П062" ||
                 event_code=="П063" ||
                 event_code=="П031" ||
                 event_code=="П032" ||
                 event_code=="П033" ||
                 event_code=="П060" ) {
                ui->ch_pers_act_resent_date->setChecked(event_dt.date().daysTo(QDate::currentDate())>1);
            }
        }
    }
}

void persons_wnd::on_bn_pers_status_auto_clicked() {
    this->setCursor(Qt::WaitCursor);
    // принудительное обновление статуса застрахованного
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select * from update_pers_links(" + QString::number(data_pers.id) + ", NULL) ;";

    if (!(mySQL.exec(this, sql, QString("Обновим статус застрахованного"), *query, true, db, data_app))) {
        QMessageBox::warning(this, "Ошибка при обновлении статауса застрахованного",
                             "При обновлении статуса застрахованного произошла неожиданная ошибка.\n" + sql + "\n\nОперация отменена.");
    } else {
        refresh_persons_tab();
    }
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_act_failed_enp_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    // проверим выделенную строку персоны
    QString sql = "select e.fam, e.im, e.ot, e.date_birth, st.text as status, "
                  "       case p.pol_v when 1 then 'старый полис' when 2 then 'ВС' when 3 then 'полис единого образца' else '???' end as pol_v, "
                  "       p.vs_num, p.enp, p.date_begin, p.date_end, p.date_stop/*, p.date_tfoms, p.date_activate, p.date_get2hand*/ "
                  "  from persons e "
                  "       left join spr_pers_status st on(st.code=e.status) "
                  "       left join polises p on(p.id=e.id_polis and p.pol_v=2) "
                  " where p.date_end<CURRENT_DATE "
                  "   and st_person(e.id, CURRENT_DATE)>-100 "
                  //"   and e.status>=0 "
                  " order by p.date_end, e.fam, e.im, e.ot, e.date_birth ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("ВС, на которые не пришли ЕНП", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_expired_vs_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    // проверим выделенную строку персоны
    QString sql = "select e.fam, e.im, e.ot, e.date_birth, st.text as status, "
                  "       case vs.pol_v when 1 then 'старый полис' when 2 then 'ВС' when 3 then 'полис единого образца' else '???' end as vs_v, "
                  "       vs.vs_num, /*vs.date_begin as vs_date_begin, vs.date_end as vs_date_end,*/ vs.date_stop as vs_date_stop, "
                  "       case enp.pol_v when 1 then 'старый полис' when 2 then 'ВС' when 3 then 'полис единого образца' else '???' end as enp_v, "
                  "       enp.enp, b_enp.date_add as enp_date_get, enp.date_activate as enp_date_activation /*, enp.date_end as enp_date_end, enp.date_stop as enp_date_stop, */ "
                  "       /*(enp.date_begin - vs.date_stop +1) as INTERVAL*/ "
                  "  from persons e "
                  "       left join spr_pers_status st on(st.code=e.status) "
                  "       join polises enp on(enp.id=e.id_polis and enp.pol_v=3) "
                  "       join polises vs on(vs.id=enp.id_old_polis and vs.pol_v=2) "
                  "       join blanks_pol b_enp on(b_enp.id_polis=enp.id) "
                  " where b_enp.date_add>=vs.date_stop "
                  "   and st_person(e.id, CURRENT_DATE)>-100 ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("ВС, на которые ЕНП пришли с задержкой", sql, db, data_app, this);
    show_tab_w->exec();
}



void persons_wnd::on_combo_pers_status_f_currentIndexChanged(int index) {
    /*if (ui->ch_tab_limit->isChecked())
        refresh_persons_tab();*/
}
void persons_wnd::on_combo_pers_status_f_activated(int index) {
    refresh_persons_tab();
}

void persons_wnd::on_combo_pers_category_currentIndexChanged(int index) {
    /*if (ui->ch_tab_limit->isChecked())
        refresh_persons_tab();*/
}
void persons_wnd::on_combo_pers_category_activated(int index) {
    refresh_persons_tab();
}

void persons_wnd::on_ch_pers_dopdata_clicked(bool checked) {
    ui->te_pers_dopdata->setVisible(checked);
    ui->te_pers_dopdata->clear();
    if (checked) {
        refresh_pers_dopdata();
    }
}

void persons_wnd::on_bn_pers_unite_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите полис, события которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
        return;
    }

    // проверим выделенную строку персоны
    QModelIndexList indexes_pers = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes_pers.size()>0) {
        QModelIndex index_pers = indexes_pers.front();
        // данные застрахованного
        s_data_pers_unite data_pers_unite;
        data_pers_unite.id_person1 = model_persons.data(model_persons.index(index_pers.row(), 0), Qt::EditRole).toInt();
        data_pers_unite.id_person2 = -1;
        data_pers_unite.fam = model_persons.data(model_persons.index(index_pers.row(), 3), Qt::EditRole).toString();
        data_pers_unite.im  = model_persons.data(model_persons.index(index_pers.row(), 4), Qt::EditRole).toString();
        data_pers_unite.ot  = model_persons.data(model_persons.index(index_pers.row(), 5), Qt::EditRole).toString();
        data_pers_unite.f_assigs = false;
        data_pers_unite.f_photo = false;
        data_pers_unite.f_documents = true;
        data_pers_unite.f_vizits = true;
        data_pers_unite.f_polises = true;
        data_pers_unite.person1_fio  = model_persons.data(model_persons.index(index_pers.row(), 3), Qt::EditRole).toString() + " " +
                                       model_persons.data(model_persons.index(index_pers.row(), 4), Qt::EditRole).toString() + " " +
                                       model_persons.data(model_persons.index(index_pers.row(), 5), Qt::EditRole).toString() + ", " +
                                       model_persons.data(model_persons.index(index_pers.row(), 7), Qt::EditRole).toDate().toString("dd.MM.yyyy") + " "
                                       " (ID=" + QString::number(model_persons.data(model_persons.index(index_pers.row(), 0), Qt::EditRole).toInt()) + ")";

        QString str = QInputDialog::getText(this,"Введите пароль",
                                            QString("Вы действительно хотите все данные страхования персоны перенести \n"
                                            "на запись другой персоны?\n\n"
                                            "Для поглащения выбранной персоны другой записью введите пароль\n") +
                                            (data_app.is_head||data_app.is_tech ? "ПОГЛОТИТЬ" : "***")).toUpper();
        if (str.isEmpty()) {
            return;
        } else if (str!="ПОГЛОТИТЬ" && str!="GJUKJNBNM") {
            QMessageBox::warning(this,"Отказ","Неправильный пароль");
            return;
        }

        delete unite_persons_w;
        unite_persons_w = new unite_persons_wnd(db, data_pers_unite, data_app, settings, this);
        unite_persons_w->exec();

        if (data_pers_unite.id_person2<0) {
            QMessageBox::warning(this, "Операция отменена",
                                 "Целевая персона для переноса данных не выбрана.\n"
                                 "Операция отменена.");
            return;
        }

        db.transaction();

        try {

            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            // проверка зависимых таблиц
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            // -------------------
            // PERSONS_PHOTO
            // -------------------
            if (data_pers_unite.f_photo) {
                QString sql_unite_photo = "update persons_photo "
                                          "   set id_person =" + QString::number(data_pers_unite.id_person2) + " "
                                          " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; ";
                QSqlQuery *query_unite_photo = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_unite_photo, "Перенос фотографий персоны", *query_unite_photo, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this, "Ошибка БД",
                                          "При переносе фотографий/подписей персоны произошла ошибка.\n\n"
                                          "Операция отменена.");
                    return;
                }
            } else {
                QString sql_del_photo = "delete from persons_photo "
                                          " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; ";
                QSqlQuery *query_del_photo = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_del_photo, "Удаление фотографий персоны", *query_del_photo, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this, "Ошибка БД",
                                          "При удалении фотографий/подписей персоны произошла ошибка.\n\n"
                                          "Операция отменена.");
                    return;
                }
            }

            // -------------------
            // PERSONS_DOCS
            // -------------------
            if (data_pers_unite.f_documents) {
                QString sql_unite_docs = "update persons_docs "
                                         "   set id_person =" + QString::number(data_pers_unite.id_person2) + ", "
                                         "       status=0 "
                                         " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; ";
                QSqlQuery *query_unite_docs = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_unite_docs, "Перенос документов персоны", *query_unite_docs, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this, "Ошибка БД",
                                          "При переносе документов персоны произошла ошибка.\n\n"
                                          "Операция отменена.");
                    return;
                }
            } else {
                QString sql_del_docs = "delete from persons_docs "
                                       " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; ";
                QSqlQuery *query_del_docs = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_del_docs, "Удаление документов персоны", *query_del_docs, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this, "Ошибка БД",
                                          "При удалении документов персоны произошла ошибка.\n\n"
                                          "Операция отменена.");
                    return;
                }
            }

            // -------------------
            // vizits
            // -------------------
            if (data_pers_unite.f_vizits) {
                QString sql_unite_vizits = "update vizits "
                                           "   set id_person =" + QString::number(data_pers_unite.id_person2) + " "
                                           " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; ";
                QSqlQuery *query_unite_vizits = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_unite_vizits, "Перенос визитов персоны", *query_unite_vizits, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this, "Ошибка БД",
                                          "При переносе визитов персоны произошла ошибка.\n\n"
                                          "Операция отменена.");
                    return;
                }
            } else {
                QString sql_del_vizits = "delete from vizits "
                                          " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; ";
                QSqlQuery *query_del_vizits = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_del_vizits, "Удаление визитов персоны", *query_del_vizits, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this, "Ошибка БД",
                                          "При удалении визитов персоны произошла ошибка.\n\n"
                                          "Операция отменена.");
                    return;
                }
            }

            // -------------------
            // PERSONS_OLD
            // -------------------
            QString sql_del_old = "delete from persons_old where id_person =" + QString::number(data_pers_unite.id_person1) + " ; ";
            QSqlQuery *query_del_old = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_del_old, "Удаление старых записей персоны", *query_del_old, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При удалении старых записей персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }

            // -------------------
            // PERSONS_ASSIG
            // -------------------
            if (data_pers_unite.f_assigs) {
                QString sql_unite_assig = "update persons_assig "
                                          "   set id_person=" + QString::number(data_pers_unite.id_person2) + " "
                                          "       is_actual=is_actual +1 "
                                          " where id_person=" + QString::number(data_pers_unite.id_person1) + " ; ";
                QSqlQuery *query_unite_assig = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_unite_assig, "Перенос прикреплений персоны", *query_unite_assig, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this, "Ошибка БД",
                                          "При переносе прикреплений персоны произошла ошибка.\n\n"
                                          "Операция отменена.");
                    return;
                }
            } else {
                QString sql_del_assig = "delete from persons_assig "
                                          " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; ";
                QSqlQuery *query_del_assig = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_del_assig, "Удаление прикреплений персоны", *query_del_assig, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this, "Ошибка БД",
                                          "При удалении прикреплений персоны произошла ошибка.\n\n"
                                          "Операция отменена.");
                    return;
                }
            }

            // -------------------
            // POLISES
            // -------------------
            if (data_pers_unite.f_polises) {
                QString sql_unite_polises = "update blanks_pol "
                                            "   set id_person =" + QString::number(data_pers_unite.id_person2) + " "
                                            " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; "

                                            "update blanks_vs "
                                            "   set id_person =" + QString::number(data_pers_unite.id_person2) + " "
                                            " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; "

                                            "update polises "
                                            "   set id_person =" + QString::number(data_pers_unite.id_person2) + " "
                                            " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; ";
                QSqlQuery *query_unite_polises = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_unite_polises, "Перенос полисов персоны", *query_unite_polises, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this, "Ошибка БД",
                                          "При переносе полисов персоны произошла ошибка.\n\n"
                                          "Операция отменена.");
                    return;
                }
            } else {
                QString sql_del_polises   = "update blanks_pol "
                                            "   set status=-1, "
                                            "       id_person=NULL, "
                                            "       date_spent = coalesce(date_spent, CURRENT_DATE) "
                                            " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; "

                                            "update blanks_vs "
                                            "   set status=-1, "
                                            "       date_spent = coalesce(date_spent, CURRENT_DATE) "
                                            "       id_person=NULL "
                                            " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; "

                                            "delete from polises "
                                            " where id_person =" + QString::number(data_pers_unite.id_person1) + " ; ";
                QSqlQuery *query_del_polises = new QSqlQuery(db);
                if (!mySQL.exec(this, sql_del_polises, "Удаление полисов персоны", *query_del_polises, true, db, data_app)) {
                    db.rollback();
                    QMessageBox::critical(this, "Ошибка БД",
                                          "При удалении полисов персоны произошла ошибка.\n\n"
                                          "Операция отменена.");
                    return;
                }
            }



            // ---------------------------------
            // !! СОБСТВЕННО УДАЛЕНИЕ ПЕРСОНЫ !!
            // ---------------------------------
            //QString sql_del_pers = "delete from persons where id=" + QString::number(data_pers_unite.id_person1) + " ; ";
            QString sql_del_pers = "update persons "
                                   "   set status=-666 "
                                   " where id=" + QString::number(data_pers_unite.id_person1) + " ; ";
            QSqlQuery *query_del_pers = new QSqlQuery(db);
            if (!mySQL.exec(this, sql_del_pers, "Удаление персоны", *query_del_pers, true, db, data_app)) {
                db.rollback();
                QMessageBox::critical(this, "Ошибка БД",
                                      "При удалении персоны произошла ошибка.\n\n"
                                      "Операция отменена.");
                return;
            }

            // Коммит изменений
            db.commit();

            refresh_persons_tab();

        } catch (...) {
            db.rollback();
            QMessageBox::critical(this, "Непредвиденная ошибка", "Проверьте соединение с базой данных");
        }

    } else {
        QMessageBox::warning(this, "Ничего не выбрано", "Выберите строку персоны для удаления.");
    }
}

void persons_wnd::on_act_make_blanks_pol_act_triggered() {
    // откроем окно "СМС"
    delete blanks_pol_act_w;
    blanks_pol_act_w = new blanks_pol_act_wnd(db, data_app, settings, this);
    blanks_pol_act_w->exec();
}

void persons_wnd::on_act_vs_expired4date_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    s_data_eVStat data_stat;
    data_stat.rep_rep_type = 0;
    data_stat.rep_pol_type = 0;
    data_stat.rep_out_time = 0;

    data_stat.date_d = QDate::currentDate();

    data_stat.f_months = false;
    data_stat.month_d = QDate::currentDate();

    data_stat.f_years = false;
    data_stat.year_d = QDate::currentDate();

    data_stat.f_points = false;
    data_stat.id_point = -1;

    delete print_expired_vs_statistic_w;

    // вся работа проиисходит в транзакции
    db.transaction();
    //
    print_expired_vs_statistic_w = new print_expired_vs_statistic_wnd(db, data_stat, data_app, settings, this);
    print_expired_vs_statistic_w->exec();
    //
    db.rollback();
    // откатываем транзакцию - окно не должно менять данные

}

void persons_wnd::on_act_acts_triggered() {
    // откроем окно "Акты"
    delete acts_w;
    acts_w = new acts_wnd(db, data_app, settings, this);
    acts_w->setWindowState(acts_w->windowState() | Qt::WindowMaximized);
    acts_w->exec();
}

void persons_wnd::on_act_enp_scan_triggered() {
    // откроем окно сканера штрихкодов
    delete add_blank_scan_w;
    add_blank_scan_w = new add_blank_scan_wnd(db, data_app, settings, this);
    add_blank_scan_w->exec();
    //refresh_blanks_pol_tab();
}

void persons_wnd::on_act_enp_byhand_triggered() {
    //ui->pan_vs->setVisible(false);

    // откроем окно сканера штрихкодов
    s_data_new_blank data_new_blank;
    data_new_blank.bc_type = 2;
    data_new_blank.date_birth = QDate(1900,1,1);
    data_new_blank.date_exp = QDate(1900,1,1);
    data_new_blank.eds = "";
    data_new_blank.enp = "";
    data_new_blank.fam = "";
    data_new_blank.im = "";
    data_new_blank.ot = "";
    data_new_blank.pol_num = "";
    data_new_blank.pol_ser = "";

    delete add_blank_w;
    add_blank_w = new add_blank_wnd(db, data_app, data_new_blank, settings, this);
    add_blank_w->exec();

    //refresh_blanks_pol_tab();
    //ui->pan_vs->setVisible(true);
}

/*void persons_wnd::on_ch_pers_pan_reg_hous_toggled(bool checked) {
    if ( checked ) {
        /* && (!data_pers.reg_HOUSEID.isEmpty() || data_pers.id<0) ) {
        if (QMessageBox::question(this, "Ввести номер дома вручную?",
                                  "Вы действительно хотите ввести номер дома вручную?\n\n"
                                  "При этом будет удален ранее добавленный ФИАС код HOUSEID.",
                                  QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Cancel) {
            ui->ch_pers_pan_reg_hous->setChecked(false);
            return;
        } else {
            data_pers.reg_HOUSEID = "";
        }* /
        if (data_app.is_call || data_app.is_locl) {
            QMessageBox::warning(this, "Доступно только в головном офисе",
                                 "Возможность ввода адресной информации без ФИАС доступна только в головном офисе");
            ui->ch_pers_pan_reg_hous->setChecked(false);
            return;
        }
    }
    ui->combo_pers_pan_reg_hous->setVisible(!checked);
    ui->lab_pers_pan_reg_fias->setVisible(!checked);
    ui->ln_pers_pan_reg_hous->setVisible(checked);
    ui->ln_pers_pan_reg_corp->setVisible(checked);
    ui->lab_pers_pan_reg_hous->setVisible(checked);
    ui->lab_pers_pan_reg_corp->setVisible(checked);
    b_need_save(true);
}*/

/*void persons_wnd::on_ch_pers_pan_liv_hous_toggled(bool checked) {
    if ( checked ) {
        /* && (!data_pers.liv_HOUSEID.isEmpty() || data_pers.id<0) ) {
        if (QMessageBox::question(this, "Ввести номер дома вручную?",
                                  "Вы действительно хотите ввести номер дома вручную?\n\n"
                                  "При этом будет удален ранее добавленный ФИАС код HOUSEID.",
                                  QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Cancel) {
            ui->ch_pers_pan_liv_hous->setChecked(false);
            return;
        } else {
            data_pers.liv_HOUSEID = "";
        }* /
        if (data_app.is_call || data_app.is_locl) {
            QMessageBox::warning(this, "Доступно только в головном офисе",
                                 "Возможность ввода адресной информации без ФИАС доступна только в головном офисе");
            ui->ch_pers_pan_liv_hous->setChecked(false);
            return;
        }
    }
    ui->combo_pers_pan_liv_hous->setVisible(!checked);
    ui->lab_pers_pan_liv_fias->setVisible(!checked);
    ui->ln_pers_pan_liv_hous->setVisible(checked);
    ui->ln_pers_pan_liv_corp->setVisible(checked);
    ui->lab_pers_pan_liv_hous->setVisible(checked);
    ui->lab_pers_pan_liv_corp->setVisible(checked);
    b_need_save(true);
}*/

void persons_wnd::on_combo_pers_pan_reg_hous_activated(const QString &arg1) {
    if (!arg1.trimmed().isEmpty()) {
        // определим номер дома по ФИАС
        QString house = "";
        bool  f_start = false;
        int i = 0;
        for (i=0; i<arg1.size(); i++) {
            QString c_s = arg1.mid(i,1);
            if ( f_start
                 && c_s!="0"
                 && c_s!="1"
                 && c_s!="2"
                 && c_s!="3"
                 && c_s!="4"
                 && c_s!="5"
                 && c_s!="6"
                 && c_s!="7"
                 && c_s!="8"
                 && c_s!="9" ) {
                break;
            }
            if (!f_start) {
                if ( c_s=="0"
                     || c_s=="1"
                     || c_s=="2"
                     || c_s=="3"
                     || c_s=="4"
                     || c_s=="5"
                     || c_s=="6"
                     || c_s=="7"
                     || c_s=="8"
                     || c_s=="9" ) {
                    f_start = true;
                }
            }
            if (f_start) {
                house += c_s;
            }
        }
        ui->ln_pers_pan_reg_hous->setText(house);
        QString corp_s = arg1.right(arg1.size() - i);
        corp_s = corp_s.toUpper().replace("/", " ").replace("-", " ")
                .replace(",", " ").replace(".", " ").replace("(", " ")
                .replace(")", " ").replace("[", " ").replace("]", " ")
                .replace("{", " ").replace("}", " ").replace("КОРП", " ")
                .replace("КРП", " ").replace("КР", " ").replace("К", " ")
                .trimmed().simplified();
        ui->ln_pers_pan_reg_corp->setText(corp_s);
    }

    b_need_save(true);
}

void persons_wnd::on_combo_pers_pan_liv_hous_activated(const QString &arg1) {
    if (!arg1.trimmed().isEmpty()) {
        // определим номер дома по ФИАС
        QString house = "";
        bool  f_start = false;
        int i = 0;
        for (i=0; i<arg1.size(); i++) {
            QString c_s = arg1.mid(i,1);
            if ( f_start
                 && c_s!="0"
                 && c_s!="1"
                 && c_s!="2"
                 && c_s!="3"
                 && c_s!="4"
                 && c_s!="5"
                 && c_s!="6"
                 && c_s!="7"
                 && c_s!="8"
                 && c_s!="9" ) {
                break;
            }
            if (!f_start) {
                if ( c_s=="0"
                     || c_s=="1"
                     || c_s=="2"
                     || c_s=="3"
                     || c_s=="4"
                     || c_s=="5"
                     || c_s=="6"
                     || c_s=="7"
                     || c_s=="8"
                     || c_s=="9" ) {
                    f_start = true;
                }
            }
            if (f_start) {
                house += c_s;
            }
        }
        ui->ln_pers_pan_liv_hous->setText(house);
        QString corp_s = arg1.right(arg1.size() - i);
        corp_s = corp_s.toUpper().replace("/", " ").replace("-", " ")
                .replace(",", " ").replace(".", " ").replace("(", " ")
                .replace(")", " ").replace("[", " ").replace("]", " ")
                .replace("{", " ").replace("}", " ").replace("КОРП", " ")
                .replace("КРП", " ").replace("КР", " ").replace("К", " ")
                .trimmed().simplified();
        ui->ln_pers_pan_liv_corp->setText(corp_s);
    }

    b_need_save(true);
}

void persons_wnd::on_bn_save_Ifile_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_polises || !ui->tab_polises->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите полис, события которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
        return;
    }

    if (data_app.is_call || data_app.is_locl) {
        // недоступно в ПВП
        ui->group_person_docs->setChecked(false);
        QApplication::processEvents();
        QMessageBox::warning(this, "Доступно только в головном офисе",
                             "Редактирование данных застрахованных доступно только в головном офисе");
        return;
    }

    // проверим выделенную строку
    QModelIndexList indexes_act = ui->tab_events->selectionModel()->selection().indexes();

    if (indexes_act.size()>0) {
        QModelIndex index_act = indexes_act.front();

        // зададим для полиса date_stop и in_erp
        QString id_polis = QString::number(model_events.data(model_events.index(index_act.row(), 15), Qt::EditRole).toInt());
        QString id_event = QString::number(model_events.data(model_events.index(index_act.row(), 8), Qt::EditRole).toInt());
        QString code_event = model_events.data(model_events.index(index_act.row(),10), Qt::EditRole).toString();


        QString sql_sel = "select i.file_name, i.bin "
                          "  from events a "
                          "       join files_r_evts r on(r.id_event=a.id) "
                          "       join files_out_i i on(r.id_file_i=i.id) "
                          "  left join files_packs fp on(fp.pack_name=i.pack_name) "
                          "  left join files_in_p p on(p.pack_name=fp.pack_name) "
                          "  /*left join files_in_f f on(f.pack_name=fp.pack_name)*/ "
                          " where a.id=" + id_event + " ; ";

        QSqlQuery *query_sel = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_sel, "Получим I-файл", *query_sel, true, db, data_app)) {
            QMessageBox::critical(this, "Непредвиденная ошибка",
                                  "При попытке получить I-файл произошла неожиданная ошибка.\n\n"
                                  "Действие отменено.");
            delete query_sel;
            return;
        }
        if (query_sel->next()) {
            QString fname_res = data_app.path_temp + query_sel->value(0).toString() + ".zip";
            //QString str = QString::fromLocal8Bit(query_sel->value(1).toByteArray());
            QByteArray arr = query_sel->value(1).toByteArray();
            //QString str = QString::toLocal8Bit(arr);

            QFile f(fname_res);

            f.remove();
            if (!f.open(QIODevice::WriteOnly)) {
                QMessageBox::warning(this,
                                     "Ошибка создания файла",
                                     "При сохранении целевого I-файла произошла ошибка.\n\n"
                                     "Операция отменена.");
                return;
            }
            f.write(arr);
            f.close();
            long result = (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_res.utf16()), 0, 0, SW_NORMAL);
        } else {
            QMessageBox::warning(this, "Файл не найден",
                                 "Для выбранного события I-файл не найден.\n"
                                 "Это событие ещё не отправлялось в ТФОМС?.");
        }
    } else {
        QMessageBox::warning(this, "Ничего не выбрано",
                             "Выберите событие, I-файл для которого вы хотите открыть.");
    }
}

void persons_wnd::on_bn_save_Pfile_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_polises || !ui->tab_polises->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Сначала выберите полис, события которого вы хотите просмотреть или изменить без отправки в ТФОМС.");
        return;
    }

    if (data_app.is_call || data_app.is_locl) {
        // недоступно в ПВП
        ui->group_person_docs->setChecked(false);
        QApplication::processEvents();
        QMessageBox::warning(this, "Доступно только в головном офисе",
                             "Редактирование данных застрахованных доступно только в головном офисе");
        return;
    }

    // проверим выделенную строку
    QModelIndexList indexes_act = ui->tab_events->selectionModel()->selection().indexes();

    if (indexes_act.size()>0) {
        QModelIndex index_act = indexes_act.front();

        // зададим для полиса date_stop и in_erp
        QString id_polis = QString::number(model_events.data(model_events.index(index_act.row(), 15), Qt::EditRole).toInt());
        QString id_event = QString::number(model_events.data(model_events.index(index_act.row(), 8), Qt::EditRole).toInt());
        QString code_event = model_events.data(model_events.index(index_act.row(),10), Qt::EditRole).toString();


        QString sql_sel = "select p.file_name, p.bin "
                          "  from events a "
                          "       join files_r_evts r on(r.id_event=a.id) "
                          "       join files_out_i i on(r.id_file_i=i.id) "
                          "       join files_packs fp on(fp.pack_name=i.pack_name) "
                          "       join files_in_p p on(p.pack_name=fp.pack_name) "
                          " where a.id=" + id_event + " ; ";

        QSqlQuery *query_sel = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_sel, "Получим P-файл", *query_sel, true, db, data_app)) {
            QMessageBox::critical(this, "Непредвиденная ошибка",
                                  "При попытке получить P-файл произошла неожиданная ошибка.\n\n"
                                  "Действие отменено.");
            delete query_sel;
            return;
        }
        if (query_sel->next()) {
            QString fname_res = data_app.path_temp + query_sel->value(0).toString() + ".xml";
            //QString str = QString::fromLocal8Bit(query_sel->value(1).toByteArray());
            QByteArray arr = query_sel->value(1).toByteArray();
            //QString str = QString::toLocal8Bit(arr);

            QFile f(fname_res);

            f.remove();
            if (!f.open(QIODevice::WriteOnly)) {
                QMessageBox::warning(this,
                                     "Ошибка создания файла",
                                     "При сохранении целевого P-файла произошла ошибка.\n\n"
                                     "Операция отменена.");
                return;
            }
            f.write(arr);
            f.close();
            long result = (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_res.utf16()), 0, 0, SW_NORMAL);
        } else {
            QMessageBox::warning(this, "Файл не найден",
                                 "Для выбранного события P-файл не найден.\n"
                                 "Это событие ещё не отправлялось в ТФОМС или ответный протокол ещё не получен?.");
        }
        delete query_sel;
    } else {
        QMessageBox::warning(this, "Ничего не выбрано",
                             "Выберите событие, P-файл для которого вы хотите открыть.");
    }
}

void persons_wnd::on_ch_assig_mt_by_medsite_clicked(bool checked) {
    refresh_pers_assig_mt();
}

void persons_wnd::on_combo_pers_assig_ms_currentIndexChanged(int index) {
    refresh_pers_assig_mt();
}

// редактирование поля DOST
void persons_wnd::on_ch_dost_clicked(bool checked) {
    ui->pan_dost->setVisible(checked);
}

void persons_wnd::on_ch_dost_fam_clicked(bool checked) {
    data_pers.dost = data_pers.dost.left(1) + QString(checked ? "_" : "2") + data_pers.dost.right(4);
    ui->lab_pers_pan_dost->setText(data_pers.dost);
    if (checked) {
        ui->ch_dost_im->setEnabled(true);
    } else {
        ui->ch_dost_im->setEnabled(false);
        ui->ch_dost_im->setChecked(true);
        on_ch_dost_im_clicked(true);
    }
    b_need_save(true);
}
void persons_wnd::on_ch_dost_im_clicked(bool checked) {
    data_pers.dost = data_pers.dost.left(2) + QString(checked ? "_" : "3") + data_pers.dost.right(3);
    ui->lab_pers_pan_dost->setText(data_pers.dost);
    if (checked) {
        ui->ch_dost_fam->setEnabled(true);
    } else {
        ui->ch_dost_fam->setEnabled(false);
        ui->ch_dost_fam->setChecked(true);
        on_ch_dost_fam_clicked(true);
    }
    b_need_save(true);
}
void persons_wnd::on_ch_dost_ot_clicked(bool checked) {
    data_pers.dost = QString(checked ? "_" : "1") + data_pers.dost.right(5);
    ui->ch_pers_pan_ot->setChecked(checked);
    on_ch_pers_pan_ot_clicked(checked);
    ui->lab_pers_pan_dost->setText(data_pers.dost);
    b_need_save(true);
}
void persons_wnd::on_ch_dost_day_clicked(bool checked) {
    data_pers.dost = data_pers.dost.left(3) + QString(checked ? "_" : "4") + data_pers.dost.right(2);
    ui->lab_pers_pan_dost->setText(data_pers.dost);
    b_need_save(true);
}
void persons_wnd::on_ch_dost_mon_clicked(bool checked) {
    data_pers.dost = data_pers.dost.left(4) + QString(checked ? "_" : "5") + data_pers.dost.right(1);
    ui->ch_dost_day->setEnabled(checked);
    if (!checked)  {
        ui->ch_dost_day->setChecked(false);
        data_pers.dost = data_pers.dost.left(3) + "4" + data_pers.dost.right(2);
    }
    ui->lab_pers_pan_dost->setText(data_pers.dost);
    b_need_save(true);
}

void persons_wnd::on_ch_dost_year_clicked(bool checked) {
    data_pers.dost = data_pers.dost.left(5) + QString(checked ? "_" : "6");
    ui->lab_pers_pan_dost->setText(data_pers.dost);
    b_need_save(true);
}

void persons_wnd::on_bn_finder_clicked(bool checked) {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    if (finder_w==NULL)
        this->finder_w = new finder_wnd(db, db_FIAS, data_app, settings, this);

    this->finder_w->setVisible(checked);
}

void persons_wnd::finder_off() {
    ui->bn_finder->setChecked(false);
    refresh_persons_tab();
}

void persons_wnd::on_act_errors4days_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    QString sql = "select p.date_get2hand as date_polis, count(*) as cnt_errors \n"
                  "  from frecs_in_p r \n"
                  "  left join polises p on(p.id=r.id_polis) \n"
                  " where r.status in(999, 0, 1) \n"
                  " group by p.date_get2hand \n"
                  " order by p.date_get2hand ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Распределение неисправленных ошибок по датам", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_pays2mo_smo_sum_triggered() {
    delete print_pays2mo_rep_pt_w;
    print_pays2mo_rep_pt_w = new print_pays2mo_rep_pt_wnd(db, false, data_app, settings, this);
    print_pays2mo_rep_pt_w->exec();
}

void persons_wnd::on_bn_pers_pan_old_data_clicked(bool checked) {
    if (!checked) {
        if (QMessageBox::question(this, "Нужно подтверждение",
                                  "Вы действительно хотите удалить старые данные идентификации застрахованного?\n",
                                  QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Cancel) {
            ui->bn_pers_pan_old_data->setChecked(!checked);
            return;
        }
        // собственно удаление старых данных
        QString sql_del   = "delete from persons_old "
                            " where id_person =" + QString::number(data_pers.id) + " ; ";
        QSqlQuery *query_del = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_del, "Удаление старых данных персоны", *query_del, true, db, data_app)) {
            db.rollback();
            QMessageBox::critical(this, "Ошибка БД",
                                  "При удалении старых данных персоны произошла ошибка.\n\n"
                                  "Операция отменена.");
            ui->bn_pers_pan_old_data->setChecked(!checked);
            return;
        }
        delete query_del;

        // очистим сохранённые старые данные персоны
        data_pers.id_old = -1;
        ui->ch_pers_pan_fam_old->setChecked(false);
        ui->ch_pers_pan_im_old->setChecked(false);
        ui->ch_pers_pan_ot_old->setChecked(false);
        ui->ch_pers_pan_date_birth_old->setChecked(false);
        ui->ch_pers_pan_sex_old->setChecked(false);
        ui->ch_pers_pan_snils_old->setChecked(false);
        ui->ch_pers_pan_enp_old->setChecked(false);
        ui->ch_pers_pan_plc_birth_old->setChecked(false);

        ui->bn_pers_pan_old_data->setText("Добавить старые данные");
    } else {
        ui->ch_pers_pan_fam_old->setChecked(true);
        ui->ch_pers_pan_im_old->setChecked(true);
        ui->ch_pers_pan_ot_old->setChecked(true);
        ui->ch_pers_pan_date_birth_old->setChecked(true);
        ui->ch_pers_pan_sex_old->setChecked(true);
        ui->ch_pers_pan_snils_old->setChecked(true);
        ui->ch_pers_pan_enp_old->setChecked(true);
        ui->ch_pers_pan_plc_birth_old->setChecked(true);

        ui->bn_pers_pan_old_data->setText("Удалить старые данные");
    }
    b_need_save(true);
}

void persons_wnd::on_act_refresh_fias_triggered() {
    // проверим доступность базы ФИАС
    QString sql_test = "select * from fias.load_files limit 1 ; ";
    QSqlQuery *query_test = new QSqlQuery(db_FIAS);
    if (!query_test->exec(sql_test)) {
        delete query_test;
        bool f_ok = false;
        while (!f_ok) {
            if (QMessageBox::warning(this, "Нет доступа к базе ФИАС!",
                                     "Внимание! \nНет доступа к базе ФИАС. При этом невозможен ввод и редактирование адресной информации.\n\n"
                                     "Попробуйте обновить подключение к базе ФИАС нажатем на кнопку [Retry]\n\nЕсли подключение не удалось - перезапустите программу.",
                                     QMessageBox::Retry|QMessageBox::Cancel, QMessageBox::Retry)==QMessageBox::Retry) {
                f_ok = refresh_fias_connection();
            } else {
                f_ok = false;
                break;
            }
        }
        if (!f_ok) {
            // нет доступа к ФИАС - отмена операции
            return;
        }
        QMessageBox::information(this, "Подключение к базе данных ФИАС обновлено", "Подключение к базе данных ФИАС успешно обновлено.");
        return;
    } else {
        delete query_test;
        QMessageBox::information(this, "База ФИАС доступна", "Подключение к базе данных ФИАС доступно. \nОбновление не требуется.");
    }
}

void persons_wnd::on_combo_pers_pan_category_currentIndexChanged(int index) {
    ui->pan_person_fio->setEnabled(index>0);
    ui->pan_person_rep->setEnabled(index>0);
    ui->pan_person_oksm->setEnabled(index>0);
    ui->pan_person_address->setEnabled(index>0);
    ui->pan_person_phones->setEnabled(index>0);

    if ( index==1 || index==7 ) {
        ui->ch_country->setChecked(false);
        ui->pan_country->setVisible(false);
    } else {
        ui->ch_country->setChecked(true);
        ui->pan_country->setVisible(true);
    }
    if ( index==1 || index==2 || index==3 || index==4 || index==5 || index==11 || index==12 || index==13 || index==14 ) {
        ui->ch_rep->setChecked(false);
        ui->pan_rep->setVisible(false);
    } else {
        ui->ch_rep->setChecked(true);
        ui->pan_rep->setVisible(true);
    }
    if ( index==11 || index==12 || index==13 || index==14 ) {
        ui->frame_eaes->setVisible(true);
        ui->frame_eaes->setVisible(true);
        ui->ch_eaes->setEnabled(true);
        ui->ch_eaes->setChecked(true);
        ui->pan_eaes->setEnabled(true);
        ui->ch_eaes_reside_exp->setChecked(true);
        ui->date_eaes_reside_exp->setEnabled(true);

        refresh_pers_eaes();
    } else  {
        ui->frame_eaes->setVisible(false);

        // сбросим данные ЕАЭС
        ui->ch_eaes_reside_exp->setChecked(false);
        ui->date_eaes_reside_exp->setEnabled(false);
    }
}

void persons_wnd::on_act_disp_dead_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    // запросим год диспансеризации
    int year = QInputDialog::getInt(this, "Год диспансеризации",
                                    "Выберите год, на который надо сформировать список \n"
                                    "умерших застрахованных, проходивших по плану на диспансеризацию на год.",
                                    QDate::currentDate().year(), 2000, 3000);

    QString sql = "select e.id, e.fam, e.im, e.ot, e.date_birth, e.date_death \n"
                  "  from persons e \n"
                  " where st_person(e.id, '" + QString::number(year) + "-12-31') in(1,2,3,4,11,12,13,14) \n"
                  //" where st_person(e.id, '" + QString::number(QDate::currentDate().year()) + "-01-01')>0 \n"
                  //" where ( st_person(e.id, '" + QString::number(QDate::currentDate().year()) + "-01-01') is NULL \n"
                  //"      or st_person(e.id, '" + QString::number(QDate::currentDate().year()) + "-01-01')>0 ) \n"
                  "   and st_person(e.id, NULL)=-10 \n"
                  "   and extract(year from e.date_birth) in(#YEARS#) \n"
                  " order by e.fam, e.im, e.ot, e.date_birth ; ";
    // выберем годы
    QString s_years;
    for (int i=0; i<50; i++) {
        if (i>0)  s_years += ",";
        s_years += QString::number(year - 18 - 3*i);
    }
    sql = sql.replace("#YEARS#", s_years);

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Список застрахованных на диспансеризацию - взрослые (с 21 года)", sql, db, data_app, this);
    show_tab_w->exec();
}


void persons_wnd::on_act_prof_triggered() {
    if (!gen_disp_plan(0))
        QMessageBox::warning(this, "Отказ при генерации плана", "Не удалось сформировать новый план профосмотров взрослых застрахованных (18 лет и старше).");
}
/*{
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    // запросим год диспансеризации
    int year = QInputDialog::getInt(this, "Год проведения профосмотров",
                                    "Выберите год, на который надо сформировать план \n"
                                    "проведения профосмотров для застрахованных старше 21 года.",
                                    QDate::currentDate().year(), 2000, 3000);

    QString sql = "select e.id, e.fam, e.im, e.ot, e.date_birth, e.phone_cell, e.email, coalesce(p.enp, e.enp) as enp, a.code_mo, mo.name_mo, \n"
                  "       ar.subj_name as r_subj, ar.dstr_name as r_dstr, ar.subj_name as r_city, ar.city_name as r_nasp, ar.nasp_name as r_strt, ar.house as r_house, ar.quart as r_quart, \n"
                  "       al.subj_name as l_subj, al.dstr_name as l_dstr, al.subj_name as l_city, al.city_name as l_nasp, al.nasp_name as l_strt, al.house as l_house, al.quart as l_quart \n"
                  "  from persons e \n"
                  "  left join polises p on(p.id=e.id_polis) \n"
                  "  left join persons_assig a on(a.id_person=e.id and a.is_actual=0) \n"
                  "  left join spr_medorgs mo on(mo.code_mo=a.code_mo and mo.is_head=1) \n"
                  "  left join addresses ar on(ar.id=e.id_addr_reg) \n"
                  "  left join addresses al on(al.id=e.id_addr_liv) \n"
                  " where st_person(e.id, '" + QString::number(year) + "-12-31') in(1,2,3,4,11,12,13,14) \n"
                  //" where ( st_person(e.id, '" + QString::number(QDate::currentDate().year()) + "-01-01') is NULL \n"
                  //"      or st_person(e.id, '" + QString::number(QDate::currentDate().year()) + "-01-01')>0 ) \n"
                  //" where st_person(e.id, '" + QString::number(QDate::currentDate().year()) + "-01-01')>0 \n"
                  "   and extract(year from e.date_birth) in(#YEARS#) \n"
                  " order by e.fam, e.im, e.ot, e.date_birth ; ";
    // выберем годы
    QString s_years;
    //s_years += QString::number(year - 18);
    for (int i=0; i<50; i++) {
        s_years += ",";
        s_years += QString::number(year - 18 - 3*i -1);
        s_years += ",";
        s_years += QString::number(year - 18 - 3*i -2);
    }
    sql = sql.replace("#YEARS#", s_years);

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Список застрахованных на профосмотр на " + QString::number(year) + " год - взрослые (с 21 года)", sql, db, data_app, this);
    show_tab_w->exec();
}*/

void persons_wnd::on_act_insure_errors_triggered() {
    delete spr_insure_errors_w;
    spr_insure_errors_w = new spr_insure_errors_wnd(db, data_app);
    spr_insure_errors_w->show();
}

void persons_wnd::on_act_assig_errors_triggered() {
    delete spr_assig_errors_w;
    spr_assig_errors_w = new spr_assig_errors_wnd(db, data_app);
    spr_assig_errors_w->show();
}

void persons_wnd::on_bn_spr_insure_errors_clicked() {
    on_act_insure_errors_triggered();
}

void persons_wnd::on_bn_spr_assig_errors_clicked() {
    on_act_assig_errors_triggered();
}

void persons_wnd::on_act_print_disp2mo_triggered() {
    delete print_dispanserize_plans_w;
    print_dispanserize_plans_w = new print_dispanserize_plans_wnd(db, data_app, settings, this);
    print_dispanserize_plans_w->exec();
}




void persons_wnd::on_act_load_ms_reeester_triggered() {
    // надо выбрать файл, полученный от ТФОМС
    QString fullname = QFileDialog::getOpenFileName(this, "Выберите полученный от ТФОМС файл регистра врачебных участков",
                                                    data_app.path_in, "DBF-files (*.dbf)"/*, QFileDialog::ReadOnly*/);
    QFileInfo fi(fullname);
    QString filename = fi.fileName();
    QString basename = fi.baseName();
    QString filepath = fi.filePath();
    if (filepath!=data_app.path_dbf) {
        // если есть, удалим старую копию файла
        if (QFile::exists(data_app.path_dbf + filename)) {
            if (!QFile::remove(data_app.path_dbf + filename)) {
                QMessageBox::warning(this, "Ошибка копирования файла",
                                     "При попытке скопировать выбранный DBF-файл в папку источника данных DBF произошла неожиданная ошибка.\n\n"
                                     "Операция отменена.");
                return;
            }
        }
        // файл надо скопировать в папку источника DBF
        if (!QFile::copy(fullname, data_app.path_dbf + filename)) {
            QMessageBox::warning(this, "Ошибка копирования файла",
                                 "При попытке скопировать выбранный DBF-файл в папку источника данных DBF произошла неожиданная ошибка.\n\n"
                                 "Операция отменена.");
            return;
        }
    }

    // подключимся к ODBC
    db_ODBC = QSqlDatabase::addDatabase("QODBC", "INKO_DBF");
    db_ODBC.setConnectOptions();
    // имя источника данных
    db_ODBC.setDatabaseName("INKO_DBF");
    while (!db_ODBC.open()) {
        if (QMessageBox::warning(this, "Не найден ODBC-источник данных INKO_DBF",
                                 QString("Источник данных должен использовать папку, указанную в параметре программы \"path_dbf\":\n"
                                 "При попытке подключиться к источнику данных ODBC \"INKO_DBF\" операционная система вернула отказ. \n"
                                 "Этот источник данных необходим для генерации и чтения dbf-файлов обмена с ТФОМС. \n"
                                 "Если такого источника данных нет - создайте его.\n\n")
                                 + data_app.path_dbf + "\n\n"
                                 "Попробовать снова?", QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes)==QMessageBox::No) {
            return;
        }
    }

    // выберем все данные
    QString sql_tfoms = "select MCOD, UCH_ID, TYP, SNILS_VR, DATEBEG "
                        " from " + basename + " ; ";
    QSqlQuery *query_tfoms = new QSqlQuery(db_ODBC);
    bool res_tfoms = query_tfoms->exec(sql_tfoms);
    QString err_tfoms = db_ODBC.lastError().databaseText();
    if (!res_tfoms) {
        delete query_tfoms;
        QMessageBox::warning(this, "Ошибка чтения данных ТФОМС",
                             "При попытке прочитать данные ТФОМС произошла ошибка!\n\n"
                             + sql_tfoms + "\n\n"
                             "Операция отменена");
        db_ODBC.close();
        QSqlDatabase::removeDatabase("INKO_DBF");
        return;
    }

    while (query_tfoms->next()) {
        QString code_mo  = query_tfoms->value(0).toString();
        QString code_mp  = "";
        QString code_ms  = query_tfoms->value(1).toString();
        int     type_ms  = query_tfoms->value(2).toInt();
        QString snils_mt = query_tfoms->value(3).toString();
        QDate   date_beg = query_tfoms->value(4).toDate();

        int id_ms = -1;
        int id_mt = -1;

        // проверим, есть ли такой участок
        QString code_ms2 = code_ms;
        code_ms2 = code_ms2.trimmed().simplified();
        QString sql_test_ms = "select id, code_mp, code_ms "
                              "  from spr_medsites "
                              " where code_mo='" + code_mo + "' "
                              "   and trim(replace(code_ms,'  ',' '))='" + code_ms2 + "' "
                              " limit 1 ; ";

        QSqlQuery *query_test_ms = new QSqlQuery(db);
        bool res_test_ms = query_test_ms->exec(sql_test_ms);
        QString err_test_ms = db.lastError().databaseText();
        if (!res_test_ms) {
            delete query_test_ms;
            QMessageBox::warning(this, "Ошибка проверки существования участка",
                                 "При попытке проверить существование участка произошла ошибка!\n\n"
                                 + sql_test_ms + "\n\n"
                                 "Операция отменена");
            delete query_tfoms;
            db_ODBC.close();
            QSqlDatabase::removeDatabase("INKO_DBF");
            return;
        }
        if (query_test_ms->size()<1) {
            // такого участка нет - добавим
            QString sql_add_ms = "insert into spr_medsites(code_mo, code_mp, code_ms, name_ms, type_ms) "
                                  " values('" + code_mo + "', '0', '" + code_ms + "', '" + code_ms + "', #MS_TYPE#) "
                                  " returning id ; ";
            switch (type_ms) {
            case 1 : sql_add_ms = sql_add_ms.replace("#MS_TYPE#", "2");
                break;
            case 2 : sql_add_ms = sql_add_ms.replace("#MS_TYPE#", "1");
                break;
            case 4 : sql_add_ms = sql_add_ms.replace("#MS_TYPE#", "3");
                break;
            case 3 : sql_add_ms = sql_add_ms.replace("#MS_TYPE#", "5");
                break;
            default: sql_add_ms = sql_add_ms.replace("#MS_TYPE#", "2");
                break;
            }
            QSqlQuery *query_add_ms = new QSqlQuery(db);
            bool res_add_ms = query_add_ms->exec(sql_add_ms);
            QString err_add_ms = db.lastError().databaseText();
            if (!res_add_ms) {
                delete query_add_ms;
                QMessageBox::warning(this, "Ошибка добавления участка",
                                     "При попытке добавить участок произошла ошибка!\n\n"
                                     + sql_add_ms + "\n\n"
                                     "Операция отменена");
                delete query_tfoms;
                db_ODBC.close();
                QSqlDatabase::removeDatabase("INKO_DBF");
                return;
            }
            query_add_ms->next();
            id_ms = query_add_ms->value(0).toInt();
            delete query_add_ms;
        } else {
            query_test_ms->next();
            id_ms = query_test_ms->value(0).toInt();
            // обноввим написание кода участка по данным ТФОМС
            QString sql_corr_ms = "update spr_medsites "
                                  "   set code_ms='" + code_ms + "', "
                                  "       type_ms=#MS_TYPE# "
                                  " where id=" + QString::number(id_ms) + " ; ";
            switch (type_ms) {
            case 1 : sql_corr_ms = sql_corr_ms.replace("#MS_TYPE#", "2");
                break;
            case 2 : sql_corr_ms = sql_corr_ms.replace("#MS_TYPE#", "1");
                break;
            case 4 : sql_corr_ms = sql_corr_ms.replace("#MS_TYPE#", "3");
                break;
            case 3 : sql_corr_ms = sql_corr_ms.replace("#MS_TYPE#", "5");
                break;
            default: sql_corr_ms = sql_corr_ms.replace("#MS_TYPE#", "2");
                break;
            }
            QSqlQuery *query_corr_ms = new QSqlQuery(db);
            bool res_corr_ms = query_corr_ms->exec(sql_corr_ms);
            QString err_corr_ms = db.lastError().databaseText();
            if (!res_corr_ms) {
                delete query_corr_ms;
                QMessageBox::warning(this, "Ошибка обновления участка",
                                     "При попытке обновить участок по новым данным ТФОМС произошла ошибка!\n\n"
                                     + sql_corr_ms + "\n\n"
                                     "Операция отменена");
                delete query_tfoms;
                db_ODBC.close();
                QSqlDatabase::removeDatabase("INKO_DBF");
                return;
            }
            delete query_corr_ms;
        }
        delete query_test_ms;

        // проверим, есть ли такой врач
        QString sql_test_mt = "select id, fio_mt, snils_mt, spec_mt "
                              "  from spr_medters "
                              " where code_mo='" + code_mo + "' "
                              "   and snils_mt='" + snils_mt + "' "
                              " limit 1 ; ";

        QSqlQuery *query_test_mt = new QSqlQuery(db);
        bool res_test_mt = query_test_mt->exec(sql_test_mt);
        QString err_test_mt = db.lastError().databaseText();
        if (!res_test_mt) {
            delete query_test_mt;
            QMessageBox::warning(this, "Ошибка проверки существования врача",
                                 "При попытке проверить существование врача произошла ошибка!\n\n"
                                 + sql_test_mt + "\n\n"
                                 "Операция отменена");
            delete query_tfoms;
            db_ODBC.close();
            QSqlDatabase::removeDatabase("INKO_DBF");
            return;
        }
        if (query_test_mt->size()<1) {
            // попробуем найти этого врача в других МО - может уволился
            QString sql_old_mt = "select id, fio_mt, snils_mt, spec_mt "
                                 "  from spr_medters "
                                 " where snils_mt='" + snils_mt + "' "
                                 "   and fio_mt is not NULL "
                                 " limit 1 ; ";

            QSqlQuery *query_old_mt = new QSqlQuery(db);
            bool res_old_mt = query_old_mt->exec(sql_old_mt);
            QString err_old_mt = db.lastError().databaseText();
            if ( !res_old_mt
                 || !query_old_mt->next()
                 || query_old_mt->value(1).isNull() ) {
                // такого врача нет - добавим
                QString sql_add_mt = "insert into spr_medters(code_mo, fio_mt, snils_mt, spec_mt) "
                                     "values('" + code_mo + "', ' - - - ', '" + snils_mt + "', #MT_SPEC#) "
                                     " returning id ; ";
                switch (type_ms) {
                case 1 : sql_add_mt = sql_add_mt.replace("#MT_SPEC#", "27");
                    break;
                case 2 : sql_add_mt = sql_add_mt.replace("#MT_SPEC#", "22");
                    break;
                case 4 : sql_add_mt = sql_add_mt.replace("#MT_SPEC#", "16");
                    break;
                case 3 : sql_add_mt = sql_add_mt.replace("#MT_SPEC#", "16");
                    break;
                default: sql_add_mt = sql_add_mt.replace("#MT_SPEC#", "27");
                    break;
                }
                QSqlQuery *query_add_mt = new QSqlQuery(db);
                bool res_add_mt = query_add_mt->exec(sql_add_mt);
                QString err_add_mt = db.lastError().databaseText();
                if (!res_add_mt) {
                    delete query_add_mt;
                    QMessageBox::warning(this, "Ошибка добавления врача",
                                         "При попытке добавить врача произошла ошибка!\n\n"
                                         + sql_add_mt + "\n\n"
                                         "Операция отменена");
                    delete query_tfoms;
                    db_ODBC.close();
                    QSqlDatabase::removeDatabase("INKO_DBF");
                    return;
                }
                query_add_mt->next();
                id_mt = query_add_mt->value(0).toInt();
                delete query_add_mt;

            } else {

                // этот врач ранее работал в другой МО - используем старые данные
                QString fio_mt = query_old_mt->value(1).toString();
                QString sql_add_mt = "insert into spr_medters(code_mo, fio_mt, snils_mt, spec_mt) "
                                     "values('" + code_mo + "', '" + fio_mt + "', '" + snils_mt + "', #MT_SPEC#) "
                                     " returning id ; ";
                switch (type_ms) {
                case 1 : sql_add_mt = sql_add_mt.replace("#MT_SPEC#", "27");
                    break;
                case 2 : sql_add_mt = sql_add_mt.replace("#MT_SPEC#", "22");
                    break;
                case 4 : sql_add_mt = sql_add_mt.replace("#MT_SPEC#", "16");
                    break;
                case 3 : sql_add_mt = sql_add_mt.replace("#MT_SPEC#", "16");
                    break;
                default: sql_add_mt = sql_add_mt.replace("#MT_SPEC#", "27");
                    break;
                }
                QSqlQuery *query_add_mt = new QSqlQuery(db);
                bool res_add_mt = query_add_mt->exec(sql_add_mt);
                QString err_add_mt = db.lastError().databaseText();
                if (!res_add_mt) {
                    delete query_add_mt;
                    QMessageBox::warning(this, "Ошибка добавления врача",
                                         "При попытке добавить врача произошла ошибка!\n\n"
                                         + sql_add_mt + "\n\n"
                                         "Операция отменена");
                    delete query_tfoms;
                    db_ODBC.close();
                    QSqlDatabase::removeDatabase("INKO_DBF");
                    return;
                }
                query_add_mt->next();
                id_mt = query_add_mt->value(0).toInt();
                delete query_add_mt;
            }

        } else {
            query_test_mt->next();
            id_mt = query_test_mt->value(0).toInt();
        }
        delete query_test_mt;






        // принудительно назначм врача на участок
        QString sql_ms_r_mt = "update spr_ms_r_mt "
                              "   set date_end='" + date_beg.toString("yyyy-MM-dd") + "' "
                              " where id_ms=" + QString::number(id_ms) + " "
                              "   and (date_beg +1)<'" + date_beg.toString("yyyy-MM-dd") + "' ; "

                              "insert into spr_ms_r_mt(id_ms, id_mt, prof_mt, date_beg, date_end) "
                              " values(" + QString::number(id_ms) + ", " + QString::number(id_mt) + ", 1, '" + date_beg.toString("yyyy-MM-dd") + "', NULL) "
                              " returning id ; ";

        QSqlQuery *query_ms_r_mt = new QSqlQuery(db);
        bool res_ms_r_mt = query_ms_r_mt->exec(sql_ms_r_mt);
        QString err_ms_r_mt = db.lastError().databaseText();
        if (!res_ms_r_mt) {
            delete query_ms_r_mt;
            QMessageBox::warning(this, "Ошибка назначения врача на участок",
                                 "При попытке назначить врача на участок произошла ошибка!\n\n"
                                 + sql_ms_r_mt + "\n\n"
                                 "Операция отменена");
            delete query_tfoms;
            db_ODBC.close();
            QSqlDatabase::removeDatabase("INKO_DBF");
            return;
        }
        delete query_ms_r_mt;
    }

    delete query_tfoms;
    db_ODBC.close();
    QSqlDatabase::removeDatabase("INKO_DBF");

    db.commit();

    QMessageBox::information(this, "Готово",
                             "Данные о врачах на участках успешно обновлены.");
}

void persons_wnd::on_act_gen_reester_vs2_triggered() {
    db.transaction();

    delete get_date_w;
    QDate date1 = QDate::currentDate(), date2 = QDate::currentDate();
    date1 = date2 = date1.addDays(-1);
    get_date_w = new get_date_wnd("Генерация реестра ВС задним числом",
                                  "Задайте дату, на которую надо сформировать реестр",
                                  true, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    //------------------------------------------------------------
    // генерация реестра
    //------------------------------------------------------------
    bool res = print_registry_vs(date1, date2);

    if (!res) {
        this->setCursor(Qt::ArrowCursor);
        db.rollback();
        QMessageBox::warning(this, "Отмена операции",
                             "Операция прервана из-за ошибки.");
        return;
    }

    db.commit();
    return;
}

void persons_wnd::on_act_gen_reester_oms2_triggered() {
    db.transaction();

    delete get_date_w;
    QDate date1 = QDate::currentDate(), date2;
    date1 = date2 = date1.addDays(-1);
    get_date_w = new get_date_wnd("Генерация реестра полисов задним числом",
                                  "Задайте дату, на которую надо сформировать реестр",
                                  true, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    //------------------------------------------------------------
    // генерация реестра
    //------------------------------------------------------------
    bool res = print_registry_oms(date1, date2);

    if (!res) {
        this->setCursor(Qt::ArrowCursor);
        db.rollback();
        QMessageBox::warning(this, "Отмена операции",
                             "Операция прервана из-за ошибки.");
        return;
    }

    db.commit();
    return;
}

void persons_wnd::on_act_guten_morgen_triggered() {
    on_bn_guten_Morgen_clicked();
}

void persons_wnd::on_act_guten_morgen_all_triggered() {
    this->setCursor(Qt::WaitCursor);
    // принудительное обновление стстусов застрахованных
    QSqlQuery *query = new QSqlQuery(db);
    QString sql = "select * from update_pers_links_all(NULL) ;";

    delete Gutten_Morgen_w;
    Gutten_Morgen_w = new beep_Guten_Morgen_wnd();
    Gutten_Morgen_w->show();
    QApplication::processEvents();

        if (!(mySQL.exec(this, sql, QString("Обновим статусы застрахованных"), *query, true, db, data_app))) {
            QMessageBox::warning(this, "Ошибка при обновлении статусов застрахованных",
                                 "При обновлении статусов застрахованных произошла неожиданная ошибка.\n" + sql + "\n\nОперация отменена.");
        } else {
            query->next();
            int cnt = query->value(0).toInt();
            if (cnt==10000) {
                QMessageBox::warning(this, "Надо повторить",
                                     "Обновлены статусы " + QString::number(cnt) + " застрахованных.\n\n"
                                     "Нажмите на кнопку ещё раз.");
            } else {
                refresh_persons_tab();
                QMessageBox::warning(this, "Доброе утро !!!",
                                     "Доброе утро.\n\n"
                                     "Обновлены статусы " + QString::number(cnt) + " застрахованных.");
            }
            ui->bn_guten_Morgen->setVisible(false);
        }
    Gutten_Morgen_w->hide();
    QApplication::processEvents();
    delete Gutten_Morgen_w;

    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_act_asglay_today_triggered() {
    delete print_assiglay_todate_w;
    print_assiglay_todate_w = new print_assiglay_todate_wnd(true, db, data_app, settings, this);
    print_assiglay_todate_w->exec();
}

void persons_wnd::on_act_asglay_todate_triggered() {
    delete print_assiglay_todate_w;
    print_assiglay_todate_w = new print_assiglay_todate_wnd(false, db, data_app, settings, this);
    print_assiglay_todate_w->exec();
}

void persons_wnd::on_act_vs4dates_triggered() {

    delete get_date_w;
    QDate date1 = QDate::currentDate(), date2 = QDate::currentDate();
    date1 = date2 = date1.addDays(-1);
    get_date_w = new get_date_wnd("Список ВС выданных за период",
                                  "Задайте дату или диапазон дат, на которую надо сформировать список выданных ВС",
                                  true, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    //------------------------------------------------------------
    // генерация реестра
    //------------------------------------------------------------
    QString sql = "select e.fam, e.im, e.ot, e.date_birth, coalesce(vs.enp, e.enp) as enp, \n"
                  "       replace(coalesce(ar.subj_name,'')||','||coalesce(ar.dstr_name,'')||','||coalesce(ar.city_name,'')||','||coalesce(ar.nasp_name,'')||','||coalesce(ar.strt_name,'')||','||coalesce(ar.house,0)||' '||coalesce(ar.corp,'')||coalesce(', '||ar.quart,''), ',,,,,0', '') as addr_reg, \n"
                  "       replace(coalesce(al.subj_name,'')||','||coalesce(al.dstr_name,'')||','||coalesce(al.city_name,'')||','||coalesce(al.nasp_name,'')||','||coalesce(al.strt_name,'')||','||coalesce(al.house,0)||' '||coalesce(al.corp,'')||coalesce(', '||al.quart,''), ',,,,,0', '') as addr_liv, \n"
                  "       coalesce(e.phone_cell, e.phone_home, e.phone_work) as phone, \n"
                  "       vs.date_begin, e.id_folder, case when e.rep_id is Null then 'получил лично' else 'получил представитель по доверенности' end as has_rep, "
                  "       evt.event_code \n"
                  "  from persons e \n"
                  "  left join polises vs on(e.id=vs.id_person and vs.pol_v=2) \n"
                  "  left join addresses ar on(ar.id=e.id_addr_reg) \n"
                  "  left join addresses al on(al.id=e.id_addr_liv) \n"
                  "  left join events evt on(evt.id_polis=vs.id and evt.event_code in('П010','П034','П035','П036','П061','П062','П063')) \n"
                  " where vs.date_begin>='" + date1.toString("yyyy-MM-dd") + "' \n"
                  "   and vs.date_begin<='" + date2.toString("yyyy-MM-dd") + "' \n"
                  " order by e.fam, e.im, e.ot, e.date_birth ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Список ВС выданных за период " + date1.toString("dd.MM.yyyy") + " - " + date2.toString("dd.MM.yyyy") + " ", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_combo_pers_assig_mo_currentIndexChanged(int index) {
    // получим
    QString sql_agn   = "select id_insure_agent1, id_insure_agent2 "
                        "  from spr_medorgs "
                        " where code_mo ='" + ui->combo_pers_assig_mo->currentData().toString() + "'"
                        "   and is_head=1 ; ";
    QSqlQuery *query_agn = new QSqlQuery(db);
    if (!mySQL.exec(this, sql_agn, "Получим ID страховых агентов, прикреплённых к этой МО", *query_agn, true, db, data_app)) {
        QMessageBox::critical(this, "Ошибка БД",
                              "При запросе страховых агентов по ЛПУ произошла ошибка.\n\n"
                              "Операция отменена.");
        return;
    }
    query_agn->next();
    int id_agent1 = query_agn->value(0).toInt();
    int id_agent2 = query_agn->value(1).toInt();
    delete query_agn;

    if (id_agent1>0)
        ui->combo_pers_insure_agent1->setCurrentIndex(ui->combo_pers_insure_agent1->findData(id_agent1));
    if (id_agent2>0)
        ui->combo_pers_insure_agent2->setCurrentIndex(ui->combo_pers_insure_agent2->findData(id_agent2));
}

void persons_wnd::on_combo_pers_insure_agent1_currentIndexChanged(int index) {
    ui->lab_insure_agents->setText("x1: " + ui->combo_pers_insure_agent1->currentText() + " ;  x2: " + ui->combo_pers_insure_agent2->currentText());
}
void persons_wnd::on_combo_pers_insure_agent2_currentIndexChanged(int index) {
    ui->lab_insure_agents->setText("x1: " + ui->combo_pers_insure_agent1->currentText() + " ;  x2: " + ui->combo_pers_insure_agent2->currentText());
}


void persons_wnd::on_act_resend_events_triggered() {
    delete resend_events_w;
    resend_events_w = new resend_events_wnd(db, data_app, settings);

    if (!resend_events_w->exec()) {
        QMessageBox::information(this, "Действие отменено пользователем", "Нажата кнопка [Отмена].\nДействие отменено пользователем.");
        return;
    }
}

void persons_wnd::on_ch_pers_pan_reg_text_clicked(bool checked) {
    ui->ln_pers_pan_reg_text->setEnabled(checked);
    if (!checked)
        ui->ln_pers_pan_reg_text->clear();
    else if (ui->ln_pers_pan_reg_text->text().isEmpty()) {
        QString s = ui->combo_pers_pan_reg_subj->currentText() + ", " +
                ui->combo_pers_pan_reg_dstr->currentText() + ", " +
                ui->combo_pers_pan_reg_city->currentText() + ", " +
                ui->combo_pers_pan_reg_nasp->currentText() + ", " +
                ui->combo_pers_pan_reg_strt->currentText() + ", " +
               (ui->combo_pers_pan_reg_hous->currentText()==" - нет - " ? QString(ui->ln_pers_pan_reg_hous->text() + "/" + ui->ln_pers_pan_reg_corp->text()) : ui->combo_pers_pan_reg_hous->currentText() ) + ", " +
                ui->ln_pers_pan_reg_qart->text();
        s = s.replace(" - нет - ", "");
        ui->ln_pers_pan_reg_text->setText( s );
        //ui->ln_pers_pan_reg_text->setText(ui->lab_pers_pan_address_reg->text());
    }
}

void persons_wnd::on_ch_pers_pan_liv_text_clicked(bool checked) {
    ui->ln_pers_pan_liv_text->setEnabled(checked);
    if (!checked)
        ui->ln_pers_pan_liv_text->clear();
    else if (ui->ln_pers_pan_liv_text->text().isEmpty()){
        QString s = ui->combo_pers_pan_liv_subj->currentText() + ", " +
                ui->combo_pers_pan_liv_dstr->currentText() + ", " +
                ui->combo_pers_pan_liv_city->currentText() + ", " +
                ui->combo_pers_pan_liv_nasp->currentText() + ", " +
                ui->combo_pers_pan_liv_strt->currentText() + ", " +
                (ui->combo_pers_pan_liv_hous->currentText()==" - нет - " ? QString(ui->ln_pers_pan_liv_hous->text() + "/" + ui->ln_pers_pan_liv_corp->text()) : ui->combo_pers_pan_liv_hous->currentText() ) + ", " +
                ui->ln_pers_pan_liv_qart->text();
        s = s.replace(" - нет - ", "");
        ui->ln_pers_pan_liv_text->setText( s );
        //ui->ln_pers_pan_liv_text->setText(ui->lab_pers_pan_address_liv->text());
    }
}













// ----------------------------------- //
// построение плана на диспансеризацию //
// ----------------------------------- //
// взрослые
void persons_wnd::on_act_disp_triggered() {
    if (!gen_disp_plan(2))
        QMessageBox::warning(this, "Отказ при генерации плана", "Не удалось сформировать новый план на диспансеризацию взрослых застрахованных (18 лет и старше).");
}
// дети (до 18)
void persons_wnd::on_act_disp_18_triggered() {
    if (!gen_disp_plan(1))
        QMessageBox::warning(this, "Отказ при генерации плана", "Не удалось сформировать новый план на диспансеризацию застрахованных детей (до 18 лет).");
}


bool persons_wnd::gen_disp_plan(int age) {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return false;
    }

    // запросим год диспансеризации
    delete get_year_w;
    get_year_w = new get_year_wnd("Год/квартал диспансеризации",
                                  "Выберите год/квартал, на который надо сформировать план по диспансеризации взрослых застрахованных.",
                                  false, true, QDate::currentDate().year(), (QDate::currentDate().month()-1)/3 +1, db, data_app, settings, this);
    if (!get_year_w->exec())
        return false;

    int year = get_year_w->year;
    int quarter = get_year_w->quarter;

    db.transaction();

    if ( quarter==1
         || quarter==2
         || quarter==3
         || quarter==4 ) {
        // это квартальный план
        if ( year<QDate::currentDate().year()
             || (year==QDate::currentDate().year() && quarter<((QDate::currentDate().month()-1)/3 +1) ) ) {
            db.rollback();
            QMessageBox::critical(this, "Ошибка в данных", "Выбранный год или квартал уже закончился.\nОтмена операции.");
            return false;
        }
        // проверим, есть ли готовый план на квартал
        QString sql_plan = "select quarter, count(*) as cnt "
                           "  from clinic.disp_plans "
                           " where year=" + QString::number(year) + " "
                           "   and quarter=" + QString::number(quarter) + " "
                           "   and age=" + QString::number(age) + " "
                           " group by quarter "
                           " order by quarter ; ";
        QSqlQuery *query_plan = new QSqlQuery(db);
        bool res_plan = query_plan->exec(sql_plan);
        QString err_plan = db.lastError().databaseText();
        if (!res_plan) {
            delete query_plan;
            db.rollback();
            QMessageBox::warning(this, "Ошибка при проверке существования плана диспансеризации",
                                 "При проверке существования плана диспансеризации произошла ошибка!\n\n"
                                 + sql_plan + "\n\n"
                                 "Операция отменена.");
            return false;
        }
        int cnt = 0;
        QString msg = QString("В базе данных уже есть план по ") + QString(age==1 ? "диспансеризации застрахованных детей" : (age==2 ? "диспансеризации взрослых застрахованных" : "прохождению профосмотров")) + " на " + QString::number(quarter) + " квартал " + QString::number(year) + " года. \n\n";
        while (query_plan->next()) {
            cnt += query_plan->value(1).toInt();
            msg += " - " + QString::number(query_plan->value(0).toInt()) + " квартал - " + QString::number(query_plan->value(1).toInt()) + " человек;\n";
        }
        delete query_plan;

        if ( cnt>0 ) {
            if ( QMessageBox::question(this, "Нужно подтверждение",
                                       msg + "\nДля повторного формирования плана по " + QString(age==1 ? "диспансеризации застрахованных детей" : (age==2 ? "диспансеризации взрослых застрахованных" : "прохождению профосмотров")) + " на " + QString::number(quarter) + " квартал " + QString::number(year) + " года надо будет удалить старую версию. "
                                       "При этом список направленных на диспансеризацию может измениться.\n"
                                       "Это необратимая операция.\n\n"
                                       "Продолжить?", QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes ) {
                // удалим старый план диспансеризации
                QString sql_del = "delete from clinic.disp_plans "
                                  " where year=" + QString::number(year) + " "
                                  "   and quarter=" + QString::number(quarter) + " "
                                  "   and age=" + QString::number(age) + " ; ";
                QSqlQuery *query_del = new QSqlQuery(db);
                bool res_del = query_del->exec(sql_del);
                QString err_del = db.lastError().databaseText();
                if (!res_del) {
                    delete query_del;
                    db.rollback();
                    QMessageBox::warning(this, "Ошибка при попытке удалить план диспансеризации",
                                         "При попытке удалить план диспансеризации произошла ошибка!\n\n"
                                         + sql_del + "\n\n"
                                         "Операция отменена.");
                    return false;
                }
                delete query_del;

            } else {
                db.rollback();
                return false;
            }
        }

    } else {
        // зто поквартальный годовой план
        if (year<QDate::currentDate().year()) {
            QMessageBox::critical(this, "Ошибка в данных", "Выбранный год уже закончился.\nОтмена операции.");
            return false;
        }
        // проверим, есть ли готовый план
        QString sql_plan = "select quarter, count(*) as cnt "
                           "  from clinic.disp_plans "
                           " where year=" + QString::number(year) + " "
                           "   and age=" + QString::number(age) + " "
                           " group by quarter "
                           " order by quarter ; ";
        QSqlQuery *query_plan = new QSqlQuery(db);
        bool res_plan = query_plan->exec(sql_plan);
        QString err_plan = db.lastError().databaseText();
        if (!res_plan) {
            delete query_plan;
            QMessageBox::warning(this, "Ошибка при проверке существования плана диспансеризации",
                                 "При проверке существования плана диспансеризации произошла ошибка!\n\n"
                                 + sql_plan + "\n\n"
                                 "Операция отменена.");
            db.rollback();
            return false;
        }
        int cnt = 0;
        QString msg = QString("В базе данных уже есть план по ") + QString(age==1 ? "диспансеризации застрахованных детей" : (age==2 ? "диспансеризации взрослых застрахованных" : "прохождению профосмотров")) + " на " + QString::number(year) + " год. \n\n";
        while (query_plan->next()) {
            cnt += query_plan->value(1).toInt();
            msg += " - " + QString::number(query_plan->value(0).toInt()) + " квартал - " + QString::number(query_plan->value(1).toInt()) + " человек;\n";
        }
        delete query_plan;

        if ( cnt>0 ) {
            if ( QMessageBox::question(this, "Нужно подтверждение",
                                       msg + "\nДля повторного формирования плана по " + QString(age==1 ? "диспансеризации застрахованных детей" : (age==2 ? "диспансеризации взрослых застрахованных" : "прохождению профосмотров")) + " на " + QString::number(year) + " год надо будет удалить старую версию. "
                                       "При этом список направленных на диспансеризацию может измениться.\n"
                                       "Это необратимая операция.\n\n"
                                       "Продолжить?", QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes ) {
                // удалим старый план диспансеризации
                QString sql_del = "delete from clinic.disp_plans "
                                  " where year=" + QString::number(year) + " "
                                  "   and age=" + QString::number(age) + " ; ";
                QSqlQuery *query_del = new QSqlQuery(db);
                bool res_del = query_del->exec(sql_del);
                QString err_del = db.lastError().databaseText();
                if (!res_del) {
                    delete query_del;
                    db.rollback();
                    QMessageBox::warning(this, "Ошибка при попытке удалить план диспансеризации",
                                         "При попытке удалить план диспансеризации произошла ошибка!\n\n"
                                         + sql_del + "\n\n"
                                         "Операция отменена.");
                    return false;
                }
                delete query_del;

            } else {
                db.rollback();
                return false;
            }
        }
    }

    // запрос числа персон, попадающих на диспансеризацию на этот год
    QString sql_cnt  = "select count(*) "
                       "  from persons e \n"
                       "  left join persons_assig a on(a.id_person=e.id and a.is_actual=0) \n"
                       " where a.code_mo is not NULL \n"                                       // прикреплён к МО
                       "   and st_person(e.id, '" + QString::number(year) + "-12-31') in(1,2,3,4,11,12,13,14) \n"    // был/будет застрахован на конец года
                       "   and extract(year from e.date_birth) in(#YEARS#) ; ";

    // запрос всех, ещё не вошедьших в план диспансеризации на этот год
    QString sql_data = "select e.id, a.code_mo, mo.name_mo, a.code_mp, a.code_ms, \n"
                       "       e.fam, e.im, e.ot, e.date_birth, coalesce(p.enp, e.enp) as enp, \n"
                       "       coalesce(e.phone_cell, e.phone_home, e.phone_work) as phone, e.email, \n"
                       "       replace(coalesce(ar.subj_name,'')||','||coalesce(ar.dstr_name,'')||','||coalesce(ar.city_name,'')||','||coalesce(ar.nasp_name,'')||','||coalesce(ar.strt_name,'')||','||coalesce(ar.house,0)||' '||coalesce(ar.corp,'')||coalesce(', '||ar.quart,''), ',,,,,0', '') as addr_reg, \n"
                       "       replace(coalesce(al.subj_name,'')||','||coalesce(al.dstr_name,'')||','||coalesce(al.city_name,'')||','||coalesce(al.nasp_name,'')||','||coalesce(al.strt_name,'')||','||coalesce(al.house,0)||' '||coalesce(al.corp,'')||coalesce(', '||al.quart,''), ',,,,,0', '') as addr_liv, \n"
                       "       '-'"
                       "  from persons e \n"
                       "  left join clinic.disp_plans d on(d.year=" + QString::number(year) + " and e.id=d.id_person) \n"
                       "  left join polises p on(p.id=e.id_polis) \n"
                       "  left join persons_assig a on(a.id_person=e.id and a.is_actual=0) \n"
                       "  left join spr_medorgs mo on(mo.code_mo=a.code_mo and mo.is_head=1) \n"
                       "  left join addresses ar on(ar.id=e.id_addr_reg) \n"
                       "  left join addresses al on(al.id=e.id_addr_liv) \n"
                       " where a.code_mo is not NULL \n"                                       // прикреплён к МО
                       "   and d.id is NULL \n"                                                // ещё не включён в план
                       "   and st_person(e.id, '" + QString::number(year) + "-12-31') in(1,2,3,4,11,12,13,14) \n"    // был/будет застрахован на конец года
                       "   and extract(year from e.date_birth) in(#YEARS#) \n"                 // родился в один из годов диспансеризации
                       " order by a.code_mo, a.code_ms, e.fam, e.im, e.ot, e.date_birth ; ";
    // выберем годы
    QString s_years;
    if (age==1) {
        for (int i=0; i<18; i++) {
            if (i>0)  s_years += ",";
            s_years += QString::number(year - 17 + i);
        }
    }
    else if (age==2) {
        for (int i=0; i<50; i++) {
            if (i>0)  s_years += ",";
            s_years += QString::number(year - 18 - 3*i);
        }
    }
    else {
        for (int i=0; i<50; i++) {
            if (i>0)  s_years += ",";
            s_years += QString::number(year - 18 - 3*i -1);
            s_years += ",";
            s_years += QString::number(year - 18 - 3*i -2);
        }
    }
    sql_cnt  = sql_cnt .replace("#YEARS#", s_years);
    sql_data = sql_data.replace("#YEARS#", s_years);


    // ------------------------------- //
    // собственно подсчёт числа персон //
    // ------------------------------- //
    QSqlQuery *query_cnt = new QSqlQuery(db);
    bool res_cnt = query_cnt->exec(sql_cnt);
    QString err_cnt = db.lastError().databaseText();
    if (!res_cnt) {
        delete query_cnt;
        QMessageBox::warning(this, "Ошибка при подсчёте числа персон, попадающих на диспансеризацию на этот год",
                             "При подсчёте числа персон, попадающих на диспансеризацию на этот год произошла ошибка!\n\n"
                             + sql_cnt + "\n\n"
                             "Операция отменена.");
        db.rollback();
        return false;
    }
    query_cnt->next();
    int cnt_to_process = query_cnt->value(0).toInt();
    delete query_cnt;


    // -------------------------------------- //
    // собственно формирование плана и отчёта //
    // -------------------------------------- //
    QSqlQuery *query_data = new QSqlQuery(db);
    bool res_data = query_data->exec(sql_data.replace("\n", ""));
    QString err_data = db.lastError().databaseText();
    if (!res_data) {
        delete query_data;
        QMessageBox::warning(this, "Ошибка при попытке получить данные на план диспансеризации",
                             "При попытке получить данные на план диспансеризации произошла ошибка!\n\n"
                             + sql_data + "\n\n"
                             "Операция отменена.");
        db.rollback();
        return false;
    }
    // подсчитаем число застрахованных на квартал
    int cnt1=0, cnt2=0, cnt3=0, cnt4=0;
    switch (quarter) {
        case 1:
            cnt1 = (cnt_to_process*26)/100;
            break;
        case 2:
            cnt2 = (cnt_to_process*34)/100;
            break;
        case 3:
            cnt3 = (cnt_to_process*51)/100;
            break;
        case 4:
            cnt4 = cnt_to_process;
            break;
        default:
            cnt1 = (cnt_to_process*26)/100;
            cnt2 = (cnt_to_process*26)/100;
            cnt3 = (cnt_to_process*26)/100;
            cnt4 = cnt_to_process - ((cnt_to_process*26)/100)*3;
            break;
    }

    // переберём нужное количество строк запроса
    int n = 0;
    while (query_data->next()) {
        n++;
        if (cnt1>0)      { cnt1--; quarter = 1; }
        else if (cnt2>0) { cnt2--; quarter = 2; }
        else if (cnt3>0) { cnt3--; quarter = 3; }
        else if (cnt4>0) { cnt4--; quarter = 4; }
        else  break;

        int     id_person = query_data->value( 0).toInt();      //  id_person,
        QString code_mo   = query_data->value( 1).toString();   //  a.code_mo,
        QString name_mo   = query_data->value( 2).toString();   //  mo.name_mo,
        QString name_mp   = query_data->value( 3).toString();   //  a.code_mp,
        QString name_ms   = query_data->value( 4).toString();   //  a.code_ms,
        QString fam       = query_data->value( 5).toString();   //  e.fam,
        QString im        = query_data->value( 6).toString();   //  e.im,
        QString ot        = query_data->value( 7).toString();   //  e.ot,
        QDate   date_birth= query_data->value( 8).toDate();     //  e.date_birth,
        QString enp       = query_data->value( 9).toString();   //  coalesce(p.enp, e.enp) as enp,
        QString phone     = query_data->value(10).toString();   //  coalesce(e.phone_cell, e.phone_home, e.phone_work) as phone,
        QString email     = query_data->value(11).toString();   //  e.email,
        QString addr_r    = query_data->value(12).toString();   //  replace(coalesce(ar.subj_name,'')||','||coalesce(ar.dstr_name,'')||','||coalesce(ar.city_name,'')||','||coalesce(ar.nasp_name,'')||','||coalesce(ar.strt_name,'')||','||coalesce(ar.house,0)||' '||coalesce(ar.corp,'')||coalesce(', '||ar.quart,''), ',,,,,0', '') as addr_reg,
        QString addr_l    = query_data->value(13).toString();   //  replace(coalesce(al.subj_name,'')||','||coalesce(al.dstr_name,'')||','||coalesce(al.city_name,'')||','||coalesce(al.nasp_name,'')||','||coalesce(al.strt_name,'')||','||coalesce(al.house,0)||' '||coalesce(al.corp,'')||coalesce(', '||al.quart,''), ',,,,,0', '') as addr_liv,
        // добавим застрахованного в план
        QString sql_ins = "insert into clinic.disp_plans(id_person, year, quarter, age, status) "
                          "values (" + QString::number(id_person) + ", "
                          "        " + QString::number(year) + ", "
                          "        " + QString::number(quarter) + ", "
                          "        " + QString::number(age) + ", "
                          "        0 "
                          "); ";
        QSqlQuery *query_ins = new QSqlQuery(db);
        bool res_ins = query_ins->exec(sql_ins);
        QString err_ins = db.lastError().databaseText();
        /*if (!res_ins) {
            delete query_ins;
            QMessageBox::warning(this, "Ошибка при попытке добавить строку в план диспансеризации",
                                 "При попытке добавить строку в план диспансеризации произошла ошибка!\n\n"
                                 + sql_ins + "\n\n"
                                 "Операция отменена.");
            db.rollback();
            return false;
        }*/
    }

    delete query_data;
    db.commit();

    return true;

    //delete show_tab_w;
    //show_tab_w = new show_tab_wnd("Список застрахованных на диспансеризацию на " + QString::number(year) + " год - взрослые (с 21 года)", sql, db, data_app, this);
    //show_tab_w->exec();

}



























/*
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    // запросим год диспансеризации
    int year = QInputDialog::getInt(this, "Год диспансеризации",
                                    "Выберите год, на который надо сформировать план \n"
                                    "по диспансеризации для застрахованных до 18 лет.",
                                    QDate::currentDate().year(), 2000, 3000);

    QString sql = "select e.id, e.fam, e.im, e.ot, e.date_birth, e.phone_cell, e.email, coalesce(p.enp, e.enp) as enp, a.code_mo, mo.name_mo, \n"
                  "       ar.subj_name as r_subj, ar.dstr_name as r_dstr, ar.subj_name as r_city, ar.city_name as r_nasp, ar.nasp_name as r_strt, ar.house as r_house, ar.quart as r_quart, \n"
                  "       al.subj_name as l_subj, al.dstr_name as l_dstr, al.subj_name as l_city, al.city_name as l_nasp, al.nasp_name as l_strt, al.house as l_house, al.quart as l_quart \n"
                  "  from persons e \n"
                  "  left join polises p on(p.id=e.id_polis) \n"
                  "  left join persons_assig a on(a.id_person=e.id and a.is_actual=0) \n"
                  "  left join spr_medorgs mo on(mo.code_mo=a.code_mo and  mo.is_head=1) \n"
                  "  left join addresses ar on(ar.id=e.id_addr_reg) \n"
                  "  left join addresses al on(al.id=e.id_addr_liv) \n"
                  " where st_person(e.id, '" + QString::number(year) + "-12-31') in(1,2,3,4,11,12,13,14) \n"
                  "   and extract(year from e.date_birth) in(#YEARS#) \n"
                  " order by e.fam, e.im, e.ot, e.date_birth ; ";
    // выберем годы
    QString s_years;
    for (int i=0; i<18; i++) {
        if (i>0)  s_years += ",";
        s_years += QString::number(year - 17 + 1*i);
    }
    sql = sql.replace("#YEARS#", s_years);

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Список застрахованных на диспансеризацию на " + QString::number(year) + " год - дети (до 18 лет)", sql, db, data_app, this);
    show_tab_w->exec();
}

*/


// -------------------------------------- //
// подсчёт численности на диспансеризацию //
// -------------------------------------- //
void persons_wnd::on_act_disp_cnt_18_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    // запросим год диспансеризации
    delete get_year_w;
    get_year_w = new get_year_wnd("Год диспансеризации",
                                  "Выберите год, на который надо сформировать отчёт \n"
                                  "по численности подлежащих диспансеризации \n"
                                  "застрахованных до 18 лет.",
                                  false, true, QDate::currentDate().year(), QDate::currentDate().month()/3+1, db, data_app, settings, this);
    if (!get_year_w->exec()) {
        QMessageBox::warning(this, "Действие отменено", "Действие отменено пользователем");
        return;
    }
    int year = get_year_w->year;
    int quarter = get_year_w->quarter;

    QString sql = "select mo.code_mo, mo.name_mo, count(*) \n"
                  "  from persons e \n"
                  "  left join persons_assig a on(a.id_person=e.id and a.is_actual=0) \n"
                  "  left join spr_medorgs mo on(mo.code_mo=a.code_mo and  mo.is_head=1) \n"
                  " where #YEAR# "
                  "   and #QUARTER# "   // st_person(e.id, '" + QString::number(year) + "-12-31') in(1,2,3,4,11,12,13,14) \n"
                                        // "   and extract(year from e.date_birth) in(#YEARS#) \n"
                  " group by mo.code_mo, mo.name_mo \n"
                  " order by mo.code_mo, mo.name_mo ; ";
    // выберем годы
    QString s_years;
    for (int i=0; i<18; i++) {
        if (i>0)  s_years += ",";
        s_years += QString::number(year - 17 + 1*i);
    }
    sql = sql.replace("#YEARS#", s_years);

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Численность застрахованных, подлежащих диспансеризации в " + QString::number(year) + " году - дети (до 18 лет)", sql, db, data_app, this);
    show_tab_w->exec();
}


// дети (до 18)
void persons_wnd::on_act_disp_cnt_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    // запросим год диспансеризации
    int year = QInputDialog::getInt(this, "Год диспансеризации",
                                    "Выберите год, на который надо сформировать отчёт \n"
                                    "по численности подлежащих диспансеризации \n"
                                    "застрахованных старше 18 лет.",
                                    QDate::currentDate().year(), 2000, 3000);

    QString sql = "select mo.code_mo, mo.name_mo, count(*) \n"
                  "  from persons e \n"
                  "  left join persons_assig a on(a.id_person=e.id and a.is_actual=0) \n"
                  "  left join spr_medorgs mo on(mo.code_mo=a.code_mo and  mo.is_head=1) \n"
                  " where st_person(e.id, '" + QString::number(year) + "-12-31') in(1,2,3,4,11,12,13,14) \n"
                  "   and extract(year from e.date_birth) in(#YEARS#) \n"
                  " group by mo.code_mo, mo.name_mo \n"
                  " order by mo.code_mo, mo.name_mo ; ";
    // выберем годы
    QString s_years;
    for (int i=0; i<50; i++) {
        if (i>0)  s_years += ",";
        s_years += QString::number(year - 18 - 3*i);
    }
    sql = sql.replace("#YEARS#", s_years);

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Численность застрахованных, подлежащих диспансеризации в " + QString::number(year) + " году - взрослые (с 21 года)", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_disp_plans_triggered() {
    delete disp_plans_w;
    disp_plans_w = new disp_plans_wnd(db, data_app, settings, this);
    disp_plans_w->exec();
}

void persons_wnd::on_act_report_boxes_scan_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    /*QString sql = "select  bba.act_date, count(*) as cnt \n"
                  "  from blanks_pol bp \n"
                  "  left join blanks_boxes_acts bba on(bba.id=bp.id_blanks_box_act) \n"
                  " group by  bba.act_date \n"
                  " order by bba.act_date; ";*/

    QString sql = "select array_to_string(array_agg(q.id), ',') as ids, \n"
                  "        array_to_string(array_agg(q.box_num), ',') as box_nums, \n"
                  "        q.act_date, sum(q.cnt) \n"
                  "   from ( \n"
                  "     select bba.id, bba.box_num, bba.act_num, bba.act_date, count(*) as cnt \n"
                  "       from blanks_pol bp \n"
                  "       left join blanks_boxes_acts bba on(bba.id=bp.id_blanks_box_act) \n"
                  "      group by bba.id, bba.act_num, bba.act_date \n"
                  //"     having bba.act_date>'2015-12-01' \n"
                  "      order by bba.act_num, bba.act_date \n"
                  "   ) q \n"
                  "  group by q.act_date \n"
                  "  order by q.act_date ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Группировка бланков полисов по дате их получения из ТФОМС по акту", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_ch_retro_clicked(bool checked) {
    b_retro_data(checked);
}

void persons_wnd::b_retro_data(bool checked) {
    // НАДО УТОЧНИТЬ, СОГЛАСЕН ЛИ ПОЛЬЗОВАТЛЬ НА ОТОБРАЖЕНИЕ ДАННЫХ ЗАДНИМ ЧИСЛОМ
    if ( checked &&
         QMessageBox::question(this, "Включить ретроспективный режим?",
                               "Вы действительно хотите включить ретроспективный режим отображения данных?\n\n"
                               "В этом режим е не доступны многие функции.\n"
                               "Кроме того, этот режим замедляет отображение данных.",
                               QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Cancel)==QMessageBox::Yes) {
        // отмена
        ui->date_retro->setDate(QDate::currentDate());
        ui->date_retro->setEnabled(true);

        ui->ch_tab_limit->setEnabled(false);
        ui->ch_tab_limit->setChecked(true);

        ui->split_pol_act->setVisible(false);

        ui->frame_bn_perstab->setEnabled(false);
        ui->group_person_data->setEnabled(false);
        ui->group_person_docs->setEnabled(false);
        ui->frame_bn_docs->setEnabled(false);
        ui->bn_pers_document->setEnabled(false);

    } else {
        ui->ch_retro->setChecked(false);
        ui->date_retro->setEnabled(false);

        ui->ch_tab_limit->setEnabled(true);

        ui->split_pol_act->setVisible(true);

        ui->frame_bn_perstab->setEnabled(true);
        ui->group_person_data->setEnabled(true);
        ui->group_person_docs->setEnabled(true);
        ui->frame_bn_docs->setEnabled(true);
        ui->bn_pers_document->setEnabled(false);
    }

    refresh_persons_tab();
}

void persons_wnd::on_date_retro_editingFinished() {
    refresh_persons_tab();
}


void persons_wnd::on_ch_folder_toggled(bool checked) {
    if (checked) {
        QPalette pal = this->palette();

        if (ui->ch_retro->isChecked()) {
            pal.setColor(QPalette::Window, QColor(200,190,160));
        } else {
            pal.setColor(QPalette::Window, QColor(220,207,104));
        }
        this->setPalette(pal);
        QApplication::processEvents();
    } else {
        QPalette pal = this->palette();

        if (ui->ch_retro->isChecked()) {
            pal.setColor(QPalette::Window, QColor(220,210,190));
        } else {
            pal.setColor(QPalette::Window, QColor(200,220,220));
        }
        this->setPalette(pal);
        QApplication::processEvents();
    }
}

void persons_wnd::on_ch_retro_toggled(bool checked) {
    if (checked) {
        QPalette pal = this->palette();

        if (ui->ch_folder->isChecked()) {
            pal.setColor(QPalette::Window, QColor(200,190,160));
        } else {
            pal.setColor(QPalette::Window, QColor(220,210,190));
        }
        this->setPalette(pal);
        QApplication::processEvents();
    } else {
        QPalette pal = this->palette();

        if (ui->ch_folder->isChecked()) {
            pal.setColor(QPalette::Window, QColor(220,207,104));
        } else {
            pal.setColor(QPalette::Window, QColor(200,220,220));
        }
        this->setPalette(pal);
        QApplication::processEvents();
    }
}

void persons_wnd::on_act_tab1_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(2015,01,01), date2 = QDate::currentDate();
    date2 = date2.addDays(-1);
    get_date_w = new get_date_wnd("Задайте диапазон дат генерации отчёта",
                                  "Задайте диапазон дат, на которую надо посчитать просроченные полисы ЕНП - в разрезе ПВП",
                                  true, false, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    // все ЕНП переданные по ПВП за период и не востребованных в срок (ВС истёк на 01.03.2017)
    /*QString sql = "select pt.id, pt.point_name, count(*) \n"
                  "  from blanks_pol bp \n"
                  "       join points pt on(pt.id=(select * from id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))) \n"
                  "       join persons e on(e.id=bp.id_person) \n"
                  "       join polises vs on(vs.pol_v=2 and vs.id=e.id_polis) \n"
                  " where e.status in(1,2,3,4,11,12,13,14)"
                  "   and ((select * from id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "')) is NULL \n"
                  "     or (select * from id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "'))<>pt.id ) \n"
                  "   and (select * from id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))=pt.id \n"
                  "   and (select * from st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))=0 \n"
                  "   and vs.date_end<'" + date2.toString("yyyy-MM-dd") + "' \n"
                  " group by pt.id, pt.point_name ; ";*/


    QString sql = "select q1.id, q1.point_name, q1.cnt as cnt_all, q2.cnt as cnt_exp, q1.cnt-q2.cnt as cnt_dif \n"
                  "  from \n"
                  "  ( select pt.id, pt.point_name, count(*) as cnt \n"
                  "      from blanks_pol bp \n"
                  "           join persons e on(e.id=bp.id_person) \n"
                  "           join points pt on(pt.id=(select * from id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))) \n"
                  "     where /*(select * from st_person(e.id, '" + date2.toString("yyyy-MM-dd") + "')) in(1,2,3,4,11,12,13,14) \n"
                  "       and*/ bp.date_add>='" + date1.toString("yyyy-MM-dd") + "' and bp.date_add<='" + date2.toString("yyyy-MM-dd") + "' and (select * from st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))=0 \n"
                  "     group by pt.id, pt.point_name \n"
                  "  ) q1 \n"
                  "  left join \n"
                  "  ( select pt.id, pt.point_name, count(*) as cnt \n"
                  "      from blanks_pol bp \n"
                  "           join persons e on(e.id=bp.id_person) \n"
                  "           join polises vs on(vs.pol_v=2 and vs.id=(select * from id_person_pol(e.id, '" + date2.toString("yyyy-MM-dd") + "'))) \n"
                  "           join points pt on(pt.id=(select * from id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))) \n"
                  "     where /*(select * from st_person(e.id, '" + date2.toString("yyyy-MM-dd") + "')) in(1,2,3,4,11,12,13,14) \n"
                  "       and*/ bp.date_add>='" + date1.toString("yyyy-MM-dd") + "' and bp.date_add<='" + date2.toString("yyyy-MM-dd") + "' and (select * from st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))=0 \n"
                  "       and vs.date_end<'" + date2.toString("yyyy-MM-dd") + "' \n"
                  "     group by pt.id, pt.point_name \n"
                  "  ) q2 on(q1.id=q2.id) ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Число ЕНП, полученных после " + date1.toString("yyyy-MM-dd") + " и не востребованных в срок до " + date2.toString("yyyy-MM-dd") + " - в разрезе ПВП", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_tab2_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(QDate::currentDate().year(), 1, 1), date2 = QDate(QDate::currentDate().year(), QDate::currentDate().month(), 1);
    get_date_w = new get_date_wnd("Задайте диапазон дат генерации отчёта",
                                  "Задайте диапазон дат, на которыые надо посчитать просроченные полисы ЕНП - в разрезе месяца выдачи ВС.\n\n"
                                  "1-я дата - предыдущая контрольная дата,\nнапример начало года.\n"
                                  "2-я дата - текущая контрольная дата,\nнапример начало месяца.",
                                  true, false, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    // все ЕНП переданные по ПВП за период и не востребованных в срок (ВС истёк на 01.03.2017)
    /*QString sql = "select extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx', count(*) \n"
                  "  from blanks_pol bp \n"
                  "       join persons e on(e.id=bp.id_person) \n"
                  "       join polises vs on(vs.pol_v=2 and vs.id=(select * from id_person_pol(e.id, '" + date2.toString("yyyy-MM-dd") + "'))) \n"
                  " where / *e.status in(1,2,3,4,11,12,13,14)"
                  "   and* / (select * from st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))=0 \n"
                  "   and vs.date_begin>'" + date1.toString("yyyy-MM-dd") + "' \n"
                  "   and vs.date_end<'" + date2.toString("yyyy-MM-dd") + "' \n"
                  " group by extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' \n"
                  " order by extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' ; ";*/

    QString sql = "select q2.month, q1.cnt as cnt_" + date1.toString("yyyyMMdd") + ", q2.cnt as cnt_" + date2.toString("yyyyMMdd") + ", (q1.cnt-q2.cnt) as cnt_dec \n"
                  "  from \n"
                  "  ( select extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' as month, count(*) as cnt \n"
                  "      from blanks_pol bp \n"
                  "           join persons e on(e.id=bp.id_person) \n"
                  "           join polises vs on(vs.pol_v=2 and vs.id=(select * from id_person_pol(e.id, '" + date1.toString("yyyy-MM-dd") + "'))) \n"
                  "     where /*e.status in(1,2,3,4,11,12,13,14) \n"
                  "       and*/ (select * from st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "'))=0 \n"
                  "       and vs.date_end<'" + date1.toString("yyyy-MM-dd") + "' \n"
                  "     group by extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' \n"
                  "     order by extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' \n"
                  "  ) q1 \n"
                  "  right join \n"
                  "  ( select extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' as month, count(*) as cnt \n"
                  "      from blanks_pol bp \n"
                  "           join persons e on(e.id=bp.id_person) \n"
                  "           join polises vs on(vs.pol_v=2 and vs.id=(select * from id_person_pol(e.id, '" + date2.toString("yyyy-MM-dd") + "'))) \n"
                  "     where /*e.status in(1,2,3,4,11,12,13,14) \n"
                  "       and*/ (select * from st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))=0 \n"
                  "       and vs.date_end<'" + date2.toString("yyyy-MM-dd") + "' \n"
                  "     group by extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' \n"
                  "     order by extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' \n"
                  "  ) q2 on(q1.month=q2.month) \n"
                  " order by q2.month ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Число ЕНП, полученных после " + date1.toString("yyyy-MM-dd") + " и не востребованных в срок до " + date2.toString("yyyy-MM-dd") + " - в разрезе месяца выдачи ВС", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_pol2points_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(QDate::currentDate().year(), 1, 1), date2 = QDate(QDate::currentDate().year(), QDate::currentDate().month(), 1);
    get_date_w = new get_date_wnd("Задайте диапазон дат генерации отчёта",
                                  "Задайте диапазон дат, на которые надо узнать расход и остаток полисов ЕНП - в разрезе ПВП.\n\n"
                                  "1-я дата - предыдущая контрольная дата,\nнапример начало года.\n"
                                  "2-я дата - текущая контрольная дата,\nнапример начало месяца.",
                                  true, false, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    /*QString sql = "select q2.month, q1.cnt as cnt_" + date1.toString("yyyyMMdd") + ", q2.cnt as cnt_" + date2.toString("yyyyMMdd") + ", (q1.cnt-q2.cnt) as cnt_dec \n"
                  "  from \n"
                  "  ( select extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' as month, count(*) as cnt \n"
                  "      from blanks_pol bp \n"
                  "           join persons e on(e.id=bp.id_person) \n"
                  "           join polises vs on(vs.pol_v=2 and vs.id=(select * from id_person_pol(e.id, '" + date1.toString("yyyy-MM-dd") + "'))) \n"
                  "     where  (select * from st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "'))=0 \n"
                  "       and vs.date_end<'" + date1.toString("yyyy-MM-dd") + "' \n"
                  "     group by extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' \n"
                  "     order by extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' \n"
                  "  ) q1 \n"
                  "  right join \n"
                  "  ( select extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' as month, count(*) as cnt \n"
                  "      from blanks_pol bp \n"
                  "           join persons e on(e.id=bp.id_person) \n"
                  "           join polises vs on(vs.pol_v=2 and vs.id=(select * from id_person_pol(e.id, '" + date2.toString("yyyy-MM-dd") + "'))) \n"
                  "     where  (select * from st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))=0 \n"
                  "       and vs.date_end<'" + date2.toString("yyyy-MM-dd") + "' \n"
                  "     group by extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' \n"
                  "     order by extract(year from vs.date_begin)||'-'||right('00'||extract(month from vs.date_begin),2)||'-xx' \n"
                  "  ) q2 on(q1.month=q2.month) \n"
                  " order by q2.month ; ";*/

    QString sql = "select q1.id, q1.point_name, q1.cnt as cnt_" + date1.toString("yyyyMMdd") + ", q2.cnt as cnt_activate, q3.cnt as cnt_" + date2.toString("yyyyMMdd") + " \n"
                  "  from \n"
                  "  ( /* полисы, 1го января лежавшие на ПВП */ \n"
                  "    select pt.id, pt.point_name, count(*) as cnt \n"
                  "      from blanks_pol bp \n"
                  "           join persons e on(e.id=bp.id_person) \n"
                  "           join points pt on(pt.id=(select * from id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "'))) \n"
                  "     where bp.date_add<='" + date1.toString("yyyy-MM-dd") + "' \n"
                  "       and (select * from st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "'))=0 \n"
                  "     group by pt.id, pt.point_name \n"
                  "  ) q1 \n"
                  "  left join \n"
                  "  ( /* полисы, выданные на ПВП с 1 января по 1 марта */ \n"
                  "    select pt.id, pt.point_name, count(*) as cnt \n"
                  "      from blanks_pol bp \n"
                  "           join persons e on(e.id=bp.id_person) \n"
                  "           join points pt on(pt.id=(select * from id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))) \n"
                  "     where ((select * from st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "')) is NULL \n"
                  "          or(select * from st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "'))=0) \n"
                  "       and (select * from st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "')) not in(0,4) \n"
                  "     group by pt.id, pt.point_name \n"
                  "  ) q2 on(q1.id=q2.id) \n"
                  "  left join \n"
                  "  ( /* полисы, 1го марта лежавшие на ПВП */ \n"
                  "    select pt.id, pt.point_name, count(*) as cnt \n"
                  "      from blanks_pol bp \n"
                  "           join persons e on(e.id=bp.id_person) \n"
                  "           join points pt on(pt.id=(select * from id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))) \n"
                  "     where bp.date_add<='" + date2.toString("yyyy-MM-dd") + "' \n"
                  "       and (select * from st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "'))=0 \n"
                  "     group by pt.id, pt.point_name \n"
                  "  ) q3 on(q3.id=q1.id) ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Расход и остатки бланков на ПВП за период с " + date1.toString("yyyy-MM-dd") + " до " + date2.toString("yyyy-MM-dd") + " - в разрезе ПВП", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_bn_pers_archive_clicked() {
    if (ui->ch_retro->isChecked())  // в ретро-режиме не доступно
        return;

    if (!db.isOpen()) {
        QMessageBox::warning(this, "Нет доступа к базе данных",
                             "Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n "
                             "Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику.");
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Нажмите кнопку [Поиск] и выберите человека из списка.");
        return;
    }

    // проверим выделенную строку
    QModelIndexList indexes = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes.size()>0) {
        QString str = QInputDialog::getText(this,"Введите пароль",
                                            QString("Вы действительно хотите пометить выбранную запись (записи) на \n"
                                                    "перемещение в архив?\n\n"
                                                    "Помеченные на перемещение в архив записи действительно перейдут \n"
                                                    "в архивный пул в течение суток, во время ближайшего планового \n"
                                                    "обновления статусов персон. \n"
                                                    "Архивные данные полностью недоступны из интерфейса программы.\n\n"
                                                    "Для помещения выбранной персоны в архив введите пароль\n") +
                                            (data_app.is_head||data_app.is_tech ? "УПАКОВКА" : "***")).toUpper();
        if (str.isEmpty()) {
            return;
        } else if (str!="УПАКОВКА" && str!="EGFRJDRF") {
            QMessageBox::warning(this,"Отказ","Неправильный пароль");
            return;
        }

        this->setCursor(Qt::WaitCursor);
        QModelIndex index = indexes.front();

        // данные застрахованного
        int id_person = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();       // e.id

        // попробуем поместить запись персоны в архив
        QSqlQuery *query_arch = new QSqlQuery(db);
        QString sql_arch = "";
        sql_arch += "select * from update_pers_archive(" + QString::number(id_person) + ") ; ";
        if (!(mySQL.exec(this, sql_arch, QString("Перенос персоны в архив"), *query_arch, true, db, data_app))) {
            delete query_arch;
            QMessageBox::warning(this, "Ошибка при переносе персоны в архив",
                                 "При переносе персоны в архив произошла неожиданная ошибка.\n" + sql_arch + "\n\nОперация отменена.");
            db.rollback();
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        while (query_arch->next()) {
            int res_arch = query_arch->value(0).toInt();
            switch (res_arch) {
            case 1:
                QMessageBox::information(this, "Данные персоны перенесены в архив",
                                         "Запись персоны помечена на перенос в пул архивных данных.\n"
                                         "Реальный перенос этой записи в архив произойдёт в течение суток, во время ближайшего планового обновления статусов персон.");
                break;
            case 0:
                QMessageBox::warning(this, "Запись ещё используется!",
                                     "Эта запись персоны не может быть перенесена в архив, поскольку у персоны есть незакрытые полисы "
                                     "или данная персона является представителем других застрахованных в нашей СМО.");
                break;
            case-1:
                QMessageBox::critical(this, "Данные персоны не найдены!!!",
                                      "Данные персоны не найдены!\n"
                                      "Информация о персоне была удалена вручную?");
                break;
            default:
                QMessageBox::critical(this, "??? Непонятно ???",
                                      "Надо разобраться...");
                break;
            }
        }
        delete query_arch;

        this->setCursor(Qt::ArrowCursor);
        refresh_persons_tab();

    } else {
        QMessageBox::warning(this, "Ничего не выбрано!", "Ничего не выбрано!");
    }
}

void persons_wnd::on_bn_pers_unarch_clicked() {
    if (ui->ch_retro->isChecked())  // в ретро-режиме не доступно
        return;

    if (!db.isOpen()) {
        QMessageBox::warning(this, "Нет доступа к базе данных",
                             "Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n "
                             "Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику.");
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Нажмите кнопку [Поиск] и выберите человека из списка.");
        return;
    }

    // проверим выделенную строку
    QModelIndexList indexes = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes.size()>0) {
        QString str = QInputDialog::getText(this,"Введите пароль",
                                            QString("Вы действительно хотите извлеч выбранную запись (записи) из архива?\n\n"
                                                    "Для извлечения выбранной персоны из архива введите пароль\n") +
                                            (data_app.is_head||data_app.is_tech ? "РАСПАКОВКА" : "***")).toUpper();
        if (str.isEmpty()) {
            return;
        } else if (str!="РАСПАКОВКА" && str!="HFCGFRJDRF") {
            QMessageBox::warning(this,"Отказ","Неправильный пароль");
            return;
        }

        this->setCursor(Qt::WaitCursor);
        QModelIndex index = indexes.front();

        // данные застрахованного
        int id_person = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();       // e.id

        // попробуем поместить запись персоны в архив
        QSqlQuery *query_arch = new QSqlQuery(db);
        QString sql_arch = "";
        sql_arch += "select * from update_pers_unarchive(" + QString::number(id_person) + ") ; ";
        if (!(mySQL.exec(this, sql_arch, QString("Извлечение персоны из архива"), *query_arch, true, db, data_app))) {
            delete query_arch;
            QMessageBox::warning(this, "Ошибка при извлечении персоны из архива",
                                 "При извлечении персоны из архива произошла неожиданная ошибка.\n" + sql_arch + "\n\nОперация отменена.");
            db.rollback();
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        while (query_arch->next()) {
            int res_arch = query_arch->value(0).toInt();
            switch (res_arch) {
            case 1:
                QMessageBox::information(this, "Данные персоны извлечены из архива",
                                         "Запись персоны извлечена из архива.");
                break;
            case 0:
                QMessageBox::warning(this, "Не подходящий статус персоны!",
                                     "Запись персоны найдена, но она и так не в архиве.\n"
                                     "Делать ничего не надо. Операция отменена.");
                break;
            case-1:
                QMessageBox::critical(this, "Данные персоны не найдены!!!",
                                      "Данные персоны не найдены!\n"
                                      "Информация о персоне была удалена вручную?");
                break;
            default:
                QMessageBox::critical(this, "??? Непонятно ???",
                                      "Надо разобраться...");
                break;
            }
        }
        delete query_arch;

        this->setCursor(Qt::ArrowCursor);
        refresh_persons_tab();

    } else {
        QMessageBox::warning(this, "Ничего не выбрано!", "Ничего не выбрано!");
    }
}

void persons_wnd::on_act_asgcnt_bydate_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date = QDate::currentDate();

    get_date_w = new get_date_wnd("Дата распределения прикреплённых по ЛПУ",
                                  "Выберите дату, по состоянию на которую надо оценить распределение прикреплённых застрахованных по ЛПУ.",
                                  false, true, true, true, date, date, db, data_app, settings);

    if (!get_date_w->exec()) {
        QMessageBox::information(this, "Действие отменено пользователем", "Дата не выбрана.\nДействие отменено пользователем.");
        return;
    }

    QString sql = "select a.code_mo, m.name_mo, count(*) as cnt \n"
                  "  from persons e \n"
                  "  left join persons_assig a on(a.id=(select * from id_person_asg(e.id, '" + date.toString("yyyy-MM-dd") + "'))) \n"
                  "  left join spr_medorgs m on(m.code_mo=a.code_mo and m.is_head=1) \n"
                  " where (select * from st_person(e.id, '" + date.toString("yyyy-MM-dd") + "')) in(1,2,3,4,11,12,13,14) \n"
                  " group by a.code_mo, m.name_mo \n"
                  " order by a.code_mo, m.name_mo ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Численность застрахованных прикреплённых к МО - на " + date.toString("dd.MM.yyyy") + "г", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_asgcnt_today_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    QString sql = "select a.code_mo, m.name_mo, count(*) as cnt \n"
                  "  from persons e \n"
                  "  left join link_persons_asg la on(la.id_person=e.id) "
                  "  left join persons_assig a on(a.id=la._id_asg) \n"
                  "  left join spr_medorgs m on(m.code_mo=a.code_mo and m.is_head=1) \n"
                  " where e.status in(1,2,3,4,5,11,12,13,14,15) \n"
                  " group by a.code_mo, m.name_mo \n"
                  " order by a.code_mo, m.name_mo ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Численность застрахованных прикреплённых к МО - на " + QDate::currentDate().toString("dd.MM.yyyy") + "г", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_ch_archive_clicked(bool checked)  {
    refresh_persons_tab();
}

void persons_wnd::on_ch_trash_clicked(bool checked)  {
    refresh_persons_tab();
}

void persons_wnd::on_act_newborners_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(QDate::currentDate().year(), 1, 1), date2 = QDate(QDate::currentDate().year(), QDate::currentDate().month(), 1);
    get_date_w = new get_date_wnd("Задайте диапазон дат генерации отчёта",
                                  "Задайте диапазон дат страхования новорождённых.\n",
                                  true, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    QString sql = "select fam, im, ot, sex, date_birth, event_code, event_dt, event_send \n"
                  "  from persons e \n"
                  "  left join polises p on(e.id=p.id_person) \n"
                  "  left join events evt on(evt.id_polis=p.id) \n"
                  " where evt.event_code='П010' \n"
                  "   and cast(evt.event_dt as date) - e.date_birth<365 \n"
                  "   and evt.event_dt>'" + date1.toString("yyyy-MM-dd") + " 00:00:00' \n"
                  "   and evt.event_dt<'" + date2.toString("yyyy-MM-dd") + " 23:59:59' \n"
                  " order by fam, im, ot, date_birth ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Страхование новорождённых за период с " + date1.toString("yyyy-MM-dd") + " до " + date2.toString("yyyy-MM-dd"), sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_outsiders_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(QDate::currentDate().year(), 1, 1), date2 = QDate(QDate::currentDate().year(), QDate::currentDate().month(), 1);
    get_date_w = new get_date_wnd("Задайте диапазон дат генерации отчёта",
                                  "Задайте диапазон дат страхования иностранцев.\n",
                                  true, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    QString sql = "select fam, im, ot, sex, date_birth, event_code, event_dt, event_send, d0.doc_type, d0.doc_ser, d0.doc_num, d0.doc_date, d0.doc_exp \n"
                  "  from persons e \n"
                  "  left join polises p on(e.id=p.id_person) \n"
                  "  left join events evt on(evt.id_polis=p.id) \n"
                  "  left join persons_docs d0 on(d0.id=id_person_udl(e.id, cast(evt.event_dt as date))) \n"
                  " where evt.event_code='П010' \n"
                  "   and (d0.doc_type in(9, 10, 12, 21, 24, 25, 26, 27, 28)) \n"
                  "   and evt.event_dt>'" + date1.toString("yyyy-MM-dd") + " 00:00:00' \n"
                  "   and evt.event_dt<'" + date2.toString("yyyy-MM-dd") + " 23:59:59' \n"
                  " order by fam, im, ot, date_birth ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Страхование иностранцев (по УДЛ) за период с " + date1.toString("yyyy-MM-dd") + " до " + date2.toString("yyyy-MM-dd"), sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_other_terr_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(QDate::currentDate().year(), 1, 1), date2 = QDate(QDate::currentDate().year(), QDate::currentDate().month(), 1);
    get_date_w = new get_date_wnd("Задайте диапазон дат генерации отчёта",
                                  "Задайте диапазон дат страхования лиц, переехавших из других регионов РФ (по событию).\n",
                                  true, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    QString sql = "select fam, im, ot, sex, date_birth, event_code, event_dt, event_send \n"
                  "  from persons e \n"
                  "  left join polises p on(e.id=p.id_person) \n"
                  "  left join events evt on(evt.id_polis=p.id) \n"
                  " where evt.event_code in('П032', 'П035') \n"
                  "   and evt.event_dt>'" + date1.toString("yyyy-MM-dd") + " 00:00:00' \n"
                  "   and evt.event_dt<'" + date2.toString("yyyy-MM-dd") + " 23:59:59' \n"
                  " order by fam, im, ot, date_birth ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Страхование лиц, переехавших из других регионов РФ (по событию), за период с " + date1.toString("yyyy-MM-dd") + " до " + date2.toString("yyyy-MM-dd"), sql, db, data_app, this);
    show_tab_w->exec();
}




QString persons_wnd::month_to_str(QDate date) {
    QString res;
    switch (date.month()) {
    case 1:
        res += "январь ";
        break;
    case 2:
        res += "февраль ";
        break;
    case 3:
        res += "март ";
        break;
    case 4:
        res += "апрель ";
        break;
    case 5:
        res += "май ";
        break;
    case 6:
        res += "июнь ";
        break;
    case 7:
        res += "июль ";
        break;
    case 8:
        res += "август ";
        break;
    case 9:
        res += "сентябрь ";
        break;
    case 10:
        res += "октябрь ";
        break;
    case 11:
        res += "ноябрь ";
        break;
    case 12:
        res += "декабрь ";
        break;
    default:
        break;
    }
    return res;
}

void persons_wnd::on_act_count2months_triggered() {

    // распаковка шаблона
    QString rep_folder = data_app.path_reports;
    // распаковка шаблона
    QString tmp_folder = data_app.path_out + "_REPORTS_/temp/";
    QString rep_template = rep_folder + "rep_count2dates.ods";

    if (!QFile::exists(rep_template)) {
        QMessageBox::warning(this,
                             "Шаблон не найден",
                             "Не найден шаблон печатной формы реестра выданных ВС: \n" + rep_template +
                             "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return;
    }
    QDir tmp_dir(tmp_folder);
    if (tmp_dir.exists(tmp_folder) && !tmp_dir.removeRecursively()) {
        QMessageBox::warning(this,
                             "Ошибка при очистке папки",
                             "Не удалось очистить папку временных файлов: \n" + tmp_folder +
                             "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return;
    }
    tmp_dir.mkpath(tmp_folder);
    QProcess myProcess;
    QString com = "\"" + data_app.path_arch + "7z.exe\" e \"" + rep_template + "\" -o\"" + tmp_folder + "\" content.xml";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка распаковки шаблона",
                             "Не удалось распаковать файл контента шаблона\n" + rep_template + " -> content.xml"
                             "\nпечатной формы во временную папку\n" + tmp_folder +
                             "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return;
    }
    com = "\"" + data_app.path_arch + "7z.exe\" e \"" + rep_template + "\" -o\"" + tmp_folder + "\" styles.xml";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка распаковки шаблона",
                             "Не удалось распаковать файл стилей шаблона \n" + rep_template + " -> styles.xml"
                             "\nпечатной формы во временную папку\n" + tmp_folder +
                             "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return;
    }


    // ===========================
    // правка контента шаблона
    // ===========================
    // открытие контента шаблона
    QFile f_content(tmp_folder + "/content.xml");
    f_content.open(QIODevice::ReadOnly);
    QString s_content = f_content.readAll();
    f_content.close();
    if (s_content.isEmpty()) {
        QMessageBox::warning(this,
                             "Файл контента шаблона пустой",
                             "Файл контента шаблона пустой. Возможно шаблон был испорчен.\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return;
    }
    // выбор шаблона
    int pos0 = s_content.indexOf("<table:table-row table:style-name=\"ro3\">", 0);
    int pos1 = s_content.indexOf("</table:table-row>", pos0) + 18;
    QString s_row = s_content.mid(pos0, pos1-pos0);

    // правка полей контента шаблона
    QString s_content_new = s_content.left(pos0);
    s_content_new = s_content_new
            .replace("#DATE#", QDate::currentDate().toString("dd.MM.yyyy"))
            .replace("#FILIAL_NAME#", data_app.filial_name);

    QDate date = QDate(2015,1,1);

    while (date<QDate::currentDate()) {
        QString sql = "select count(*) "
                      "  from persons e "
                      " where st_person(e.id, '" + date.toString("yyyy-MM-dd") + "') in(1,2,3,4,11,12,13,14) ; ";

        QSqlQuery *query = new QSqlQuery(db);
        if (!mySQL.exec(this, sql, "Численность застрахованных — по месяцам", *query, true, db, data_app)) {
            delete query;
            db.rollback();
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        query->next();

        QString s_row_new = s_row;
        QString year_monthg_s = QString::number(date.year()) + ", " + month_to_str(date);
        s_row_new = s_row_new.replace("#YEAR_MONTH#", year_monthg_s);
        s_row_new = s_row_new.replace("#CNT#", QString::number(query->value(0).toInt()));

        s_content_new += s_row_new;

        date = date.addMonths(1);
    }
    s_content_new += s_content.right(s_content.size()-pos1);

    // сохранение контента шаблона
    QFile f_content_save(tmp_folder + "/content.xml");
    f_content_save.open(QIODevice::WriteOnly);
    f_content_save.write(s_content_new.toUtf8());
    f_content_save.close();


    // ===========================
    // архивация шаблона
    // ===========================
    QString fname_res = data_app.path_out + "_REPORTS_/" +
            QDate::currentDate().toString("yyyy-MM-dd") + "  -  " + data_app.smo_short + " - " + data_app.filial_name + "  -  Численность застрахованных - по месяцам.ods";

    QFile::remove(fname_res);
    while (QFile::exists(fname_res)) {
        if (QMessageBox::warning(this,
                                 "Ошибка сохранения отчёта",
                                 "Не удалось сохранить отчёт: \n" + rep_template +
                                 "\n\nво временную папку\n" + fname_res +
                                 "\n\nПроверьте, не открыт ли целевой файл в сторонней программе и повторите операцию.",
                                 QMessageBox::Retry|QMessageBox::Abort,
                                 QMessageBox::Retry)==QMessageBox::Abort) {
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        QFile::remove(fname_res);
    }
    if (!QFile::copy(rep_template, fname_res) || !QFile::exists(fname_res)) {
        QMessageBox::warning(this, "Ошибка копирования отчёта", "Не удалось скопировать отчёт: \n" + rep_template + "\n\nво временную папку\n" + fname_res + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return;
    }
    com = "\"" + data_app.path_arch + "7z.exe\" a \"" + fname_res + "\" \"" + tmp_folder + "/content.xml\"";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка обновления контента",
                             "При добавлении нового контента в отчёт по бланкам ВС произошла непредвиденная ошибка\n\nОпреация прервана.");
    }

    // ===========================
    // собственно открытие шаблона
    // ===========================
    // открытие полученного ODT
    long result = (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_res.utf16()), 0, 0, SW_NORMAL);

    //close();
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_act_free_pol2point_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(QDate::currentDate().year(), 1, 1), date2=date1;
    get_date_w = new get_date_wnd("Задайте дату генерации отчёта",
                                  "Задайте дату генерации отчёта по числу не восстребованных бланков полисов единого образца в разрезе ПВП.\n",
                                  false, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    QString sql = "select pt.id, pt.point_name, count(*) as cnt \n"
                  "  from blanks_pol bp \n"
                  "  left join points pt on(pt.id=(select * from id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "'))) \n"
                  " where bp.date_add<='" + date1.toString("yyyy-MM-dd") + "' \n"
                  "   and (select * from st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "'))=0 \n"
                  " group by pt.id, pt.point_name ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Число не востребованных бланков полисов на " + date1.toString("yyyy-MM-dd") + " в разрезе ПВП ", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_free_pol2point_list_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(QDate::currentDate().year(), 1, 1), date2=date1;
    get_date_w = new get_date_wnd("Задайте дату генерации списков",
                                  "Задайте дату генерации списков не восстребованных бланков полисов единого образца в разрезе ПВП.\n",
                                  false, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    QString sql = "select pt.id, pt.point_name, bp.enp, bp.pol_ser, bp.pol_num \n"
                  "  from blanks_pol bp \n"
                  "  left join points pt on(pt.id=(select * from id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "'))) \n"
                  " where bp.date_add<='" + date1.toString("yyyy-MM-dd") + "' \n"
                  "   and (select * from st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "'))=0 \n"
                  " ORDER by pt.id, pt.point_name, bp.enp ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Списки не востребованных бланков полисов на " + date1.toString("yyyy-MM-dd") + " в разрезе ПВП ", sql, db, data_app, this);
    show_tab_w->exec();
}


void persons_wnd::on_act_free_vs2point_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(QDate::currentDate().year(), 1, 1), date2=date1;
    get_date_w = new get_date_wnd("Задайте дату генерации отчёта",
                                  "Задайте дату генерации отчёта по числу не потраченных бланков ВС в разрезе ПВП.\n",
                                  false, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    QString sql = "select pt.id, pt.point_name, count(*) as cnt \n"
                  "  from blanks_vs bv \n"
                  "  left join points pt on(pt.id=(select * from id_blank_vs_pnt(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "'))) \n"
                  " where bv.date_add<='" + date1.toString("yyyy-MM-dd") + "' \n"
                  "   and (select * from st_blank_vs(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "'))=0 \n"
                  " group by pt.id, pt.point_name ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Число не использованных бланков ВС на " + date1.toString("yyyy-MM-dd") + " в разрезе ПВП ", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_free_vs2point_list_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(QDate::currentDate().year(), 1, 1), date2=date1;
    get_date_w = new get_date_wnd("Задайте дату генерации списков",
                                  "Задайте дату генерации списков не потраченных бланков ВС в разрезе ПВП.\n",
                                  false, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    QString sql = "select pt.id, pt.point_name, bv.vs_num \n"
                  "  from blanks_vs bv \n"
                  "  left join points pt on(pt.id=(select * from id_blank_vs_pnt(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "'))) \n"
                  " where bv.date_add<='" + date1.toString("yyyy-MM-dd") + "' \n"
                  "   and (select * from st_blank_vs(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "'))=0 \n"
                  " ORDER by pt.id, pt.point_name, bv.vs_num ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Списки не использованных бланков ВС на " + date1.toString("yyyy-MM-dd") + " в разрезе ПВП ", sql, db, data_app, this);
    show_tab_w->exec();
}



void persons_wnd::on_act_spoil_vs2point_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(QDate::currentDate().year(), 1, 1), date2=date1;
    get_date_w = new get_date_wnd("Задайте дату генерации отчёта",
                                  "Задайте дату генерации отчёта по числу испорченных бланков ВС в разрезе ПВП.\n",
                                  false, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    QString sql = "select pt.id, pt.point_name, count(*) as cnt \n"
                  "  from blanks_vs bv \n"
                  "  left join points pt on(pt.id=(select * from id_blank_vs_pnt(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "'))) \n"
                  " where bv.date_add<='" + date1.toString("yyyy-MM-dd") + "' \n"
                  "   and (select * from st_blank_vs(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "'))=-1 \n"
                  " group by pt.id, pt.point_name ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Число испорченных бланков ВС на " + date1.toString("yyyy-MM-dd") + " в разрезе ПВП ", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_spoil_vs2point_list_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(QDate::currentDate().year(), 1, 1), date2=date1;
    get_date_w = new get_date_wnd("Задайте дату генерации списков",
                                  "Задайте дату генерации списков испорченных бланков ВС в разрезе ПВП.\n",
                                  false, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    QString sql = "select pt.id, pt.point_name, bv.vs_num \n"
                  "  from blanks_vs bv \n"
                  "  left join points pt on(pt.id=(select * from id_blank_vs_pnt(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "'))) \n"
                  " where bv.date_add<='" + date1.toString("yyyy-MM-dd") + "' \n"
                  "   and (select * from st_blank_vs(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "'))=-1 \n"
                  " ORDER by pt.id, pt.point_name, bv.vs_num ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Списки испорченных бланков ВС на " + date1.toString("yyyy-MM-dd") + " в разрезе ПВП ", sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_newENP4oldVS_triggered() {

    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate(QDate::currentDate().year(), 1, 1), date2 = QDate(QDate::currentDate().year(), QDate::currentDate().month(), 1);
    get_date_w = new get_date_wnd("Задайте дату просрочки и контрольную дату",
                                  "Задайте период наблюдения за работой по просроченным ВС.\n"
                                  "1-я дата  -  это дата на которую у застрахованных\n"
                                  "  на руках были просроченные ВС.\n"
                                  "2-я дата  -  это контрольная дата, по состоянию на\n"
                                  "  которую надо определить статус этих застрахованных.\n",
                                  true, false, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::warning(this, "Отмена операции",
                             "Операция отменена пользователем.");
        return;
    }

    QString sql = "select st_person(e.id, '" + date2.toString("yyyy-MM-dd") + "') as new_status, st.text as new_status_text, count(*) as cnt \n"
                  "  from persons e \n"
                  "  left join polises p on(p.id=(select id_person_pol(e.id, '" + date1.toString("yyyy-MM-dd") + "'))) \n"
                  "  left join spr_pers_status st on(st.code=(select st_person(e.id, '" + date2.toString("yyyy-MM-dd") + "'))) \n"
                  " where p.pol_v=2 \n"
                  "   and p.date_end<'" + date1.toString("yyyy-MM-dd") + "' \n"
                  " group by st_person(e.id, '" + date2.toString("yyyy-MM-dd") + "'), st.text \n"
                  " order by st_person(e.id, '" + date2.toString("yyyy-MM-dd") + "') ; ";

    delete show_tab_w;
    show_tab_w = new show_tab_wnd("Работа с ВС, просроченными на " + date1.toString("yyyy-MM-dd") + ", по состоянию на " + date2.toString("yyyy-MM-dd"), sql, db, data_app, this);
    show_tab_w->exec();
}

void persons_wnd::on_act_operator_timeline_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete print_operator_timeline_w;
    print_operator_timeline_w = new print_operator_timeline_wnd(db, data_app, settings, this);
    print_operator_timeline_w->exec();
}

void persons_wnd::on_act_BSO_vs_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate::currentDate(), date2 = QDate::currentDate();
    date1 = date2 = date1.addDays(-1);
    get_date_w = new get_date_wnd("Отчёт о наличии и движениии бланков ВС", "Задайте диапазон дат, за котрый надо получить отчёт о наличии и движении бланков строгой отчётности - ВС",
                                  true, false, true, true, date1, date2, db, data_app, settings, this);
    if (date1==date2)  date2 = date1.addDays(1);

    if (get_date_w->exec()) {
        date1 = date1.addDays(-1);
        //date2 = date2.addDays(-1);

        // собственно сформируем отчёт
        QString sql = "select q.* "
                      "  from (select NULL as id, '000' as point_regnum, 'Головной офис' as point_name, "
                      "               ( select count(distinct bv.vs_num) as cnt_old "
                      "                   from blanks_vs bv "
                      "                  where (select id_blank_vs_pnt(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "') is NULL ) ) as cnt_old, "
                      "               0 as cnt_old_spoil, "
                      "               0 as cnt_add, "
                      "               0 as cnt_add_spoil, "
                      "               ( select count(distinct bv.vs_num) as cnt_old "
                      "                   from blanks_vs bv "
                      "                  where (select id_blank_vs_pnt(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "') is NULL ) ) - "
                      "               ( select count(distinct bv.vs_num) as cnt_old "
                      "                from blanks_vs bv "
                      "               where (select id_blank_vs_pnt(bv.vs_num, '" + date2.toString("yyyy-MM-dd") + "') is NULL ) ) as cnt_dec, "
                      "               0 as cnt_dec_spoil, "
                      "               ( select count(distinct bv.vs_num) as cnt_old "
                      "                   from blanks_vs bv "
                      "                  where (select id_blank_vs_pnt(bv.vs_num, '" + date2.toString("yyyy-MM-dd") + "') is NULL ) ) as cnt_new, "
                      "               0 as cnt_new_spoil "

                      "        union "

                      "        select pt.id, pt.point_regnum, pt.point_name, "
                      "               q_old.cnt_old, "
                      "               q_old_spoil.cnt_old_spoil, "
                      "               q_add.cnt_add, "
                      "               q_add_spoil.cnt_add_spoil, "
                      "               /*q_dec.cnt_dec*/coalesce(q_old.cnt_old, 0) + coalesce(q_add.cnt_add, 0) - coalesce(q_new.cnt_new, 0) as cnt_dec, "
                      "               /*q_dec_spoil.cnt_dec_spoil*/coalesce(q_old_spoil.cnt_old_spoil, 0) + coalesce(q_add_spoil.cnt_add_spoil, 0) - coalesce(q_new_spoil.cnt_new_spoil, 0) as cnt_dec_spoil, "
                      "               q_new.cnt_new, "
                      "               q_new_spoil.cnt_new_spoil "
                      "          from points pt "
                      "          left join   /* были на ПВП */ "
                      "               ( select pt.point_regnum, count(distinct bv.vs_num) as cnt_old "
                      "                   from points pt "
                      "                   left join blanks_vs bv on ( pt.id=(select id_blank_vs_pnt(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "')) "
                      "                                           and st_blank_vs(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "') in(0,-1)) "
                      "                  group by pt.point_regnum ) q_old "
                      "              on(pt.point_regnum=q_old.point_regnum) "
                      "          left join   /* были на ПВП, испорченные */ "
                      "               ( select pt.point_regnum, count(distinct bv.vs_num) as cnt_old_spoil "
                      "                   from points pt "
                      "                   left join blanks_vs bv on ( pt.id=(select id_blank_vs_pnt(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "')) "
                      "                                           and st_blank_vs(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "')=-1 ) "
                      "                  group by pt.point_regnum ) q_old_spoil "
                      "              on(pt.point_regnum=q_old_spoil.point_regnum) "

                      "          left join   /* пришли на ПВП */ "
                      "               ( select pt.point_regnum, count(distinct bv.vs_num) as cnt_add "
                      "                   from points pt "
                      "                   left join blanks_vs bv on ( ( pt.id=(select id_blank_vs_pnt(bv.vs_num, '" + date2.toString("yyyy-MM-dd") + "')) /*and st_blank_vs(bv.vs_num, '" + date2.toString("yyyy-MM-dd") + "') in(0,-1)*/) "
                      "                                           AND ( (select id_blank_vs_pnt(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "')) is NULL or (select id_blank_vs_pnt(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "')) <> pt.id ) "
                      "                                           and ( (select st_blank_vs(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "')) is NULL or (select st_blank_vs(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "'))=0 ) ) "
                      "                  group by pt.point_regnum ) q_add "
                      "              on(pt.point_regnum=q_add.point_regnum) "
                      "          left join   /* пришли на ПВП, испорченные */ "
                      "               ( select  pt.point_regnum, count(distinct bv.vs_num) as cnt_add_spoil "
                      "                   from points pt "
                      "                   left join blanks_vs bv on ( ( ( (select id_blank_vs_pnt(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "')) is NULL or (select id_blank_vs_pnt(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "')) <> pt.id ) "
                      "                                              OR ( (select st_blank_vs(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "')) is NULL or (select st_blank_vs(bv.vs_num, '" + date1.toString("yyyy-MM-dd") + "')<>-1) ) ) "
                      "                                           and ( select id_blank_vs_pnt(bv.vs_num, '" + date2.toString("yyyy-MM-dd") + "') ) = pt.id "
                      "                                           and ( st_blank_vs(bv.vs_num, '" + date2.toString("yyyy-MM-dd") + "')=-1 ) ) "
                      "                  group by pt.point_regnum ) q_add_spoil "
                      "              on(pt.point_regnum=q_add_spoil.point_regnum) "

                      "          left join   /* остались на ПВП */ "
                      "               ( select pt.point_regnum, count(distinct bv.vs_num) as cnt_new "
                      "                   from points pt "
                      "                   left join blanks_vs bv on ( pt.id=(select id_blank_vs_pnt(bv.vs_num, '" + date2.toString("yyyy-MM-dd") + "')) "
                      "                                           and st_blank_vs(bv.vs_num, '" + date2.toString("yyyy-MM-dd") + "') in(0,-1) ) "
                      "                  group by pt.point_regnum ) q_new "
                      "              on(pt.point_regnum=q_new.point_regnum) "
                      "          left join   /* остались на ПВП, испорченные */ "
                      "               ( select pt.point_regnum, count(distinct bv.vs_num) as cnt_new_spoil "
                      "                   from points pt "
                      "                   left join blanks_vs bv on ( pt.id=(select id_blank_vs_pnt(bv.vs_num, '" + date2.toString("yyyy-MM-dd") + "')) "
                      "                                           and st_blank_vs(bv.vs_num, '" + date2.toString("yyyy-MM-dd") + "')=-1 ) "
                      "                  group by pt.point_regnum ) q_new_spoil "
                      "              on(pt.point_regnum=q_new_spoil.point_regnum) "
                      "         where pt.point_regnum is not NULL "
                      "           and pt.point_regnum<>'000' "
                      "       ) q "
                      " order by q.point_regnum ; ";

        QSqlQuery *query = new QSqlQuery(db);
        if (!mySQL.exec(this, sql, "Отчёт по движению бланков ВС в разрезе ПВП", *query, true, db, data_app)) {
            delete query;
            db.rollback();
            this->setCursor(Qt::ArrowCursor);
            return;
        }



        // распаковка шаблона
        QString rep_folder = data_app.path_reports;
        // распаковка шаблона
        QString tmp_folder = data_app.path_out + "_REPORTS_/temp/";
        QString rep_template = rep_folder + "bso_vs.ods";

        if (!QFile::exists(rep_template)) {
            QMessageBox::warning(this,
                                 "Шаблон не найден",
                                 "Не найден шаблон печатной формы отчёта по движению ВС в разрезе ПВП: \n" + rep_template +
                                 "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        QDir tmp_dir(tmp_folder);
        if (tmp_dir.exists(tmp_folder) && !tmp_dir.removeRecursively()) {
            QMessageBox::warning(this,
                                 "Ошибка при очистке папки",
                                 "Не удалось очистить папку временных файлов: \n" + tmp_folder +
                                 "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        tmp_dir.mkpath(tmp_folder);
        QProcess myProcess;
        QString com = "\"" + data_app.path_arch + "7z.exe\" e \"" + rep_template + "\" -o\"" + tmp_folder + "\" content.xml";
        if (myProcess.execute(com)!=0) {
            QMessageBox::warning(this,
                                 "Ошибка распаковки шаблона",
                                 "Не удалось распаковать файл контента шаблона\n" + rep_template + " -> content.xml"
                                 "\nпечатной формы во временную папку\n" + tmp_folder +
                                 "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        com = "\"" + data_app.path_arch + "7z.exe\" e \"" + rep_template + "\" -o\"" + tmp_folder + "\" styles.xml";
        if (myProcess.execute(com)!=0) {
            QMessageBox::warning(this,
                                 "Ошибка распаковки шаблона",
                                 "Не удалось распаковать файл стилей шаблона \n" + rep_template + " -> styles.xml"
                                 "\nпечатной формы во временную папку\n" + tmp_folder +
                                 "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }


        // ===========================
        // правка контента шаблона
        // ===========================
        date1 = date1.addDays(1);
        // открытие контента шаблона
        QFile f_content(tmp_folder + "/content.xml");
        f_content.open(QIODevice::ReadOnly);
        QString s_content = f_content.readAll();
        f_content.close();
        if (s_content.isEmpty()) {
            QMessageBox::warning(this,
                                 "Файл контента шаблона пустой",
                                 "Файл контента шаблона пустой. Возможно шаблон был испорчен.\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        // выбор шаблона
        int pos0 = s_content.indexOf("<table:table-row table:style-name=\"ro6\">", 0);
        int pos1 = s_content.indexOf("</table:table-row>", pos0) + 18;
        QString s_row = s_content.mid(pos0, pos1-pos0);

        // правка полей контента шаблона
        QString s_content_new = s_content.left(pos0);
        s_content_new = s_content_new
                .replace("#DATE_FROM#", date1.toString("dd.MM.yyyy"))
                .replace("#DATE_TO#",   date2.toString("dd.MM.yyyy"));


        // перебор строк отчёта
        int n = 0;
        int old=0, old_spoil=0, add=0, add_spoil=0, dec=0, dec_spoil=0, new_=0, new_spoil=0;
        int s_old=0, s_old_spoil=0, s_add=0, s_add_spoil=0, s_dec=0, s_dec_spoil=0, s_new=0, s_new_spoil=0;
        while (query->next()) {
            n++;
            QString s_row_new = s_row;

            QString point_regnum = query->value(1).toString();
            QString point_name   = query->value(2).toString();

            old = query->value(3).toInt();
            old_spoil = query->value(4).toInt();
            add = query->value(5).toInt();
            add_spoil = query->value(6).toInt();
            dec = query->value(7).toInt();
            dec_spoil = query->value(8).toInt();
            new_ = query->value(9).toInt();
            new_spoil = query->value(10).toInt();

            if (point_regnum!="000") {
                s_old += old;
                s_old_spoil += old_spoil;
                s_add += add;
                s_add_spoil += add_spoil;
                s_dec += dec;
                s_dec_spoil += dec_spoil;
                s_new += new_;
                s_new_spoil += new_spoil;
            }

            QString old_s = old!=0 ? QString::number(old) : "";
            QString old_spoil_s = old_spoil!=0 ? QString::number(old_spoil) : "";
            QString add_s = add!=0 ? QString::number(add) : "";
            QString add_spoil_s = add_spoil!=0 ? QString::number(add_spoil) : "";
            QString dec_s = dec!=0 ? QString::number(dec) : "";
            QString dec_spoil_s = dec_spoil!=0 ? QString::number(dec_spoil) : "";
            QString new_s = new_!=0 ? QString::number(new_) : "";
            QString new_spoil_s = new_spoil!=0 ? QString::number(new_spoil) : "";

            s_row_new = s_row_new
                    .replace("#N#", QString::number(n))
                    .replace("#POINT_NAME#", "(" + point_regnum + ")  " + point_name)
                    .replace("#OLD#",old_s)
                    .replace("#OLD_SPOIL#",old_spoil_s)
                    .replace("#ADD#",add_s)
                    .replace("#ADD_SPOIL#",add_spoil_s)
                    .replace("#DEC#",dec_s)
                    .replace("#DEC_SPOIL#",dec_spoil_s)
                    .replace("#NEW#",new_s)
                    .replace("#NEW_SPOIL#",new_spoil_s);

            s_content_new += s_row_new;
        }
        s_content_new += s_content.right(s_content.size()-pos1);

        QString s_old_s = s_old!=0 ? QString::number(s_old) : "";
        QString s_old_spoil_s = s_old_spoil!=0 ? QString::number(s_old_spoil) : "";
        QString s_add_s = s_add!=0 ? QString::number(s_add) : "";
        QString s_add_spoil_s = s_add_spoil!=0 ? QString::number(s_add_spoil) : "";
        QString s_dec_s = s_dec!=0 ? QString::number(s_dec) : "";
        QString s_dec_spoil_s = s_dec_spoil!=0 ? QString::number(s_dec_spoil) : "";
        QString s_new_s = s_new!=0 ? QString::number(s_new) : "";
        QString s_new_spoil_s = s_new_spoil!=0 ? QString::number(s_new_spoil) : "";

        s_content_new = s_content_new
                .replace("#S_OLD#",s_old_s)
                .replace("#S_OLD_SPOIL#",s_old_spoil_s)
                .replace("#S_ADD#",s_add_s)
                .replace("#S_ADD_SPOIL#",s_add_spoil_s)
                .replace("#S_DEC#",s_dec_s)
                .replace("#S_DEC_SPOIL#",s_dec_spoil_s)
                .replace("#S_NEW#",s_new_s)
                .replace("#S_NEW_SPOIL#",s_new_spoil_s);

        // сохранение контента шаблона
        QFile f_content_save(tmp_folder + "/content.xml");
        f_content_save.open(QIODevice::WriteOnly);
        f_content_save.write(s_content_new.toUtf8());
        f_content_save.close();


        // ===========================
        // архивация шаблона
        // ===========================
        QString fname_res = data_app.path_out + "_REPORTS_/" +
                QDate::currentDate().toString("yyyy-MM-dd") + "  -  " + data_app.smo_short + " - " + data_app.filial_name + "  -  Отчёт о движении бланков ВС в разрезе ПВП за период  " + date1.toString("dd.MM.yyyy") + " - " + date2.toString("dd.MM.yyyy") + ".ods";

        QFile::remove(fname_res);
        while (QFile::exists(fname_res)) {
            if (QMessageBox::warning(this,
                                     "Ошибка сохранения отчёта",
                                     "Не удалось сохранить отчёт: \n" + rep_template +
                                     "\n\nво временную папку\n" + fname_res +
                                     "\n\nПроверьте, не открыт ли целевой файл в сторонней программе и повторите операцию.",
                                     QMessageBox::Retry|QMessageBox::Abort,
                                     QMessageBox::Retry)==QMessageBox::Abort) {
                this->setCursor(Qt::ArrowCursor);
                return;
            }
            QFile::remove(fname_res);
        }
        if (!QFile::copy(rep_template, fname_res) || !QFile::exists(fname_res)) {
            QMessageBox::warning(this, "Ошибка копирования отчёта", "Не удалось скопировать отчёт: \n" + rep_template + "\n\nво временную папку\n" + fname_res + "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        com = "\"" + data_app.path_arch + "7z.exe\" a \"" + fname_res + "\" \"" + tmp_folder + "/content.xml\"";
        if (myProcess.execute(com)!=0) {
            QMessageBox::warning(this,
                                 "Ошибка обновления контента",
                                 "При добавлении нового контента в отчёт по бланкам ВС произошла непредвиденная ошибка\n\nОпреация прервана.");
        }

        // ===========================
        // собственно открытие шаблона
        // ===========================
        // открытие полученного ODT
        long result = (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_res.utf16()), 0, 0, SW_NORMAL);

        //close();
        this->setCursor(Qt::ArrowCursor);




    } else {
        QMessageBox::information(this, "Действие отменено пользователем", "Действие отменено пользователем");
    }
}


void persons_wnd::on_act_BSO_paper_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate::currentDate(), date2 = QDate::currentDate();
    date1 = date2 = date1.addDays(-1);
    get_date_w = new get_date_wnd("Отчёт о наличии и движениии бумажных бланков полисов единого образца", "Задайте диапазон дат, за котрый надо получить отчёт о наличии и движении бланков строгой отчётности - бумажные банки полисов",
                                  true, false, true, true, date1, date2, db, data_app, settings, this);
    if (date1==date2)  date2 = date1.addDays(1);

    if (get_date_w->exec()) {
        date1 = date1.addDays(-1);
        //date2 = date2.addDays(-1);

        // собственно сформируем отчёт
        QString sql = "select pt.id, pt.point_regnum, pt.point_name, "
                      "      q_old.cnt_old, q_add.cnt_add, /*q_dec.cnt_dec*/q_old.cnt_old + q_add.cnt_add - q_new.cnt_new, q_new.cnt_new "

                      "  from points pt "
                      "  left join "
                      "  /* были на ПВП */ "
                      "      ( select pt.point_regnum, count(distinct bp.id) as cnt_old "
                      "          from points pt "
                      "          left join blanks_pol bp on(pt.id=(select id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "')) AND st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "') in(0,-1) AND bp.f_polis=1) "
                      "         group by pt.point_regnum ) q_old "
                      "       on(pt.point_regnum=q_old.point_regnum) "

                      "  left join "
                      "  /* пришли на ПВП */ "
                      "      ( select pt.point_regnum, count(distinct bp.id) as cnt_add "
                      "          from points pt "
                      "          left join blanks_pol bp on ( bp.f_polis=1 "
                      "                                   AND ( (select id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "')) is NULL "
                      "                                      or (select id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "')) <> pt.id "
                      "                                      or (select st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "')=0 ) ) "
                      "                                   AND pt.id=(select id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "')) "
                      "                                   /*AND st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "') in(0,-1)*/ ) "
                      "         group by pt.point_regnum ) q_add "
                      "       on(pt.point_regnum=q_add.point_regnum) "

                      "  left join "
                      "  /* ушли с ПВП */ "
                      "      ( select pt.point_regnum, count(distinct bp.id) as cnt_dec "
                      "          from points pt "
                      "          left join blanks_pol bp on ( bp.f_polis=1 "
                      "                                   AND pt.id=(select id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "')) "
                      "                                   AND ( (select id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "')) is NULL "
                      "                                      or (select id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "')) <> pt.id "
                      "                                      or (select st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "') not in(0,-1)) ) "
                      "                                   AND st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "') in(0,-1) ) "
                      "         group by pt.point_regnum ) q_dec "
                      "       on(pt.point_regnum=q_dec.point_regnum) "

                      "  left join "
                      "  /* остались на ПВП */ "
                      "      ( select pt.point_regnum, count(distinct bp.id) as cnt_new "
                      "          from points pt "
                      "          left join blanks_pol bp on(pt.id=(select id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "')) AND st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "') in(0,-1) AND bp.f_polis=1) "
                      "         group by pt.point_regnum ) q_new "
                      "       on(pt.point_regnum=q_new.point_regnum) "

                      " where pt.point_regnum is not NULL "
                      "  AND pt.point_regnum<>'000' ; ";

        QSqlQuery *query = new QSqlQuery(db);
        if (!mySQL.exec(this, sql, "Отчёт по движению бумажных бланков полисов единого образца в разрезе ПВП", *query, true, db, data_app)) {
            delete query;
            db.rollback();
            this->setCursor(Qt::ArrowCursor);
            return;
        }



        // распаковка шаблона
        QString rep_folder = data_app.path_reports;
        // распаковка шаблона
        QString tmp_folder = data_app.path_out + "_REPORTS_/temp/";
        QString rep_template = rep_folder + "bso_paper.ods";

        if (!QFile::exists(rep_template)) {
            QMessageBox::warning(this,
                                 "Шаблон не найден",
                                 "Не найден шаблон печатной формы отчёта по движению бумажных банков полисов единого образца в разрезе ПВП: \n" + rep_template +
                                 "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        QDir tmp_dir(tmp_folder);
        if (tmp_dir.exists(tmp_folder) && !tmp_dir.removeRecursively()) {
            QMessageBox::warning(this,
                                 "Ошибка при очистке папки",
                                 "Не удалось очистить папку временных файлов: \n" + tmp_folder +
                                 "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        tmp_dir.mkpath(tmp_folder);
        QProcess myProcess;
        QString com = "\"" + data_app.path_arch + "7z.exe\" e \"" + rep_template + "\" -o\"" + tmp_folder + "\" content.xml";
        if (myProcess.execute(com)!=0) {
            QMessageBox::warning(this,
                                 "Ошибка распаковки шаблона",
                                 "Не удалось распаковать файл контента шаблона\n" + rep_template + " -> content.xml"
                                 "\nпечатной формы во временную папку\n" + tmp_folder +
                                 "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        com = "\"" + data_app.path_arch + "7z.exe\" e \"" + rep_template + "\" -o\"" + tmp_folder + "\" styles.xml";
        if (myProcess.execute(com)!=0) {
            QMessageBox::warning(this,
                                 "Ошибка распаковки шаблона",
                                 "Не удалось распаковать файл стилей шаблона \n" + rep_template + " -> styles.xml"
                                 "\nпечатной формы во временную папку\n" + tmp_folder +
                                 "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }


        // ===========================
        // правка контента шаблона
        // ===========================
        date1 = date1.addDays(1);
        // открытие контента шаблона
        QFile f_content(tmp_folder + "/content.xml");
        f_content.open(QIODevice::ReadOnly);
        QString s_content = f_content.readAll();
        f_content.close();
        if (s_content.isEmpty()) {
            QMessageBox::warning(this,
                                 "Файл контента шаблона пустой",
                                 "Файл контента шаблона пустой. Возможно шаблон был испорчен.\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        // выбор шаблона
        int pos0 = s_content.indexOf("<table:table-row table:style-name=\"ro6\">", 0);
        int pos1 = s_content.indexOf("</table:table-row>", pos0) + 18;
        QString s_row = s_content.mid(pos0, pos1-pos0);

        // правка полей контента шаблона
        QString s_content_new = s_content.left(pos0);
        s_content_new = s_content_new
                .replace("#DATE_FROM#", date1.toString("dd.MM.yyyy"))
                .replace("#DATE_TO#",   date2.toString("dd.MM.yyyy"));


        // перебор строк отчёта
        int n = 0;
        int old=0, add=0, dec=0, new_=0;
        int s_old=0, s_add=0, s_dec=0, s_new=0;
        while (query->next()) {
            n++;
            QString s_row_new = s_row;

            old = query->value(3).toInt();
            add = query->value(4).toInt();
            dec = query->value(5).toInt();
            new_ = query->value(6).toInt();

            s_old += old;
            s_add += add;
            s_dec += dec;
            s_new += new_;

            QString old_s = old!=0  ? QString::number(old)  : "";
            QString add_s = add!=0  ? QString::number(add)  : "";
            QString dec_s = dec!=0  ? QString::number(dec)  : "";
            QString new_s = new_!=0 ? QString::number(new_) : "";

            s_row_new = s_row_new
                    .replace("#N#", QString::number(n))
                    .replace("#POINT_NAME#", "(" + query->value(1).toString() + ")  " + query->value(2).toString())
                    .replace("#OLD#",old_s)
                    .replace("#ADD#",add_s)
                    .replace("#DEC#",dec_s)
                    .replace("#NEW#",new_s);

            s_content_new += s_row_new;
        }
        s_content_new += s_content.right(s_content.size()-pos1);

        QString s_old_s = s_old!=0 ? QString::number(s_old) : "";
        QString s_add_s = s_add!=0 ? QString::number(s_add) : "";
        QString s_dec_s = s_dec!=0 ? QString::number(s_dec) : "";
        QString s_new_s = s_new!=0 ? QString::number(s_new) : "";

        s_content_new = s_content_new
                .replace("#S_OLD#",s_old_s)
                .replace("#S_ADD#",s_add_s)
                .replace("#S_DEC#",s_dec_s)
                .replace("#S_NEW#",s_new_s);

        // сохранение контента шаблона
        QFile f_content_save(tmp_folder + "/content.xml");
        f_content_save.open(QIODevice::WriteOnly);
        f_content_save.write(s_content_new.toUtf8());
        f_content_save.close();


        // ===========================
        // архивация шаблона
        // ===========================
        QString fname_res = data_app.path_out + "_REPORTS_/" +
                QDate::currentDate().toString("yyyy-MM-dd") + "  -  " + data_app.smo_short + " - " + data_app.filial_name + "  -  Отчёт о движении бумажных бланков полисов единого образца в разрезе ПВП за период  " + date1.toString("dd.MM.yyyy") + " - " + date2.toString("dd.MM.yyyy") + ".ods";

        QFile::remove(fname_res);
        while (QFile::exists(fname_res)) {
            if (QMessageBox::warning(this,
                                     "Ошибка сохранения отчёта",
                                     "Не удалось сохранить отчёт: \n" + rep_template +
                                     "\n\nво временную папку\n" + fname_res +
                                     "\n\nПроверьте, не открыт ли целевой файл в сторонней программе и повторите операцию.",
                                     QMessageBox::Retry|QMessageBox::Abort,
                                     QMessageBox::Retry)==QMessageBox::Abort) {
                this->setCursor(Qt::ArrowCursor);
                return;
            }
            QFile::remove(fname_res);
        }
        if (!QFile::copy(rep_template, fname_res) || !QFile::exists(fname_res)) {
            QMessageBox::warning(this, "Ошибка копирования отчёта", "Не удалось скопировать отчёт: \n" + rep_template + "\n\nво временную папку\n" + fname_res + "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        com = "\"" + data_app.path_arch + "7z.exe\" a \"" + fname_res + "\" \"" + tmp_folder + "/content.xml\"";
        if (myProcess.execute(com)!=0) {
            QMessageBox::warning(this,
                                 "Ошибка обновления контента",
                                 "При добавлении нового контента в отчёт по бумажным бланкам полисов единого бразца произошла непредвиденная ошибка\n\nОпреация прервана.");
        }

        // ===========================
        // собственно открытие шаблона
        // ===========================
        // открытие полученного ODT
        long result = (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_res.utf16()), 0, 0, SW_NORMAL);

        //close();
        this->setCursor(Qt::ArrowCursor);




    } else {
        QMessageBox::information(this, "Действие отменено пользователем", "Действие отменено пользователем");
    }
}

void persons_wnd::on_act_BSO_electro_triggered() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate::currentDate(), date2 = QDate::currentDate();
    date1 = date2 = date1.addDays(-1);
    get_date_w = new get_date_wnd("Отчёт о наличии и движениии пластиковых бланков полисов единого образца", "Задайте диапазон дат, за котрый надо получить отчёт о наличии и движении бланков строгой отчётности - пластиковые банки полисов",
                                  true, false, true, true, date1, date2, db, data_app, settings, this);
    if (date1==date2)  date2 = date1.addDays(1);

    if (get_date_w->exec()) {
        date1 = date1.addDays(-1);
        //date2 = date2.addDays(-1);

        // собственно сформируем отчёт
        QString sql = "select pt.id, pt.point_regnum, pt.point_name, "
                      "      q_old.cnt_old, q_add.cnt_add, /*q_dec.cnt_dec*/q_old.cnt_old + q_add.cnt_add - q_new.cnt_new, q_new.cnt_new "

                      "  from points pt "
                      "  left join "
                      "  /* были на ПВП */ "
                      "      ( select pt.point_regnum, count(distinct bp.id) as cnt_old "
                      "          from points pt "
                      "          left join blanks_pol bp on(pt.id=(select id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "')) AND st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "') in(0,-1) AND bp.f_polis=2 ) "
                      "         group by pt.point_regnum ) q_old "
                      "       on(pt.point_regnum=q_old.point_regnum) "

                      "  left join "
                      "  /* пришли на ПВП */ "
                      "      ( select pt.point_regnum, count(distinct bp.id) as cnt_add "
                      "          from points pt "
                      "          left join blanks_pol bp on ( bp.f_polis=2 "
                      "                                   AND ( (select id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "')) is NULL "
                      "                                      or (select id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "')) <> pt.id "
                      "                                      or (select st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "')=0 ) ) "
                      "                                   AND pt.id=(select id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "')) "
                      "                                   /*AND st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "') in(0,-1)*/ ) "
                      "         group by pt.point_regnum ) q_add "
                      "       on(pt.point_regnum=q_add.point_regnum) "

                      "  left join "
                      "  /* ушли с ПВП */ "
                      "      ( select pt.point_regnum, count(distinct bp.id) as cnt_dec "
                      "          from points pt "
                      "          left join blanks_pol bp on ( bp.f_polis=2 "
                      "                                   AND pt.id=(select id_blank_pol_pnt(bp.id, '" + date1.toString("yyyy-MM-dd") + "')) "
                      "                                   AND ( (select id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "')) is NULL "
                      "                                      or (select id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "')) <> pt.id "
                      "                                      or (select st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "') not in(0,-1)) ) "
                      "                                   AND st_blank_pol(bp.id, '" + date1.toString("yyyy-MM-dd") + "') in(0,-1) ) "
                      "         group by pt.point_regnum ) q_dec "
                      "       on(pt.point_regnum=q_dec.point_regnum) "

                      "  left join "
                      "  /* остались на ПВП */ "
                      "      ( select pt.point_regnum, count(distinct bp.id) as cnt_new "
                      "          from points pt "
                      "          left join blanks_pol bp on(pt.id=(select id_blank_pol_pnt(bp.id, '" + date2.toString("yyyy-MM-dd") + "')) AND st_blank_pol(bp.id, '" + date2.toString("yyyy-MM-dd") + "') in(0,-1) AND bp.f_polis=2 ) "
                      "         group by pt.point_regnum ) q_new "
                      "       on(pt.point_regnum=q_new.point_regnum) "

                      " where pt.point_regnum is not NULL "
                      "  AND pt.point_regnum<>'000' ; ";

        QSqlQuery *query = new QSqlQuery(db);
        if (!mySQL.exec(this, sql, "Отчёт по движению электронных бланков полисов единого образца в разрезе ПВП", *query, true, db, data_app)) {
            delete query;
            db.rollback();
            this->setCursor(Qt::ArrowCursor);
            return;
        }



        // распаковка шаблона
        QString rep_folder = data_app.path_reports;
        // распаковка шаблона
        QString tmp_folder = data_app.path_out + "_REPORTS_/temp/";
        QString rep_template = rep_folder + "bso_electro.ods";

        if (!QFile::exists(rep_template)) {
            QMessageBox::warning(this,
                                 "Шаблон не найден",
                                 "Не найден шаблон печатной формы отчёта по движению электронных банков полисов единого образца в разрезе ПВП: \n" + rep_template +
                                 "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        QDir tmp_dir(tmp_folder);
        if (tmp_dir.exists(tmp_folder) && !tmp_dir.removeRecursively()) {
            QMessageBox::warning(this,
                                 "Ошибка при очистке папки",
                                 "Не удалось очистить папку временных файлов: \n" + tmp_folder +
                                 "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        tmp_dir.mkpath(tmp_folder);
        QProcess myProcess;
        QString com = "\"" + data_app.path_arch + "7z.exe\" e \"" + rep_template + "\" -o\"" + tmp_folder + "\" content.xml";
        if (myProcess.execute(com)!=0) {
            QMessageBox::warning(this,
                                 "Ошибка распаковки шаблона",
                                 "Не удалось распаковать файл контента шаблона\n" + rep_template + " -> content.xml"
                                 "\nпечатной формы во временную папку\n" + tmp_folder +
                                 "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        com = "\"" + data_app.path_arch + "7z.exe\" e \"" + rep_template + "\" -o\"" + tmp_folder + "\" styles.xml";
        if (myProcess.execute(com)!=0) {
            QMessageBox::warning(this,
                                 "Ошибка распаковки шаблона",
                                 "Не удалось распаковать файл стилей шаблона \n" + rep_template + " -> styles.xml"
                                 "\nпечатной формы во временную папку\n" + tmp_folder +
                                 "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }


        // ===========================
        // правка контента шаблона
        // ===========================
        date1 = date1.addDays(1);
        // открытие контента шаблона
        QFile f_content(tmp_folder + "/content.xml");
        f_content.open(QIODevice::ReadOnly);
        QString s_content = f_content.readAll();
        f_content.close();
        if (s_content.isEmpty()) {
            QMessageBox::warning(this,
                                 "Файл контента шаблона пустой",
                                 "Файл контента шаблона пустой. Возможно шаблон был испорчен.\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        // выбор шаблона
        int pos0 = s_content.indexOf("<table:table-row table:style-name=\"ro6\">", 0);
        int pos1 = s_content.indexOf("</table:table-row>", pos0) + 18;
        QString s_row = s_content.mid(pos0, pos1-pos0);

        // правка полей контента шаблона
        QString s_content_new = s_content.left(pos0);
        s_content_new = s_content_new
                .replace("#DATE_FROM#", date1.toString("dd.MM.yyyy"))
                .replace("#DATE_TO#",   date2.toString("dd.MM.yyyy"));


        // перебор строк отчёта
        int n = 0;
        int old=0, add=0, dec=0, new_=0;
        int s_old=0, s_add=0, s_dec=0, s_new=0;
        while (query->next()) {
            n++;
            QString s_row_new = s_row;

            old = query->value(3).toInt();
            add = query->value(4).toInt();
            dec = query->value(5).toInt();
            new_ = query->value(6).toInt();

            s_old += old;
            s_add += add;
            s_dec += dec;
            s_new += new_;

            QString old_s = old!=0  ? QString::number(old)  : "";
            QString add_s = add!=0  ? QString::number(add)  : "";
            QString dec_s = dec!=0  ? QString::number(dec)  : "";
            QString new_s = new_!=0 ? QString::number(new_) : "";

            s_row_new = s_row_new
                    .replace("#N#", QString::number(n))
                    .replace("#POINT_NAME#", "(" + query->value(1).toString() + ")  " + query->value(2).toString())
                    .replace("#OLD#",old_s)
                    .replace("#ADD#",add_s)
                    .replace("#DEC#",dec_s)
                    .replace("#NEW#",new_s);

            s_content_new += s_row_new;
        }
        s_content_new += s_content.right(s_content.size()-pos1);

        QString s_old_s = s_old!=0 ? QString::number(s_old) : "";
        QString s_add_s = s_add!=0 ? QString::number(s_add) : "";
        QString s_dec_s = s_dec!=0 ? QString::number(s_dec) : "";
        QString s_new_s = s_new!=0 ? QString::number(s_new) : "";

        s_content_new = s_content_new
                .replace("#S_OLD#",s_old_s)
                .replace("#S_ADD#",s_add_s)
                .replace("#S_DEC#",s_dec_s)
                .replace("#S_NEW#",s_new_s);

        // сохранение контента шаблона
        QFile f_content_save(tmp_folder + "/content.xml");
        f_content_save.open(QIODevice::WriteOnly);
        f_content_save.write(s_content_new.toUtf8());
        f_content_save.close();


        // ===========================
        // архивация шаблона
        // ===========================
        QString fname_res = data_app.path_out + "_REPORTS_/" +
                QDate::currentDate().toString("yyyy-MM-dd") + "  -  " + data_app.smo_short + " - " + data_app.filial_name + "  -  Отчёт о движении электронных бланков полисов единого образца в разрезе ПВП за период  " + date1.toString("dd.MM.yyyy") + " - " + date2.toString("dd.MM.yyyy") + ".ods";

        QFile::remove(fname_res);
        while (QFile::exists(fname_res)) {
            if (QMessageBox::warning(this,
                                     "Ошибка сохранения отчёта",
                                     "Не удалось сохранить отчёт: \n" + rep_template +
                                     "\n\nво временную папку\n" + fname_res +
                                     "\n\nПроверьте, не открыт ли целевой файл в сторонней программе и повторите операцию.",
                                     QMessageBox::Retry|QMessageBox::Abort,
                                     QMessageBox::Retry)==QMessageBox::Abort) {
                this->setCursor(Qt::ArrowCursor);
                return;
            }
            QFile::remove(fname_res);
        }
        if (!QFile::copy(rep_template, fname_res) || !QFile::exists(fname_res)) {
            QMessageBox::warning(this, "Ошибка копирования отчёта", "Не удалось скопировать отчёт: \n" + rep_template + "\n\nво временную папку\n" + fname_res + "\n\nОперация прервана.");
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        com = "\"" + data_app.path_arch + "7z.exe\" a \"" + fname_res + "\" \"" + tmp_folder + "/content.xml\"";
        if (myProcess.execute(com)!=0) {
            QMessageBox::warning(this,
                                 "Ошибка обновления контента",
                                 "При добавлении нового контента в отчёт по электронным бланкам полисов единого бразца произошла непредвиденная ошибка\n\nОпреация прервана.");
        }

        // ===========================
        // собственно открытие шаблона
        // ===========================
        // открытие полученного ODT
        long result = (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_res.utf16()), 0, 0, SW_NORMAL);

        //close();
        this->setCursor(Qt::ArrowCursor);




    } else {
        QMessageBox::information(this, "Действие отменено пользователем", "Действие отменено пользователем");
    }
}

void persons_wnd::on_act_1st_aid_sexage_by_list_triggered() {
    delete  print_1st_aid_sexage_by_list_w;
    print_1st_aid_sexage_by_list_w = new print_1st_aid_sexage_by_list_wnd(db, data_app, settings, this);
    print_1st_aid_sexage_by_list_w->exec();
}

void persons_wnd::on_act_polises_n_vs_by_point_triggered() {
    // отчёт по выдаче полисов и ВС на ПВП - форма МАКС-М
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }

    delete get_date_w;
    QDate date1 = QDate::currentDate();
    date1 = date1.addDays(-1);
    QDate date2 = date1;

    get_date_w = new get_date_wnd("Дата отчёта о выданных полисах ОМС и ВС",
                                  "Выберите дату (диапазон дат), по состоянию на которую надо сформировать отчёт о выданных полисах ОМС и ВС в разрезе ПВП.",
                                  true, true, true, true, date1, date2, db, data_app, settings);
    if (!get_date_w->exec()) {
        QMessageBox::information(this, "Действие отменено пользователем", "Дата не выбрана.\nДействие отменено пользователем.");
        return;
    }

    QString dates_head_s = (date1==date2) ? QString("по состоянию на " + date1.toString("dd.MM.yyyy")) : QString(" за " + date1.toString("dd.MM.yyyy") + " - " + date2.toString("dd.MM.yyyy"));
    QString dates_s      = (date1==date2) ? QString(" " + date1.toString("dd.MM.yyyy")) : QString(" за " + date1.toString("dd.MM.yyyy") + " - " + date2.toString("dd.MM.yyyy"));

    // собственно сформируем отчёт
    QString sql = "select pnt.point_regnum, pnt.point_name, "
                  "       q_enp_all.cnt as cnt_enp_all, q_enp_30d.cnt as cnt_enp_30d, "
                  "       q_vs_all.cnt  as cnt_vs_all, q_vs_ret.cnt  as cnt_vs_ret, q_vs_new.cnt  as cnt_vs_new, "
                  "       q_s_enp_all.cnt as s_cnt_enp_all, q_s_enp_30d.cnt as s_cnt_enp_30d, "
                  "       q_s_vs_all.cnt  as s_cnt_vs_all, q_s_vs_ret.cnt  as s_cnt_vs_ret, q_s_vs_new.cnt  as s_cnt_vs_new "
                  "  from points pnt "

                  "/*выдано за один день, на дату*/ "
                  "  /*ЕНП всего*/ "
                  "  left join "
                  "       ( select pnt.point_regnum, pnt.point_name, count(*) as cnt "
                  "           from points pnt "
                  "           left join blanks_pol bp on(bp.id_point=pnt.id) "
                  "           left join polises p on(p.id=bp.id_polis) "
                  "           left join events evt on(evt.id=p.id_evt_add) "
                  "          where pnt.point_regnum<>'000' "
                  "            and cast(evt.event_dt as date)>='" + date1.toString("yyyy-MM-dd") + "' "
                  "            and cast(evt.event_dt as date)<='" + date2.toString("yyyy-MM-dd") + "' "
                  "          group by pnt.point_regnum, pnt.point_name "
                  "       ) q_enp_all on (q_enp_all.point_regnum=pnt.point_regnum) "
                  "  /*ЕНП в срок 30 раб.дней*/ "
                  "  left join "
                  "       ( select pnt.point_regnum, pnt.point_name, count(*) as cnt "
                  "           from points pnt "
                  "           left join blanks_pol bp on(bp.id_point=pnt.id) "
                  "           left join polises p on(p.id=bp.id_polis) "
                  "           left join polises p0 on(p.id_old_polis=p0.id) "
                  "           left join events evt on(evt.id=p.id_evt_add) "
                  "          where pnt.point_regnum<>'000' "
                  "            and cast(evt.event_dt as date)>='" + date1.toString("yyyy-MM-dd") + "' "
                  "            and cast(evt.event_dt as date)<='" + date2.toString("yyyy-MM-dd") + "' "
                  "            and (coalesce(p0.date_get2hand, CURRENT_DATE) - coalesce(p.date_get2hand, CURRENT_DATE))<=30 "
                  "          group by pnt.point_regnum, pnt.point_name "
                  "       ) q_enp_30d on (q_enp_30d.point_regnum=pnt.point_regnum) "
                  "  /*ВС всего*/ "
                  "  left join "
                  "       ( select pnt.point_regnum, pnt.point_name, count(*) as cnt "
                  "           from points pnt "
                  "           left join blanks_vs bv on(bv.id_point=pnt.id) "
                  "           left join polises p on(p.id=bv.id_polis) "
                  "           left join events evt on(evt.id=p.id_evt_add) "
                  "          where pnt.point_regnum<>'000' "
                  "            and cast(evt.event_dt as date)>='" + date1.toString("yyyy-MM-dd") + "' "
                  "            and cast(evt.event_dt as date)<='" + date2.toString("yyyy-MM-dd") + "' "
                  "          group by pnt.point_regnum, pnt.point_name "
                  "       ) q_vs_all on (q_vs_all.point_regnum=pnt.point_regnum) "
                  "  /*ВС повторно*/ "
                  "  left join "
                  "       ( select pnt.point_regnum, pnt.point_name, count(*) as cnt "
                  "           from points pnt "
                  "           left join blanks_vs bv on(bv.id_point=pnt.id) "
                  "           left join polises p on(p.id=bv.id_polis) "
                  "           left join events evt on(evt.id=p.id_evt_add) "
                  "          where pnt.point_regnum<>'000' "
                  "            and evt.event_code in('П061','П062','П063') "
                  "            and cast(evt.event_dt as date)>='" + date1.toString("yyyy-MM-dd") + "' "
                  "            and cast(evt.event_dt as date)<='" + date2.toString("yyyy-MM-dd") + "' "
                  "          group by pnt.point_regnum, pnt.point_name "
                  "       ) q_vs_ret on (q_vs_ret.point_regnum=pnt.point_regnum) "
                  "  /*ВС впервые*/ "
                  "  left join "
                  "       ( select pnt.point_regnum, pnt.point_name, count(*) as cnt "
                  "           from points pnt "
                  "           left join blanks_vs bv on(bv.id_point=pnt.id) "
                  "           left join polises p on(p.id=bv.id_polis) "
                  "           left join events evt on(evt.id=p.id_evt_add) "
                  "          where pnt.point_regnum<>'000' "
                  "            and evt.event_code in('П010','П034','П035','П036') "
                  "            and cast(evt.event_dt as date)>='" + date1.toString("yyyy-MM-dd") + "' "
                  "            and cast(evt.event_dt as date)<='" + date2.toString("yyyy-MM-dd") + "' "
                  "          group by pnt.point_regnum, pnt.point_name "
                  "       ) q_vs_new on (q_vs_new.point_regnum=pnt.point_regnum) "

                  "/* выдано всего, по состоянию на дату */ "
                  "  /*ЕНП всего*/ "
                  "  left join "
                  "       ( select pnt.point_regnum, pnt.point_name, count(*) as cnt "
                  "           from points pnt "
                  "           left join blanks_pol bp on(bp.id_point=pnt.id) "
                  "           left join polises p on(p.id=bp.id_polis) "
                  "           left join events evt on(evt.id=p.id_evt_add) "
                  "          where pnt.point_regnum<>'000' "
                  "            and cast(evt.event_dt as date)<='" + date2.toString("yyyy-MM-dd") + "' "
                  "          group by pnt.point_regnum, pnt.point_name "
                  "       ) q_s_enp_all on (q_s_enp_all.point_regnum=pnt.point_regnum) "
                  "  /*ЕНП в срок 30 раб.дней*/ "
                  "  left join "
                  "       ( select pnt.point_regnum, pnt.point_name, count(*) as cnt "
                  "           from points pnt "
                  "           left join blanks_pol bp on(bp.id_point=pnt.id) "
                  "           left join polises p on(p.id=bp.id_polis) "
                  "           left join polises p0 on(p.id_old_polis=p0.id) "
                  "           left join events evt on(evt.id=p.id_evt_add) "
                  "          where pnt.point_regnum<>'000' "
                  "            and cast(evt.event_dt as date)<='" + date2.toString("yyyy-MM-dd") + "' "
                  "            and (coalesce(p0.date_get2hand, CURRENT_DATE) - coalesce(p.date_get2hand, CURRENT_DATE))<=30  "
                  "          group by pnt.point_regnum, pnt.point_name "
                  "       ) q_s_enp_30d on (q_s_enp_30d.point_regnum=pnt.point_regnum) "
                  "  /*ВС всего*/ "
                  "  left join "
                  "       ( select pnt.point_regnum, pnt.point_name, count(*) as cnt "
                  "           from points pnt "
                  "           left join blanks_vs bv on(bv.id_point=pnt.id) "
                  "           left join polises p on(p.id=bv.id_polis) "
                  "           left join events evt on(evt.id=p.id_evt_add) "
                  "          where pnt.point_regnum<>'000' "
                  "            and evt.event_code in('П010','П034','П035','П036','П061','П062','П063') "
                  "            and cast(evt.event_dt as date)<='" + date2.toString("yyyy-MM-dd") + "' "
                  "          group by pnt.point_regnum, pnt.point_name "
                  "       ) q_s_vs_all on (q_s_vs_all.point_regnum=pnt.point_regnum) "
                  "  /*ВС повторно*/ "
                  "  left join "
                  "       ( select pnt.point_regnum, pnt.point_name, count(*) as cnt "
                  "           from points pnt "
                  "           left join blanks_vs bv on(bv.id_point=pnt.id) "
                  "           left join polises p on(p.id=bv.id_polis) "
                  "           left join events evt on(evt.id=p.id_evt_add) "
                  "          where pnt.point_regnum<>'000' "
                  "            and evt.event_code in('П061','П062','П063') "
                  "            and cast(evt.event_dt as date)<='" + date2.toString("yyyy-MM-dd") + "' "
                  "          group by pnt.point_regnum, pnt.point_name "
                  "       ) q_s_vs_ret on (q_s_vs_ret.point_regnum=pnt.point_regnum) "
                  "  /*ВС впервые*/ "
                  "  left join "
                  "       ( select pnt.point_regnum, pnt.point_name, count(*) as cnt "
                  "           from points pnt "
                  "           left join blanks_vs bv on(bv.id_point=pnt.id) "
                  "           left join polises p on(p.id=bv.id_polis) "
                  "           left join events evt on(evt.id=p.id_evt_add) "
                  "          where pnt.point_regnum<>'000' "
                  "            and evt.event_code in('П010','П034','П035','П036') "
                  "            and cast(evt.event_dt as date)<='" + date2.toString("yyyy-MM-dd") + "' "
                  "          group by pnt.point_regnum, pnt.point_name "
                  "       ) q_s_vs_new on (q_s_vs_new.point_regnum=pnt.point_regnum) "

                  " where pnt.point_regnum<>'000' "
                  " order by pnt.point_regnum ; ";


    QSqlQuery *query = new QSqlQuery(db);
    if (!mySQL.exec(this, sql, "Отчёт о выданныых поисах ОМС и ВС в разрезе ПВП", *query, true, db, data_app)) {
        delete query;
        db.rollback();
        this->setCursor(Qt::ArrowCursor);
        return;
    }

    // распаковка шаблона
    QString rep_folder = data_app.path_reports;
    // распаковка шаблона
    QString tmp_folder = data_app.path_out + "_REPORTS_/temp/";
    QString rep_template = rep_folder + "rep_VS&pol_by_point.odt";

    if (!QFile::exists(rep_template)) {
        QMessageBox::warning(this,
                             "Шаблон не найден",
                             "Не найден шаблон печатной формы отчёта по движению бумажных банков полисов единого образца в разрезе ПВП: \n" + rep_template +
                             "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return;
    }
    QDir tmp_dir(tmp_folder);
    if (tmp_dir.exists(tmp_folder) && !tmp_dir.removeRecursively()) {
        QMessageBox::warning(this,
                             "Ошибка при очистке папки",
                             "Не удалось очистить папку временных файлов: \n" + tmp_folder +
                             "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return;
    }
    tmp_dir.mkpath(tmp_folder);
    QProcess myProcess;
    QString com = "\"" + data_app.path_arch + "7z.exe\" e \"" + rep_template + "\" -o\"" + tmp_folder + "\" content.xml";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка распаковки шаблона",
                             "Не удалось распаковать файл контента шаблона\n" + rep_template + " -> content.xml"
                             "\nпечатной формы во временную папку\n" + tmp_folder +
                             "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return;
    }
    com = "\"" + data_app.path_arch + "7z.exe\" e \"" + rep_template + "\" -o\"" + tmp_folder + "\" styles.xml";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка распаковки шаблона",
                             "Не удалось распаковать файл стилей шаблона \n" + rep_template + " -> styles.xml"
                             "\nпечатной формы во временную папку\n" + tmp_folder +
                             "\n\nПроверьте наличие и доступность программного интерфейса 7Z и доступность временной папки." + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return;
    }


    // ===========================
    // правка контента шаблона
    // ===========================
    // открытие контента шаблона
    QFile f_content(tmp_folder + "/content.xml");
    f_content.open(QIODevice::ReadOnly);
    QString s_content = f_content.readAll();
    f_content.close();
    if (s_content.isEmpty()) {
        QMessageBox::warning(this,
                             "Файл контента шаблона пустой",
                             "Файл контента шаблона пустой. Возможно шаблон был испорчен.\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return;
    }
    // выбор шаблона
    int pos0 = s_content.indexOf("<table:table-row table:style-name=\"Таблица6.5\">", 0);
    int pos1 = s_content.indexOf("</table:table-row>", pos0) + 18;
    QString s_row = s_content.mid(pos0, pos1-pos0);

    // правка полей контента шаблона
    QString s_content_new = s_content.left(pos0);
    s_content_new = s_content_new
            .replace("#FILIAL_RP#", data_app.filial_by_city_tp)
            .replace("#DATES_REP_HEAD#", dates_head_s)
            .replace("#DATES_REP#", dates_s)
            .replace("#DATE2_REP#", date2.toString("dd.MM.yyyy"));


    // перебор строк отчёта
    QString point_regnum, point_name;
    int n = 0;
    int enp_all=0,       enp_30d=0,       vs_all=0,       vs_ret=0,       vs_new=0;
    int s_enp_all=0,     s_enp_30d=0,     s_vs_all=0,     s_vs_ret=0,     s_vs_new=0;
    int sum_enp_all=0,   sum_enp_30d=0,   sum_vs_all=0,   sum_vs_ret=0,   sum_vs_new=0;
    int sum_s_enp_all=0, sum_s_enp_30d=0, sum_s_vs_all=0, sum_s_vs_ret=0, sum_s_vs_new=0;
    while (query->next()) {
        n++;
        QString s_row_new = s_row;

        point_regnum= query->value( 0).toString();
        point_name  = query->value( 1).toString();
        enp_all     = query->value( 2).toInt();
        enp_30d     = query->value( 3).toInt();
        vs_all      = query->value( 4).toInt();
        vs_ret      = query->value( 5).toInt();
        vs_new      = query->value( 6).toInt();
        s_enp_all   = query->value( 7).toInt();
        s_enp_30d   = query->value( 8).toInt();
        s_vs_all    = query->value( 9).toInt();
        s_vs_ret    = query->value(10).toInt();
        s_vs_new    = query->value(11).toInt();

        sum_enp_all   += enp_all;
        sum_enp_30d   += enp_30d;
        sum_vs_all    += vs_all;
        sum_vs_ret    += vs_ret;
        sum_vs_new    += vs_new;
        sum_s_enp_all += s_enp_all;
        sum_s_enp_30d += s_enp_30d;
        sum_s_vs_all  += s_vs_all;
        sum_s_vs_ret  += s_vs_ret;
        sum_s_vs_new  += s_vs_new;

        QString enp_all_s   = enp_all!=0   ? QString::number(enp_all)   : "";
        QString enp_30d_s   = enp_30d!=0   ? QString::number(enp_30d)   : "";
        QString vs_all_s    = vs_all!=0    ? QString::number(vs_all)    : "";
        QString vs_ret_s    = vs_ret!=0    ? QString::number(vs_ret)    : "";
        QString vs_new_s    = vs_new!=0    ? QString::number(vs_new)    : "";
        QString s_enp_all_s = s_enp_all!=0 ? QString::number(s_enp_all) : "";
        QString s_enp_30d_s = s_enp_30d!=0 ? QString::number(s_enp_30d) : "";
        QString s_vs_all_s  = s_vs_all!=0  ? QString::number(s_vs_all)  : "";
        QString s_vs_ret_s  = s_vs_ret!=0  ? QString::number(s_vs_ret)  : "";
        QString s_vs_new_s  = s_vs_new!=0  ? QString::number(s_vs_new)  : "";

        s_row_new = s_row_new
                .replace("#CODE#",       point_regnum)
                .replace("#POINT_NAME#", point_name)
                .replace("#ENP_ALL#",    enp_all_s)
                .replace("#ENP_30d#",    enp_30d_s)
                .replace("#VS_ALL#",     vs_all_s)
                .replace("#VS_RET#",     vs_ret_s)
                .replace("#VS_NEW#",     vs_new_s)
                .replace("#S_ENP_ALL#",  s_enp_all_s)
                .replace("#S_ENP_30d#",  s_enp_30d_s)
                .replace("#S_VS_ALL#",   s_vs_all_s)
                .replace("#S_VS_RET#",   s_vs_ret_s)
                .replace("#S_VS_NEW#",   s_vs_new_s);

        s_content_new += s_row_new;
    }
    s_content_new += s_content.right(s_content.size()-pos1);

    QString sum_enp_all_s   = sum_enp_all!=0   ? QString::number(sum_enp_all)   : "";
    QString sum_enp_30d_s   = sum_enp_30d!=0   ? QString::number(sum_enp_30d)   : "";
    QString sum_vs_all_s    = sum_vs_all!=0    ? QString::number(sum_vs_all)    : "";
    QString sum_vs_ret_s    = sum_vs_ret!=0    ? QString::number(sum_vs_ret)    : "";
    QString sum_vs_new_s    = sum_vs_new!=0    ? QString::number(sum_vs_new)    : "";
    QString sum_s_enp_all_s = sum_s_enp_all!=0 ? QString::number(sum_s_enp_all) : "";
    QString sum_s_enp_30d_s = sum_s_enp_30d!=0 ? QString::number(sum_s_enp_30d) : "";
    QString sum_s_vs_all_s  = sum_s_vs_all!=0  ? QString::number(sum_s_vs_all)  : "";
    QString sum_s_vs_ret_s  = sum_s_vs_ret!=0  ? QString::number(sum_s_vs_ret)  : "";
    QString sum_s_vs_new_s  = sum_s_vs_new!=0  ? QString::number(sum_s_vs_new)  : "";

    s_content_new = s_content_new
            .replace("#ENP_ALL+#",   sum_enp_all_s)
            .replace("#ENP_30d+#",   sum_enp_30d_s)
            .replace("#VS_ALL+#",    sum_vs_all_s)
            .replace("#VS_RET+#",    sum_vs_ret_s)
            .replace("#VS_NEW+#",    sum_vs_new_s)
            .replace("#S_ENP_ALL+#", sum_s_enp_all_s)
            .replace("#S_ENP_30d+#", sum_s_enp_30d_s)
            .replace("#S_VS_ALL+#",  sum_s_vs_all_s)
            .replace("#S_VS_RET+#",  sum_s_vs_ret_s)
            .replace("#S_VS_NEW+#",  sum_s_vs_new_s)
            .replace("#CHIF_POST#",  data_app.filial_director)
            .replace("#CHIF_POST2#", data_app.filial_director_2)
            .replace("#CHIF_FIO#",   data_app.filial_director_fio);
    // сохранение контента шаблона
    QFile f_content_save(tmp_folder + "/content.xml");
    f_content_save.open(QIODevice::WriteOnly);
    f_content_save.write(s_content_new.toUtf8());
    f_content_save.close();


    // ===========================
    // архивация шаблона
    // ===========================
    QString fname_res = data_app.path_out + "_REPORTS_/" +
            QDate::currentDate().toString("yyyy-MM-dd") + "  -  " + data_app.smo_short + " - " + data_app.filial_name + "  -  Отчёт о выданных полисах ОМС и ВС " + data_app.filial_by_city_tp + " " + dates_s + ".ods";

    QFile::remove(fname_res);
    while (QFile::exists(fname_res)) {
        if (QMessageBox::warning(this,
                                 "Ошибка сохранения отчёта",
                                 "Не удалось сохранить отчёт: \n" + rep_template +
                                 "\n\nво временную папку\n" + fname_res +
                                 "\n\nПроверьте, не открыт ли целевой файл в сторонней программе и повторите операцию.",
                                 QMessageBox::Retry|QMessageBox::Abort,
                                 QMessageBox::Retry)==QMessageBox::Abort) {
            this->setCursor(Qt::ArrowCursor);
            return;
        }
        QFile::remove(fname_res);
    }
    if (!QFile::copy(rep_template, fname_res) || !QFile::exists(fname_res)) {
        QMessageBox::warning(this, "Ошибка копирования отчёта", "Не удалось скопировать отчёт: \n" + rep_template + "\n\nво временную папку\n" + fname_res + "\n\nОперация прервана.");
        this->setCursor(Qt::ArrowCursor);
        return;
    }
    com = "\"" + data_app.path_arch + "7z.exe\" a \"" + fname_res + "\" \"" + tmp_folder + "/content.xml\"";
    if (myProcess.execute(com)!=0) {
        QMessageBox::warning(this,
                             "Ошибка обновления контента",
                             "При добавлении нового контента в отчёт по бумажным бланкам полисов единого бразца произошла непредвиденная ошибка\n\nОпреация прервана.");
    }

    // ===========================
    // собственно открытие шаблона
    // ===========================
    // открытие полученного ODT
    long result = (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_res.utf16()), 0, 0, SW_NORMAL);

    //close();
    this->setCursor(Qt::ArrowCursor);
}

void persons_wnd::on_ch_id_field_clicked(bool checked) {
    ui->ch_id_guid->setVisible(checked);
    ui->ch_id_note->setVisible(checked);
    ui->bn_save_note->setVisible(checked);
    ui->bn_delete_note->setVisible(checked);
    ui->line_note->setVisible(checked);
    if (!checked) {
        ui->ch_id_guid->setChecked(false);
        ui->ch_id_note->setChecked(false);
        ui->bn_save_note->setEnabled(false);
        ui->bn_delete_note->setEnabled(false);
        ui->line_note->clear();
    }
    refresh_persons_tab();
}
void persons_wnd::on_ch_id_guid_clicked(bool checked)
{  refresh_persons_tab();  }
void persons_wnd::on_ch_id_note_clicked(bool checked)
{  refresh_persons_tab();  }

void persons_wnd::on_bn_save_note_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Нажмите кнопку [Поиск] и выберите человека из списка.");
        return;
    }
    QString note = ui->line_note->text().trimmed();
    if (note.isEmpty()) {
        QMessageBox::warning(this, "Нечего сохранять!",
                             "Текст пометки пустой. Нечего сохранять.\n"
                             "Операция отменена, ничего не изменилось.");
        return;
    }
    if (QMessageBox::question(this, "Внести пометку?",
                             "Внести пометку для выбранной персоны?",
                             QMessageBox::Save|QMessageBox::Cancel,
                             QMessageBox::Cancel)==QMessageBox::Cancel) {
        return;
    }
    db.transaction();

    // проверим выделенную строку
    QModelIndexList indexes = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes.size()>0) {
        this->setCursor(Qt::WaitCursor);
        QModelIndex index = indexes.front();

        data_pers.id = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();       // e.id
        QString sql = "update persons e "
                      "   set note='" + note + "' "
                      " where e.id=" + QString::number(data_pers.id) + " ; ";

        QSqlQuery *query = new QSqlQuery(db);
        if (!mySQL.exec(this, sql, "Сохраним новую заметку для выбранной персоны", *query, true, db, data_app)) {
            delete query;
            db.rollback();
            this->setCursor(Qt::ArrowCursor);
            return;
        }
    }
    db.commit();
    ui->line_note->setText("");
    this->setCursor(Qt::ArrowCursor);
    refresh_persons_tab();
}

void persons_wnd::on_bn_delete_note_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_persons || !ui->tab_persons->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Нажмите кнопку [Поиск] и выберите человека из списка.");
        return;
    }
    if (QMessageBox::question(this, "Стереть пометку?",
                             "Стереть пометку для выбранной персоны?",
                             QMessageBox::Ok|QMessageBox::Cancel,
                             QMessageBox::Cancel)==QMessageBox::Cancel) {
        return;
    }
    db.transaction();

    // проверим выделенную строку
    QModelIndexList indexes = ui->tab_persons->selectionModel()->selection().indexes();

    if (indexes.size()>0) {
        this->setCursor(Qt::WaitCursor);
        QModelIndex index = indexes.front();

        data_pers.id = model_persons.data(model_persons.index(index.row(), 0), Qt::EditRole).toInt();       // e.id
        QString sql = "update persons e "
                      "   set note=NULL "
                      " where e.id=" + QString::number(data_pers.id) + " ; ";

        QSqlQuery *query = new QSqlQuery(db);
        if (!mySQL.exec(this, sql, "Удалим пометку для выбранной персоны", *query, true, db, data_app)) {
            delete query;
            db.rollback();
            this->setCursor(Qt::ArrowCursor);
            return;
        }
    }
    db.commit();
    ui->line_note->setText("");
    this->setCursor(Qt::ArrowCursor);
    refresh_persons_tab();
}

void persons_wnd::on_line_note_returnPressed() {
    on_bn_save_note_clicked();
}

void persons_wnd::on_bn_save_Sfile_clicked() {
    if (!db.isOpen()) {
        QMessageBox::warning(this, ("Нет доступа к базе данных"), ("Нет открытого соединения к базе данных?\n Это ненормальная ситуация и вы не должны были увидеть этого сообщения..(\n Перезапустите программу. Если это сообщение будет повторяться - сообщите разработчику."));
        return;
    }
    if (!ui->tab_polises || !ui->tab_polises->selectionModel()) {
        QMessageBox::warning(this, "Таблица не загружена!",
                             "Таблица не загружена!\n"
                             "Нажмите кнопку [Обновить] и выберите посылку из списка.");
        return;
    }

    // проверим выделенную строку
    QModelIndexList indexes_stop = ui->tab_polises->selectionModel()->selection().indexes();

    if (indexes_stop.size()>0) {
        QModelIndex index_stop = indexes_stop.front();
        db.transaction();

        // данные посылки
        int id_stop   = model_polises.data(model_polises.index(index_stop.row(), 55), Qt::EditRole).isNull() ? -1 :
                        model_polises.data(model_polises.index(index_stop.row(), 55), Qt::EditRole).toInt();

        QString sql_sel = "select file_name, bin from files_in_s "
                          " where id=" + QString::number(id_stop) + " ; ";

        QSqlQuery *query_sel = new QSqlQuery(db);
        if (!mySQL.exec(this, sql_sel, "Получим файл посылки", *query_sel, true, db, data_app)) {
            db.rollback();
            QMessageBox::critical(this, "Непредвиденная ошибка",
                                  "При попытке получить СТОП-файл произошла неожиданная ошибка.\n\n"
                                  "Действие отменено.");
            delete query_sel;
            return;
        }
        if (query_sel->next()) {
            QString name_file_s = query_sel->value(0).toString();
            QByteArray arr = query_sel->value(1).toByteArray();
            QString fname_res = data_app.path_temp + name_file_s;

            if ( fname_res.right(4).toLower()!=".xml"
                 && fname_res.right(4).toLower()!=".zip"
                 && fname_res.right(4).toLower()!=".7z" )
                fname_res += ".xml";

            //mySQL.myUnBYTEA(BYTEA_str, fname_res);
            QFile f(fname_res);

            f.remove();
            if (!f.open(QIODevice::WriteOnly)) {
                QMessageBox::warning(this,
                                     "Ошибка создания файла",
                                     "При создании целевого файла произошла ошибка.\n\n"
                                     "Операция отменена.");
                return;
            }
            f.write(arr );
            f.close();
            long result = (long long)ShellExecute(0, 0, reinterpret_cast<const WCHAR*>(fname_res.utf16()), 0, 0, SW_NORMAL);
        } else {
            QMessageBox::warning(this, "Ничего не получено", "При попытке получить данныые СТОП-файла ничего не получено.");
        }
        delete query_sel;

    } else {
        QMessageBox::warning(this, "Ничего не выбрано", "Ничего не выбрано");
    }
}

void persons_wnd::on_act_BSO_blanks_triggered() {
    // откроем окно контроля бланков строгой отчётности
    this->blanks_bso_w = new blanks_BSO_wnd(db, data_app, settings, this);
    if (this->blanks_bso_w->exec()) {
    }
}
